{"version":3,"file":"component---src-pages-mdx-frontmatter-type-mdx-frontmatter-slug-js-content-file-path-src-pages-motivation-mdx-f819f5766ad748f3cd56.js","mappings":"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","sources":["webpack://simple-scss-utilities/./src/pages/{mdx.frontmatter__type}/{mdx.frontmatter__slug}.js","webpack://simple-scss-utilities/./src/components/Layout/SidebarContext.js","webpack://simple-scss-utilities/./src/components/Layout/CustomAnchor.js","webpack://simple-scss-utilities/./src/components/Layout/Sidebar.js","webpack://simple-scss-utilities/./src/components/Layout/SidebarLayout.js","webpack://simple-scss-utilities/./src/pages/motivation.mdx"],"sourcesContent":["import GATSBY_COMPILED_MDX from \"C:/Users/bthve/Desktop/2025 job search and side projects/side-repos/simple-scss-utilities-docs/src/pages/motivation.mdx\";\nimport React from \"react\";\nimport {useStaticQuery, graphql} from \"gatsby\";\nimport Layout from \"../../components/Layout/Layout\";\nimport SidebarLayout from \"../../components/Layout/SidebarLayout\";\nconst DocumentPage = ({location, data: {mdx}, children}) => {\n  const {pathname} = location;\n  if (pathname.includes(\"/page/\")) {\n    return React.createElement(React.Fragment, null, children);\n  }\n  return React.createElement(Layout, {\n    onSideBarPage: true\n  }, React.createElement(SidebarLayout, {\n    pathname: pathname\n  }, React.createElement(\"main\", null, children)));\n};\nDocumentPage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(DocumentPage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String) {\n    mdx(id: { eq: $id }) {\n      id\n      body\n      frontmatter {\n        description\n        title\n        type\n        image\n      }\n    }\n  }\n`;\n","import { createContext } from \"react\"\r\n\r\nconst SidebarContext = createContext({\r\n  hasScrolled: false,\r\n  setHasScrolled: () => {}, // keep track if the scrolling was done by the user\r\n\r\n  activeAnchor: \"\", // '${path} ${to} of active anchor link'\r\n  setActiveAnchor: () => {}\r\n})\r\n\r\nexport default SidebarContext\r\n","import React, { useState, useEffect, useContext } from \"react\"\r\nimport SidebarContext from \"./SidebarContext\"\r\nimport { useLocation } from \"@reach/router\"\r\nimport { navigate } from \"gatsby\"\r\n\r\n/*\r\n  Gatsby seemed to have a little trouble with anchor links \r\n  Not only did they not seem to quite work but.. I also wanted to implement smooth scrolling\r\n  if you jump from page to page so I made my own component. \r\n  It's possible to make the URLs just slightly awkared if you\r\n  click directly on the link .. but.. they still work\r\n*/\r\nconst CustomAnchor = ({ children, path, to }) => {\r\n  const location = useLocation()\r\n  const { activeAnchor, setActiveAnchor, hasScrolled, setHasScrolled } =\r\n    useContext(SidebarContext)\r\n  const [active, setActive] = useState(false)\r\n  const { pathname } = location\r\n\r\n  useEffect(() => {\r\n    if (activeAnchor == `${process.env.PATH_PREFIX}${path} ${to}`) {\r\n      setActive(true)\r\n    } else {\r\n      setActive(false)\r\n    }\r\n  }, [activeAnchor])\r\n\r\n  // console.log(\r\n  //   `path: ${path} to: ${to} pathname: ${pathname} prefix with path: ${process.env.PATH_PREFIX}${path}`\r\n  // )\r\n\r\n  return (\r\n    <p\r\n      className={`${active ? \"font-bold\" : \"\"} cursor-pointer`}\r\n      onClick={() => {\r\n        // the pathname from location usually has an added slash\r\n\r\n        if (`${process.env.PATH_PREFIX}${path}/` == pathname) {\r\n          const tag = document.getElementById(to)\r\n          tag.scrollIntoView({ behavior: \"smooth\" })\r\n          // set \"hasScrolled\" to false .. gets set true if the user scrolls the docs area\r\n          setHasScrolled(false)\r\n\r\n          // in the MDX anchor componnnt, the text generates the id \"to\"\r\n          // two anchor links on different documents might have the same text so\r\n          // I have the path be part of the identifying string\r\n          // as long as 2 anchors on the same MDX page don't have the same text we're good\r\n          setActiveAnchor(`${process.env.PATH_PREFIX}${path} ${to}`)\r\n        } else {\r\n          navigate(`${path}?anchor=${to}`)\r\n        }\r\n      }}\r\n    >\r\n      {children}\r\n    </p>\r\n  )\r\n}\r\n\r\nexport default CustomAnchor\r\n","import React, { useState, useEffect, useContext } from \"react\"\r\nimport { Link } from \"gatsby\"\r\nimport { useLocation } from \"@reach/router\"\r\nimport CustomAnchor from \"./CustomAnchor\"\r\nimport SidebarContext from \"./SidebarContext\"\r\nimport LayoutContext from \"./LayoutContext\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faX, faBars } from \"@fortawesome/free-solid-svg-icons\"\r\nimport * as layoutStyles from \"./layout.module.scss\"\r\nimport useWindowDimensions from \"../../hooks/useWindowDimensions\"\r\n// HEADER IS A ReserveD WORD\r\n\r\nconst SideBar = ({ sidebarData }) => {\r\n  const { setActiveAnchor, hasScrolled } = useContext(SidebarContext)\r\n  const { sidebarOpen, setSidebarOpen } = useContext(LayoutContext)\r\n\r\n  const [anchorsOnPage, setAnchorsOnPage] = useState([])\r\n  const [anchorsLoaded, setAnchorsLoaded] = useState(false)\r\n  const [anchorUpdate, setAnchorUpdate] = useState([])\r\n\r\n  const [intialAnchorLinkSet, setIntialAnchorLinkSet] = useState(false)\r\n\r\n  // const [sidebarOpen, setSidebarOpen] = useState(true)\r\n  const [wideScreen, setWideScreen] = useState(false)\r\n  const { width } = useWindowDimensions()\r\n\r\n  const location = useLocation()\r\n  const { pathname } = location\r\n\r\n  // ok every time something enteres or leaves, update\r\n  // the anchors in view\r\n  useEffect(() => {\r\n    const els = document.querySelectorAll(\".anchor-link\")\r\n\r\n    const observerCallback = (entries, observer, header) => {\r\n      const newAnchorInfo = []\r\n      entries.forEach((entry, i) => {\r\n        const to = entry.target.href.split(\"#\")[1]\r\n        const path = pathname.slice(0, -1)\r\n        const anchorString = `${path} ${to}`\r\n\r\n        if (entry.isIntersecting) {\r\n          newAnchorInfo.push({\r\n            anchorString,\r\n            inView: true,\r\n            offsetTop: entry.target.offsetTop\r\n          })\r\n        } else {\r\n          newAnchorInfo.push({\r\n            anchorString,\r\n            inView: false,\r\n            offsetTop: entry.target.offsetTop\r\n          })\r\n        }\r\n      })\r\n\r\n      setAnchorUpdate(newAnchorInfo)\r\n    }\r\n\r\n    const observer = new window.IntersectionObserver(observerCallback, {\r\n      root: null,\r\n      threshold: 0.5 // set offset 0.1 means trigger if atleast 10% of element in viewport\r\n    })\r\n\r\n    els.forEach((el) => {\r\n      observer.observe(el)\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (anchorUpdate.length && !anchorsLoaded) {\r\n      setAnchorsOnPage(anchorUpdate)\r\n      setAnchorsLoaded(true)\r\n    }\r\n  }, [anchorUpdate, anchorsLoaded])\r\n\r\n  // eh, there might be a better way to do this but\r\n  // by the time I got here I was like \"It works, and it's good enough!\"\r\n  useEffect(() => {\r\n    // to prevent infinite reloading, only update if there is a non-empty update, and then set the update to empty if done\r\n    if (anchorsLoaded && anchorUpdate.length) {\r\n      let newAnchorsOnPage = [...anchorsOnPage]\r\n      anchorUpdate.forEach((anchorInfo) => {\r\n        const index = anchorsOnPage.findIndex((anchor) => {\r\n          return anchorInfo.anchorString == anchor.anchorString\r\n        })\r\n\r\n        if (index >= 0) {\r\n          newAnchorsOnPage.splice(index, 1, anchorInfo)\r\n        }\r\n      })\r\n\r\n      setAnchorsOnPage(newAnchorsOnPage)\r\n      setAnchorUpdate([])\r\n\r\n      if (hasScrolled) {\r\n        let smallestTopOffset = Number.POSITIVE_INFINITY\r\n        let indexOfSmallestOffset = -1\r\n        newAnchorsOnPage.forEach((anchor, i) => {\r\n          if (anchor.inView && anchor.offsetTop < smallestTopOffset) {\r\n            smallestTopOffset = anchor.offsetTop\r\n            indexOfSmallestOffset = i\r\n          }\r\n        })\r\n\r\n        if (indexOfSmallestOffset >= 0) {\r\n          const newActiveAnchorInfo = newAnchorsOnPage[indexOfSmallestOffset]\r\n          setActiveAnchor(newActiveAnchorInfo.anchorString)\r\n        } else {\r\n          // if we're here, there's no anchors vidible on screen\r\n          setActiveAnchor(\"\")\r\n        }\r\n      }\r\n    }\r\n  }, [anchorsOnPage, anchorUpdate, anchorsLoaded, hasScrolled])\r\n\r\n  useEffect(() => {\r\n    if (location.search && !intialAnchorLinkSet) {\r\n      const urlParams = new URLSearchParams(location.search)\r\n      const anchorLink = urlParams.get(\"anchor\")\r\n      if (anchorLink) {\r\n        const tag = document.getElementById(anchorLink)\r\n        if (tag) {\r\n          tag.scrollIntoView({ behavior: \"smooth\" })\r\n\r\n          const path = pathname.slice(0, -1)\r\n          setActiveAnchor(`${path} ${anchorLink}`)\r\n        }\r\n      }\r\n      setIntialAnchorLinkSet(true)\r\n    } else if (anchorsLoaded && !intialAnchorLinkSet) {\r\n      // just set the active anchor link to the highest link in view\r\n      // pretty sure it's just gonna be the firs one that's \"in view\"\r\n      // and if the first one is in view, it's gonna be that one so ..\r\n      let firstAnchor = anchorsOnPage[0]\r\n\r\n      if (firstAnchor.inView) {\r\n        setActiveAnchor(firstAnchor.anchorString)\r\n      }\r\n\r\n      setIntialAnchorLinkSet(true)\r\n    }\r\n  }, [anchorsLoaded, anchorsOnPage, intialAnchorLinkSet])\r\n\r\n  useEffect(() => {\r\n    if (width > 768) {\r\n      setWideScreen(true)\r\n    } else {\r\n      setWideScreen(false)\r\n    }\r\n  }, [width])\r\n\r\n  useEffect(() => {\r\n    setSidebarOpen(true)\r\n  }, [wideScreen])\r\n\r\n  // organize alphabetically\r\n  // then loop the map and fill in the links and sublinks\r\n  console.log(\"SIDEBAR DATA IS\")\r\n  console.log(sidebarData)\r\n\r\n  if (!sidebarData) {\r\n    return <>{`No sidebar data for path ${pathname}`}</>\r\n  }\r\n\r\n  const { path, nodes } = sidebarData\r\n  const rootDocArr = []\r\n  const categoryArr = []\r\n  const categoryMap = {}\r\n  nodes.forEach((node) => {\r\n    const {\r\n      frontmatter: { category, title, slug, order, isCategoryRoot, anchorLinks }\r\n    } = node\r\n    if (!category) {\r\n      // don't give a slug of \"index\" part of the path here ..\r\n      // the path will just be /docs/ or /customize/ etc\r\n      // this is different for the categories\r\n      const pathName = slug === \"index\" ? `/${path}` : `/${path}/${slug}`\r\n      rootDocArr.push({\r\n        title,\r\n        path: pathName,\r\n        sublinks: null,\r\n        order,\r\n        anchorLinks\r\n      })\r\n    } else {\r\n      if (!categoryMap[category]) {\r\n        categoryMap[category] = []\r\n      }\r\n\r\n      if (isCategoryRoot) {\r\n        categoryArr.push({\r\n          title, // uppercase the first letter later\r\n          categoryName: category, // in case I change it from the title\r\n          isCategoryRoot: true,\r\n          path: `/${path}/${slug}`,\r\n          sublinks: null, // get changed into an array later\r\n          order,\r\n          anchorLinks\r\n        })\r\n      } else {\r\n        categoryMap[category].push({\r\n          title,\r\n          path: `/${path}/${slug}`,\r\n          order,\r\n          anchorLinks\r\n        })\r\n      }\r\n    }\r\n  })\r\n\r\n  // ok now loop through the sidebarLinkArr. If there's sublinks, fil them in\r\n\r\n  categoryArr.forEach((entry) => {\r\n    const category = entry.categoryName\r\n    entry.sublinks = categoryMap[category]\r\n  })\r\n\r\n  // the root docs will go first, sorted by an order property,  and then the categories\r\n  // in alphabetical order, and then the sublinks (in a category) are sorted by a frontmatter \"order\" property\r\n  // the anchor links are already determined in the frontmatter defintion\r\n  rootDocArr.sort((a, b) => a.order - b.order)\r\n  categoryArr.sort((a, b) => {\r\n    return a.order - b.order\r\n  })\r\n\r\n  categoryArr.forEach((item) => {\r\n    const { sublinks } = item\r\n\r\n    if (sublinks) {\r\n      sublinks.sort((a, b) => {\r\n        return a.order - b.order\r\n      })\r\n    }\r\n  })\r\n\r\n  const sidebarLinkArr = [...rootDocArr, ...categoryArr]\r\n\r\n  // capitalize category name\r\n  // .. hm.. oh yeah. Fix anchor links\r\n\r\n  return (\r\n    <>\r\n      <div className=\"w-0\">\r\n        <div\r\n          onClick={() => setSidebarOpen(true)}\r\n          className={`${\r\n            sidebarOpen ? \"display-none\" : \"display-flex\"\r\n          } text-xl w-3 h-3 position-relative top-1 left-1 radius-full cursor-pointer shadow-magenta-lg hover:shadow-blue-lg bg-background-ltr items-center justify-center bg-background z-5 text-magenta hover:text-blue`}\r\n        >\r\n          <FontAwesomeIcon icon={faBars} />\r\n        </div>\r\n      </div>\r\n      <div\r\n        id=\"sidebar\"\r\n        className={`${\r\n          layoutStyles.sidebar\r\n        }  max-tab:position-absolute max-tab:h-full min-w-1/4 max-tab:w-20 overflow-y-scroll bg-background z-4  ${\r\n          sidebarOpen ? \"\" : \"display-none\"\r\n        }`}\r\n      >\r\n        <nav className=\"p-md\">\r\n          <span className={`${wideScreen ? \"display-none\" : \"\"} `}>\r\n            <FontAwesomeIcon\r\n              className={`cursor-pointer hover:text-magenta text-magenta hover:text-blue text-lg py-sm`}\r\n              onClick={() => setSidebarOpen(false)}\r\n              icon={faX}\r\n            />\r\n          </span>\r\n          <ul className=\"display-flex flex-col line-height-lg\">\r\n            {sidebarLinkArr.map((entry) => {\r\n              const {\r\n                isCategoryRoot,\r\n                categoryName,\r\n                path,\r\n                title,\r\n                sublinks,\r\n                anchorLinks\r\n              } = entry\r\n\r\n              if (isCategoryRoot) {\r\n                const upperCaseTitle =\r\n                  title.charAt(0).toUpperCase() + title.slice(1)\r\n\r\n                const highlightLink =\r\n                  `${process.env.PATH_PREFIX}${path}/` === pathname\r\n\r\n                return (\r\n                  <li key={`${path} ${title}`}>\r\n                    <span\r\n                      className={`${\r\n                        highlightLink ? \"text-magenta\" : \"\"\r\n                      } font-large hover:text-magenta `}\r\n                    >\r\n                      <Link to={path}>{upperCaseTitle}</Link>\r\n                    </span>\r\n                    {anchorLinks && (\r\n                      <ul className=\"line-height-md \">\r\n                        {anchorLinks.map((anchorLink, i) => {\r\n                          // name of is a bit different, I don't think anchor links are a full \"path\" (might need to refacto later)\r\n                          const { title, link } = anchorLink\r\n\r\n                          return (\r\n                            <li\r\n                              key={`${title} ${link}`}\r\n                              className={`pl-md text-md ${\r\n                                i == anchorLinks.length - 1 ? \"mb-xs\" : \"\"\r\n                              } `}\r\n                            >\r\n                              <CustomAnchor path={path} to={link}>\r\n                                {title}\r\n                              </CustomAnchor>\r\n                            </li>\r\n                          )\r\n                        })}\r\n                      </ul>\r\n                    )}\r\n                    {sublinks && (\r\n                      <ul>\r\n                        {sublinks.map((link, i) => {\r\n                          const { title, path: subLinkPath, anchorLinks } = link\r\n\r\n                          const highlightLink =\r\n                            `${process.env.PATH_PREFIX}${subLinkPath}/` ===\r\n                            pathname\r\n\r\n                          return (\r\n                            <li\r\n                              key={`${title} ${subLinkPath}`}\r\n                              className={`pl-md font-normal   ${\r\n                                i == sublinks.length - 1 ? \"mb-xs\" : \"\"\r\n                              }`}\r\n                            >\r\n                              <span\r\n                                className={`${\r\n                                  highlightLink ? \"text-magenta\" : \"\"\r\n                                } font-bold hover:text-magenta`}\r\n                              >\r\n                                <Link to={subLinkPath}>{title}</Link>\r\n                              </span>\r\n\r\n                              {anchorLinks && (\r\n                                <ul className=\"line-height-md \">\r\n                                  {anchorLinks.map((anchorLink) => {\r\n                                    // name of is a bit different, I don't think anchor links are a full \"path\" (might need to refacto later)\r\n                                    const { title, link } = anchorLink\r\n\r\n                                    return (\r\n                                      <li\r\n                                        key={`${title} ${link}`}\r\n                                        className=\"pl-md text-md hover:text-magenta\"\r\n                                      >\r\n                                        <CustomAnchor\r\n                                          path={subLinkPath}\r\n                                          to={link}\r\n                                        >\r\n                                          {title}\r\n                                        </CustomAnchor>\r\n                                      </li>\r\n                                    )\r\n                                  })}\r\n                                </ul>\r\n                              )}\r\n                            </li>\r\n                          )\r\n                        })}\r\n                      </ul>\r\n                    )}\r\n                  </li>\r\n                )\r\n              }\r\n\r\n              const upperCaseTitle =\r\n                title.charAt(0).toUpperCase() + title.slice(1)\r\n\r\n              const highlightLink =\r\n                `${process.env.PATH_PREFIX}${path}/` === pathname\r\n\r\n              return (\r\n                <li key={`${path} ${title}`}>\r\n                  <span\r\n                    className={`${\r\n                      highlightLink ? \"text-magenta\" : \"\"\r\n                    } font-large hover:text-magenta`}\r\n                  >\r\n                    <Link to={path}>{title}</Link>\r\n                  </span>\r\n                </li>\r\n              )\r\n            })}\r\n          </ul>\r\n        </nav>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SideBar\r\n","import React, { useState, useContext } from \"react\"\r\nimport Footer from \"./Footer\"\r\nimport SideBar from \"./Sidebar\"\r\nimport LayoutContext from \"./LayoutContext\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\nimport * as layoutStyles from \"./layout.module.scss\"\r\nimport SidebarContext from \"./SidebarContext\"\r\n// not sure how best to pass the sidebar and the content\r\n\r\nconst SidebarLayout = ({ pathname, children }) => {\r\n  // context state\r\n  const { sidebarOpen, setSidebarOpen } = useContext(LayoutContext)\r\n\r\n  const [hasScrolled, setHasScrolled] = useState(false)\r\n  const [activeAnchor, setActiveAnchor] = useState(\"\")\r\n\r\n  const { docs, components, customize } = useStaticQuery(graphql`\r\n    query HeaderQuery {\r\n      docs: allMdx(filter: { frontmatter: { type: { eq: \"docs\" } } }) {\r\n        nodes {\r\n          id\r\n          frontmatter {\r\n            title\r\n            slug\r\n            category\r\n            order\r\n            isCategoryRoot\r\n            anchorLinks {\r\n              title\r\n              link\r\n            }\r\n          }\r\n        }\r\n      }\r\n      # components: allMdx(\r\n      #   filter: { frontmatter: { type: { eq: \"components\" } } }\r\n      # ) {\r\n      #   nodes {\r\n      #     id\r\n      #     frontmatter {\r\n      #       title\r\n      #       slug\r\n      #       category\r\n      #       order\r\n      #       isCategoryRoot\r\n      #       anchorLinks {\r\n      #         title\r\n      #         link\r\n      #       }\r\n      #     }\r\n      #   }\r\n      # }\r\n      customize: allMdx(\r\n        filter: { frontmatter: { type: { eq: \"customize\" } } }\r\n      ) {\r\n        nodes {\r\n          id\r\n          frontmatter {\r\n            title\r\n            slug\r\n            category\r\n            order\r\n            isCategoryRoot\r\n            anchorLinks {\r\n              title\r\n              link\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  // const pathParts = pathname.split(\"/\")\r\n  // const section = pathParts.length && pathname.split(\"/\")[1] // this should always be defined in this route but let;s be careful\r\n\r\n  let path_prefix = process.env.PATH_PREFIX\r\n    ? process.env.PATH_PREFIX\r\n    : process.env.GATSBY_PATH_PREFIX // make a .env.development file and put GAtSBY\r\n\r\n  let sidebarData\r\n\r\n  // this might be kinda janky code .. but I don't wanna spend forever trying to think about an alternative way\r\n  if (pathname.startsWith(`${path_prefix}docs`)) {\r\n    sidebarData = { path: \"docs\", ...docs }\r\n  } else if (pathname.startsWith(`${path_prefix}customize`)) {\r\n    sidebarData = { path: \"customize\", ...customize }\r\n  }\r\n\r\n  return (\r\n    <div id=\"sidebar-layout\" className=\"display-flex min-w-full grow-1\">\r\n      <SidebarContext.Provider\r\n        value={{\r\n          activeAnchor,\r\n          setActiveAnchor,\r\n          hasScrolled,\r\n          setHasScrolled\r\n        }}\r\n      >\r\n        <SideBar sidebarData={sidebarData} />\r\n        <div\r\n          id=\"docs-section\"\r\n          className={`display-flex flex-col grow-1 overflow-y-scroll position-relative ${layoutStyles.docsSection}`}\r\n          onWheel={() => {\r\n            setHasScrolled(true)\r\n          }}\r\n          // remember to test this on mobile\r\n          onTouchStart={() => {\r\n            setHasScrolled(true)\r\n          }}\r\n        >\r\n          <div\r\n            id=\"small-width-overlay\"\r\n            className={`display-none ${\r\n              sidebarOpen ? \"max-tab:display-block\" : \"\"\r\n            } position-fixed top-0 left-0 w-full h-full z-3 bg-black opacity-10`}\r\n          />\r\n          <div\r\n            id=\"the-document\"\r\n            className={`grow-1 pl-xl p-lg w-19/20 max-w-container lg:mx-auto   ${\r\n              sidebarOpen ? \"max-tab:filter-blur-md\" : \"\"\r\n            }`}\r\n          >\r\n            {children}\r\n          </div>\r\n          <Footer />\r\n        </div>\r\n      </SidebarContext.Provider>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SidebarLayout\r\n","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport ImportedLayout from \"../components/Layout/Layout\";\nimport {Paragraph} from \"../components/Mdx/textComponents\";\nconst MDXLayout = function Layout({children}) {\n  const _components = Object.assign({\n    main: \"main\"\n  }, _provideComponents());\n  return React.createElement(ImportedLayout, null, React.createElement(_components.main, {\n    className: \"p-xl\"\n  }, children));\n};\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h4: \"h4\",\n    p: \"p\",\n    hr: \"hr\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"About Simple SCSS Utilities\"), \"\\n\", React.createElement(_components.h4, null, \"So.. what's the point?\"), \"\\n\", React.createElement(\"div\", {\n    className: \"max-w-42 mx-auto text-lg line-height-xl\"\n  }, React.createElement(_components.p, null, \"Who needs another framework right? There's already more than I can name off the top of my head. At this point is trying to provide yet more alternatives to throw on the pile innovation... or pollution?\"), React.createElement(_components.p, null, \"Well, I'll worry about it if people actually use it. In the meantime, let me just say I just like writing my own SCSS.\"), React.createElement(_components.p, null, \"When I first encountered utility classes, they immediately felt right. Tailwind became my favorite framework. In fact you can make an entire big website with just it's built in classes. Nothing more. There's some rules about how to do things, but they're not terrible. In fact, if I were making a big enterpriese-level site, it would probably be my first choice.\"), React.createElement(_components.p, null, \"But what if - when I'm goofing off on my own - I like writing my own SCSS? Sure there's nothing \\\"preventing\\\" one from doing that. But where should the framework end and your own styles begin? What if you're doing it .. \\\"wrong\\\"? Plus combining PostCSS and SCSS is like combining two different things, y'know? Feels messier. A tiny bit more mental load.\"), React.createElement(_components.p, null, \"PostCSS can do stuff that SCSS can't do. That's alright, SCSS can do stuff that PostCSS can't. Guess it's just a matter of taste.\"), React.createElement(_components.p, null, \"What if a framework didn't try to do everything? What if it just tried to handle the bulk of the \\\"standard\\\" stuff, then get out of the way? And what if it was all in SCSS?\"), React.createElement(_components.p, null, \"I'd have my utility classes. Or at least most of 'em. It'd all be in SCSS, so I wouldn't be like, combining 2 differnet things, y'know? I'd have no worries about whether I was doing it \\\"right\\\" either. I like SCSS modules too! In this entire site, besides the banner, I have 1 SCSS module, and it's 4 lines long. I just wanted to keep it clean to show off the framework. But I could have as much or as little as I like, and that's the point.\"), React.createElement(_components.p, null, \"Anyway these were just feelings I had in the back of my mind, but I was inspired by an excellent SCSS turoial I watched one day which brought it all to the front:\"), React.createElement(\"div\", {\n    className: \"mb-xl pt-md\"\n  }, React.createElement(\"figure\", {\n    className: \"w-full\"\n  }, React.createElement(\"iframe\", {\n    width: \"673\",\n    height: \"380\",\n    src: \"https://www.youtube.com/embed?v=_kqN4hl9bGc&list=PL4cUxeGkcC9jxJX7vojNVK-o8ubDZEcNb&index=1\",\n    className: \"w-full\"\n  }), React.createElement(\"figcaption\", {\n    className: \"text-sm\"\n  }, React.createElement(Paragraph, {\n    className: \"text-md py-md\",\n    text: \"The tutorial that got me started\"\n  })))), React.createElement(_components.p, null, \"I decided to expand upon it and write stuff for most of the SCSS I typically use. But that's just it. I just want utiltiy classes. SO I took the tutorial with the goal of exapanding on it in order to make an almost tailwind clone in SCSS, something I would enjoy actually using in real projects:\"), React.createElement(_components.p, null, \"And here I'm documenting it, just to show it off, or in cace someone else thinks it might be useful. At least it's a neat portfolio project. I alreay have personal projects mentally lined up I'd use this with as soon as I'm done with these docs. And the docs really are the hard part. So much writing! Haha.\"), React.createElement(_components.p, null, \"Anyway, I was bored and it seemed like a good project. See the Install page, glance around the docs, see what Simple SCSS Utilites can do for you. Ciao!\"), React.createElement(_components.hr)));\n}\nfunction MDXContent(props = {}) {\n  return React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props));\n}\nexport default MDXContent;\n"],"names":["DocumentPage","_ref","location","data","mdx","children","pathname","includes","React","Layout","onSideBarPage","SidebarLayout","GatsbyMDXWrapper","props","GATSBY_COMPILED_MDX","createContext","hasScrolled","setHasScrolled","activeAnchor","setActiveAnchor","path","to","useLocation","useContext","SidebarContext","active","setActive","useState","useEffect","process","PATH_PREFIX","className","onClick","document","getElementById","scrollIntoView","behavior","navigate","sidebarData","sidebarOpen","setSidebarOpen","LayoutContext","anchorsOnPage","setAnchorsOnPage","anchorsLoaded","setAnchorsLoaded","anchorUpdate","setAnchorUpdate","intialAnchorLinkSet","setIntialAnchorLinkSet","wideScreen","setWideScreen","width","useWindowDimensions","els","querySelectorAll","observer","window","IntersectionObserver","observerCallback","entries","header","newAnchorInfo","forEach","entry","i","target","href","split","anchorString","slice","isIntersecting","push","inView","offsetTop","root","threshold","el","observe","length","newAnchorsOnPage","_toConsumableArray","anchorInfo","index","findIndex","anchor","splice","smallestTopOffset","Number","POSITIVE_INFINITY","indexOfSmallestOffset","newActiveAnchorInfo","search","anchorLink","URLSearchParams","get","tag","firstAnchor","console","log","nodes","rootDocArr","categoryArr","categoryMap","node","frontmatter","category","title","slug","order","isCategoryRoot","anchorLinks","categoryName","sublinks","pathName","sort","a","b","item","sidebarLinkArr","concat","FontAwesomeIcon","icon","faBars","id","faX","map","upperCaseTitle","charAt","toUpperCase","highlightLink","key","Link","link","CustomAnchor","subLinkPath","docs","components","customize","useStaticQuery","path_prefix","GATSBY_PATH_PREFIX","startsWith","Provider","value","SideBar","onWheel","onTouchStart","Footer","MDXLayout","_components","Object","assign","main","_provideComponents","ImportedLayout","_createMdxContent","h1","h4","p","hr","height","src","Paragraph","text"],"sourceRoot":""}