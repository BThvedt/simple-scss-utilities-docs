{"version":3,"file":"component---src-pages-mdx-frontmatter-type-mdx-frontmatter-slug-js-content-file-path-content-docs-getting-started-index-mdx-cba5845e3f4dc025c647.js","mappings":"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","sources":["webpack://simple-scss-utilities/./content/docs/Getting Started/index.mdx","webpack://simple-scss-utilities/./src/pages/{mdx.frontmatter__type}/{mdx.frontmatter__slug}.js","webpack://simple-scss-utilities/./src/components/Layout/SidebarContext.js","webpack://simple-scss-utilities/./src/components/Layout/CustomAnchor.js","webpack://simple-scss-utilities/./src/components/Layout/Sidebar.js","webpack://simple-scss-utilities/./src/components/Layout/SidebarLayout.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h4: \"h4\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"Getting Started\"), \"\\n\", React.createElement(_components.h4, null, \"Advice and Direction on How to Dive In\"), \"\\n\", React.createElement(_components.p, null, \"Ok so here's some direction on how to get started!\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"First, start a new project! (ok that's an obvious step)\"), \"\\n\", React.createElement(_components.li, null, \"Read the \", React.createElement(_components.a, {\n    href: \"/simple-scss-utilities-docs/install/\"\n  }, \"Install\"), \" page\"), \"\\n\", React.createElement(_components.li, null, \"Have a design in mind! A professional document, a napkin sketch, or just a mental image. Pick out your colors (I like to use \", React.createElement(_components.a, {\n    href: \"/simple-scss-utilities-docs/https:/coolors.co/\"\n  }, \"coolers.co\"), \") and your fonts (I just use \", React.createElement(_components.a, {\n    href: \"https://fonts.google.com/\"\n  }, \"Google Fonts\"), \") and change them to what you want!\"), \"\\n\", React.createElement(_components.li, null, \"As you start development, edit whatever other class values to whatever your design needs. Like with Tailwind, it's probably useful to have the docs open in a seperate window until you're used to the class names. If you'rue comfortable with the source scss files, you can also search in those with \", React.createElement(_components.code, null, \"ctrl-f\"), \". Glance through the \", React.createElement(_components.a, {\n    href: \"/simple-scss-utilities-docs/customize/\"\n  }, \"Customize\"), \" section for more examples!\"), \"\\n\", React.createElement(_components.li, null, \"This framework isn't made to handle everything. It's written to be useful, and get out of the way, with those that like writing their own styles in ind. A rule of thumb is: if it's a basic or boring widely-used CSS property, it's probably in the framework. If it's not, it's probably not!\"), \"\\n\", React.createElement(_components.li, null, \"For the rest of your styles, do whatever you want! I like to use SCSS modules for components, plus a general SCSS stylesheet. But the utiltiy classes do a lot. For this site -outside of the front page banner- I use only 4 lines of SCSS in a single module.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Happy coding!\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/mnt/c/Users/bthve/Desktop/2025jobsAndProjs/side-repos/simple-scss-utilities-docs/content/docs/Getting Started/index.mdx\";\nimport React from \"react\";\nimport {useStaticQuery, graphql} from \"gatsby\";\nimport Layout from \"../../components/Layout/Layout\";\nimport SidebarLayout from \"../../components/Layout/SidebarLayout\";\nconst DocumentPage = ({location, data: {mdx}, children}) => {\n  const {pathname} = location;\n  if (pathname.includes(\"/page/\")) {\n    return React.createElement(React.Fragment, null, children);\n  }\n  return React.createElement(Layout, {\n    onSideBarPage: true\n  }, React.createElement(SidebarLayout, {\n    pathname: pathname\n  }, React.createElement(\"main\", null, children)));\n};\nDocumentPage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(DocumentPage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String) {\n    mdx(id: { eq: $id }) {\n      id\n      body\n      frontmatter {\n        description\n        title\n        type\n        image\n      }\n    }\n  }\n`;\n","import { createContext } from \"react\"\r\n\r\nconst SidebarContext = createContext({\r\n  hasScrolled: false,\r\n  setHasScrolled: () => {}, // keep track if the scrolling was done by the user\r\n\r\n  activeAnchor: \"\", // '${path} ${to} of active anchor link'\r\n  setActiveAnchor: () => {}\r\n})\r\n\r\nexport default SidebarContext\r\n","import React, { useState, useEffect, useContext } from \"react\"\r\nimport SidebarContext from \"./SidebarContext\"\r\nimport { useLocation } from \"@reach/router\"\r\nimport { navigate } from \"gatsby\"\r\n\r\n/*\r\n  Gatsby seemed to have a little trouble with anchor links \r\n  Not only did they not seem to quite work but.. I also wanted to implement smooth scrolling\r\n  if you jump from page to page so I made my own component. \r\n  It's possible to make the URLs just slightly awkared if you\r\n  click directly on the link .. but.. they still work\r\n*/\r\nconst CustomAnchor = ({ children, path, to }) => {\r\n  const location = useLocation()\r\n  const { activeAnchor, setActiveAnchor, hasScrolled, setHasScrolled } =\r\n    useContext(SidebarContext)\r\n  const [active, setActive] = useState(false)\r\n  const { pathname } = location\r\n\r\n  useEffect(() => {\r\n    if (activeAnchor == `${process.env.PATH_PREFIX}${path} ${to}`) {\r\n      setActive(true)\r\n    } else {\r\n      setActive(false)\r\n    }\r\n  }, [activeAnchor])\r\n\r\n  // console.log(\r\n  //   `path: ${path} to: ${to} pathname: ${pathname} prefix with path: ${process.env.PATH_PREFIX}${path}`\r\n  // )\r\n\r\n  return (\r\n    <p\r\n      className={`${active ? \"font-bold\" : \"\"} cursor-pointer`}\r\n      onClick={() => {\r\n        // the pathname from location usually has an added slash\r\n\r\n        if (`${process.env.PATH_PREFIX}${path}/` == pathname) {\r\n          const tag = document.getElementById(to)\r\n          tag.scrollIntoView({ behavior: \"smooth\" })\r\n          // set \"hasScrolled\" to false .. gets set true if the user scrolls the docs area\r\n          setHasScrolled(false)\r\n\r\n          // in the MDX anchor componnnt, the text generates the id \"to\"\r\n          // two anchor links on different documents might have the same text so\r\n          // I have the path be part of the identifying string\r\n          // as long as 2 anchors on the same MDX page don't have the same text we're good\r\n          setActiveAnchor(`${process.env.PATH_PREFIX}${path} ${to}`)\r\n        } else {\r\n          navigate(`${path}?anchor=${to}`)\r\n        }\r\n      }}\r\n    >\r\n      {children}\r\n    </p>\r\n  )\r\n}\r\n\r\nexport default CustomAnchor\r\n","import React, { useState, useEffect, useContext } from \"react\"\r\nimport { Link } from \"gatsby\"\r\nimport { useLocation } from \"@reach/router\"\r\nimport CustomAnchor from \"./CustomAnchor\"\r\nimport SidebarContext from \"./SidebarContext\"\r\nimport LayoutContext from \"./LayoutContext\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faX, faBars } from \"@fortawesome/free-solid-svg-icons\"\r\nimport * as layoutStyles from \"./layout.module.scss\"\r\nimport useWindowDimensions from \"../../hooks/useWindowDimensions\"\r\n// HEADER IS A ReserveD WORD\r\n\r\nconst SideBar = ({ sidebarData }) => {\r\n  const { setActiveAnchor, hasScrolled } = useContext(SidebarContext)\r\n  const { sidebarOpen, setSidebarOpen } = useContext(LayoutContext)\r\n\r\n  const [anchorsOnPage, setAnchorsOnPage] = useState([])\r\n  const [anchorsLoaded, setAnchorsLoaded] = useState(false)\r\n  const [anchorUpdate, setAnchorUpdate] = useState([])\r\n\r\n  const [intialAnchorLinkSet, setIntialAnchorLinkSet] = useState(false)\r\n\r\n  // const [sidebarOpen, setSidebarOpen] = useState(true)\r\n  const [wideScreen, setWideScreen] = useState(false)\r\n  const { width } = useWindowDimensions()\r\n\r\n  const location = useLocation()\r\n  const { pathname } = location\r\n\r\n  // ok every time something enteres or leaves, update\r\n  // the anchors in view\r\n  useEffect(() => {\r\n    const els = document.querySelectorAll(\".anchor-link\")\r\n\r\n    const observerCallback = (entries, observer, header) => {\r\n      const newAnchorInfo = []\r\n      entries.forEach((entry, i) => {\r\n        const to = entry.target.href.split(\"#\")[1]\r\n        const path = pathname.slice(0, -1)\r\n        const anchorString = `${path} ${to}`\r\n\r\n        if (entry.isIntersecting) {\r\n          newAnchorInfo.push({\r\n            anchorString,\r\n            inView: true,\r\n            offsetTop: entry.target.offsetTop\r\n          })\r\n        } else {\r\n          newAnchorInfo.push({\r\n            anchorString,\r\n            inView: false,\r\n            offsetTop: entry.target.offsetTop\r\n          })\r\n        }\r\n      })\r\n\r\n      setAnchorUpdate(newAnchorInfo)\r\n    }\r\n\r\n    const observer = new window.IntersectionObserver(observerCallback, {\r\n      root: null,\r\n      threshold: 0.5 // set offset 0.1 means trigger if atleast 10% of element in viewport\r\n    })\r\n\r\n    els.forEach((el) => {\r\n      observer.observe(el)\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (anchorUpdate.length && !anchorsLoaded) {\r\n      setAnchorsOnPage(anchorUpdate)\r\n      setAnchorsLoaded(true)\r\n    }\r\n  }, [anchorUpdate, anchorsLoaded])\r\n\r\n  // eh, there might be a better way to do this but\r\n  // by the time I got here I was like \"It works, and it's good enough!\"\r\n  useEffect(() => {\r\n    // to prevent infinite reloading, only update if there is a non-empty update, and then set the update to empty if done\r\n    if (anchorsLoaded && anchorUpdate.length) {\r\n      let newAnchorsOnPage = [...anchorsOnPage]\r\n      anchorUpdate.forEach((anchorInfo) => {\r\n        const index = anchorsOnPage.findIndex((anchor) => {\r\n          return anchorInfo.anchorString == anchor.anchorString\r\n        })\r\n\r\n        if (index >= 0) {\r\n          newAnchorsOnPage.splice(index, 1, anchorInfo)\r\n        }\r\n      })\r\n\r\n      setAnchorsOnPage(newAnchorsOnPage)\r\n      setAnchorUpdate([])\r\n\r\n      if (hasScrolled) {\r\n        let smallestTopOffset = Number.POSITIVE_INFINITY\r\n        let indexOfSmallestOffset = -1\r\n        newAnchorsOnPage.forEach((anchor, i) => {\r\n          if (anchor.inView && anchor.offsetTop < smallestTopOffset) {\r\n            smallestTopOffset = anchor.offsetTop\r\n            indexOfSmallestOffset = i\r\n          }\r\n        })\r\n\r\n        if (indexOfSmallestOffset >= 0) {\r\n          const newActiveAnchorInfo = newAnchorsOnPage[indexOfSmallestOffset]\r\n          setActiveAnchor(newActiveAnchorInfo.anchorString)\r\n        } else {\r\n          // if we're here, there's no anchors vidible on screen\r\n          setActiveAnchor(\"\")\r\n        }\r\n      }\r\n    }\r\n  }, [anchorsOnPage, anchorUpdate, anchorsLoaded, hasScrolled])\r\n\r\n  useEffect(() => {\r\n    if (location.search && !intialAnchorLinkSet) {\r\n      const urlParams = new URLSearchParams(location.search)\r\n      const anchorLink = urlParams.get(\"anchor\")\r\n      if (anchorLink) {\r\n        const tag = document.getElementById(anchorLink)\r\n        if (tag) {\r\n          tag.scrollIntoView({ behavior: \"smooth\" })\r\n\r\n          const path = pathname.slice(0, -1)\r\n          setActiveAnchor(`${path} ${anchorLink}`)\r\n        }\r\n      }\r\n      setIntialAnchorLinkSet(true)\r\n    } else if (anchorsLoaded && !intialAnchorLinkSet) {\r\n      // just set the active anchor link to the highest link in view\r\n      // pretty sure it's just gonna be the firs one that's \"in view\"\r\n      // and if the first one is in view, it's gonna be that one so ..\r\n      let firstAnchor = anchorsOnPage[0]\r\n\r\n      if (firstAnchor.inView) {\r\n        setActiveAnchor(firstAnchor.anchorString)\r\n      }\r\n\r\n      setIntialAnchorLinkSet(true)\r\n    }\r\n  }, [anchorsLoaded, anchorsOnPage, intialAnchorLinkSet])\r\n\r\n  useEffect(() => {\r\n    if (width > 768) {\r\n      setWideScreen(true)\r\n    } else {\r\n      setWideScreen(false)\r\n    }\r\n  }, [width])\r\n\r\n  useEffect(() => {\r\n    setSidebarOpen(true)\r\n  }, [wideScreen])\r\n\r\n  // organize alphabetically\r\n  // then loop the map and fill in the links and sublinks\r\n  console.log(\"SIDEBAR DATA IS\")\r\n  console.log(sidebarData)\r\n\r\n  if (!sidebarData) {\r\n    return <>{`No sidebar data for path ${pathname}`}</>\r\n  }\r\n\r\n  const { path, nodes } = sidebarData\r\n  const rootDocArr = []\r\n  const categoryArr = []\r\n  const categoryMap = {}\r\n  nodes.forEach((node) => {\r\n    const {\r\n      frontmatter: { category, title, slug, order, isCategoryRoot, anchorLinks }\r\n    } = node\r\n    if (!category) {\r\n      // don't give a slug of \"index\" part of the path here ..\r\n      // the path will just be /docs/ or /customize/ etc\r\n      // this is different for the categories\r\n      const pathName = slug === \"index\" ? `/${path}` : `/${path}/${slug}`\r\n      rootDocArr.push({\r\n        title,\r\n        path: pathName,\r\n        sublinks: null,\r\n        order,\r\n        anchorLinks\r\n      })\r\n    } else {\r\n      if (!categoryMap[category]) {\r\n        categoryMap[category] = []\r\n      }\r\n\r\n      if (isCategoryRoot) {\r\n        categoryArr.push({\r\n          title, // uppercase the first letter later\r\n          categoryName: category, // in case I change it from the title\r\n          isCategoryRoot: true,\r\n          path: `/${path}/${slug}`,\r\n          sublinks: null, // get changed into an array later\r\n          order,\r\n          anchorLinks\r\n        })\r\n      } else {\r\n        categoryMap[category].push({\r\n          title,\r\n          path: `/${path}/${slug}`,\r\n          order,\r\n          anchorLinks\r\n        })\r\n      }\r\n    }\r\n  })\r\n\r\n  // ok now loop through the sidebarLinkArr. If there's sublinks, fil them in\r\n\r\n  categoryArr.forEach((entry) => {\r\n    const category = entry.categoryName\r\n    entry.sublinks = categoryMap[category]\r\n  })\r\n\r\n  // the root docs will go first, sorted by an order property,  and then the categories\r\n  // in alphabetical order, and then the sublinks (in a category) are sorted by a frontmatter \"order\" property\r\n  // the anchor links are already determined in the frontmatter defintion\r\n  rootDocArr.sort((a, b) => a.order - b.order)\r\n  categoryArr.sort((a, b) => {\r\n    return a.order - b.order\r\n  })\r\n\r\n  categoryArr.forEach((item) => {\r\n    const { sublinks } = item\r\n\r\n    if (sublinks) {\r\n      sublinks.sort((a, b) => {\r\n        return a.order - b.order\r\n      })\r\n    }\r\n  })\r\n\r\n  const sidebarLinkArr = [...rootDocArr, ...categoryArr]\r\n\r\n  // capitalize category name\r\n  // .. hm.. oh yeah. Fix anchor links\r\n\r\n  return (\r\n    <>\r\n      <div className=\"w-0\">\r\n        <div\r\n          onClick={() => setSidebarOpen(true)}\r\n          className={`${\r\n            sidebarOpen ? \"display-none\" : \"display-flex\"\r\n          } text-xl w-3 h-3 position-relative top-1 left-1 radius-full cursor-pointer shadow-magenta-lg hover:shadow-blue-lg bg-background-ltr items-center justify-center bg-background z-5 text-magenta hover:text-blue`}\r\n        >\r\n          <FontAwesomeIcon icon={faBars} />\r\n        </div>\r\n      </div>\r\n      <div\r\n        id=\"sidebar\"\r\n        className={`${\r\n          layoutStyles.sidebar\r\n        }  max-tab:position-absolute max-tab:h-full min-w-1/4 max-tab:w-20 overflow-y-scroll bg-background z-4  ${\r\n          sidebarOpen ? \"\" : \"display-none\"\r\n        }`}\r\n      >\r\n        <nav className=\"p-md\">\r\n          <span className={`${wideScreen ? \"display-none\" : \"\"} `}>\r\n            <FontAwesomeIcon\r\n              className={`cursor-pointer hover:text-magenta text-magenta hover:text-blue text-lg py-sm`}\r\n              onClick={() => setSidebarOpen(false)}\r\n              icon={faX}\r\n            />\r\n          </span>\r\n          <ul className=\"display-flex flex-col line-height-lg\">\r\n            {sidebarLinkArr.map((entry) => {\r\n              const {\r\n                isCategoryRoot,\r\n                categoryName,\r\n                path,\r\n                title,\r\n                sublinks,\r\n                anchorLinks\r\n              } = entry\r\n\r\n              if (isCategoryRoot) {\r\n                const upperCaseTitle =\r\n                  title.charAt(0).toUpperCase() + title.slice(1)\r\n\r\n                const highlightLink =\r\n                  `${process.env.PATH_PREFIX}${path}/` === pathname\r\n\r\n                return (\r\n                  <li key={`${path} ${title}`}>\r\n                    <span\r\n                      className={`${\r\n                        highlightLink ? \"text-magenta\" : \"\"\r\n                      } font-large hover:text-magenta `}\r\n                    >\r\n                      <Link to={path}>{upperCaseTitle}</Link>\r\n                    </span>\r\n                    {anchorLinks && (\r\n                      <ul className=\"line-height-md \">\r\n                        {anchorLinks.map((anchorLink, i) => {\r\n                          // name of is a bit different, I don't think anchor links are a full \"path\" (might need to refacto later)\r\n                          const { title, link } = anchorLink\r\n\r\n                          return (\r\n                            <li\r\n                              key={`${title} ${link}`}\r\n                              className={`pl-md text-md ${\r\n                                i == anchorLinks.length - 1 ? \"mb-xs\" : \"\"\r\n                              } `}\r\n                            >\r\n                              <CustomAnchor path={path} to={link}>\r\n                                {title}\r\n                              </CustomAnchor>\r\n                            </li>\r\n                          )\r\n                        })}\r\n                      </ul>\r\n                    )}\r\n                    {sublinks && (\r\n                      <ul>\r\n                        {sublinks.map((link, i) => {\r\n                          const { title, path: subLinkPath, anchorLinks } = link\r\n\r\n                          const highlightLink =\r\n                            `${process.env.PATH_PREFIX}${subLinkPath}/` ===\r\n                            pathname\r\n\r\n                          return (\r\n                            <li\r\n                              key={`${title} ${subLinkPath}`}\r\n                              className={`pl-md font-normal   ${\r\n                                i == sublinks.length - 1 ? \"mb-xs\" : \"\"\r\n                              }`}\r\n                            >\r\n                              <span\r\n                                className={`${\r\n                                  highlightLink ? \"text-magenta\" : \"\"\r\n                                } font-bold hover:text-magenta`}\r\n                              >\r\n                                <Link to={subLinkPath}>{title}</Link>\r\n                              </span>\r\n\r\n                              {anchorLinks && (\r\n                                <ul className=\"line-height-md \">\r\n                                  {anchorLinks.map((anchorLink) => {\r\n                                    // name of is a bit different, I don't think anchor links are a full \"path\" (might need to refacto later)\r\n                                    const { title, link } = anchorLink\r\n\r\n                                    return (\r\n                                      <li\r\n                                        key={`${title} ${link}`}\r\n                                        className=\"pl-md text-md hover:text-magenta\"\r\n                                      >\r\n                                        <CustomAnchor\r\n                                          path={subLinkPath}\r\n                                          to={link}\r\n                                        >\r\n                                          {title}\r\n                                        </CustomAnchor>\r\n                                      </li>\r\n                                    )\r\n                                  })}\r\n                                </ul>\r\n                              )}\r\n                            </li>\r\n                          )\r\n                        })}\r\n                      </ul>\r\n                    )}\r\n                  </li>\r\n                )\r\n              }\r\n\r\n              const upperCaseTitle =\r\n                title.charAt(0).toUpperCase() + title.slice(1)\r\n\r\n              const highlightLink =\r\n                `${process.env.PATH_PREFIX}${path}/` === pathname\r\n\r\n              return (\r\n                <li key={`${path} ${title}`}>\r\n                  <span\r\n                    className={`${\r\n                      highlightLink ? \"text-magenta\" : \"\"\r\n                    } font-large hover:text-magenta`}\r\n                  >\r\n                    <Link to={path}>{title}</Link>\r\n                  </span>\r\n                </li>\r\n              )\r\n            })}\r\n          </ul>\r\n        </nav>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SideBar\r\n","import React, { useState, useContext } from \"react\"\r\nimport Footer from \"./Footer\"\r\nimport SideBar from \"./Sidebar\"\r\nimport LayoutContext from \"./LayoutContext\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\nimport * as layoutStyles from \"./layout.module.scss\"\r\nimport SidebarContext from \"./SidebarContext\"\r\n// not sure how best to pass the sidebar and the content\r\n\r\nconst SidebarLayout = ({ pathname, children }) => {\r\n  // context state\r\n  const { sidebarOpen, setSidebarOpen } = useContext(LayoutContext)\r\n\r\n  const [hasScrolled, setHasScrolled] = useState(false)\r\n  const [activeAnchor, setActiveAnchor] = useState(\"\")\r\n\r\n  const { docs, components, customize } = useStaticQuery(graphql`\r\n    query HeaderQuery {\r\n      docs: allMdx(filter: { frontmatter: { type: { eq: \"docs\" } } }) {\r\n        nodes {\r\n          id\r\n          frontmatter {\r\n            title\r\n            slug\r\n            category\r\n            order\r\n            isCategoryRoot\r\n            anchorLinks {\r\n              title\r\n              link\r\n            }\r\n          }\r\n        }\r\n      }\r\n      # components: allMdx(\r\n      #   filter: { frontmatter: { type: { eq: \"components\" } } }\r\n      # ) {\r\n      #   nodes {\r\n      #     id\r\n      #     frontmatter {\r\n      #       title\r\n      #       slug\r\n      #       category\r\n      #       order\r\n      #       isCategoryRoot\r\n      #       anchorLinks {\r\n      #         title\r\n      #         link\r\n      #       }\r\n      #     }\r\n      #   }\r\n      # }\r\n      customize: allMdx(\r\n        filter: { frontmatter: { type: { eq: \"customize\" } } }\r\n      ) {\r\n        nodes {\r\n          id\r\n          frontmatter {\r\n            title\r\n            slug\r\n            category\r\n            order\r\n            isCategoryRoot\r\n            anchorLinks {\r\n              title\r\n              link\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  // const pathParts = pathname.split(\"/\")\r\n  // const section = pathParts.length && pathname.split(\"/\")[1] // this should always be defined in this route but let;s be careful\r\n\r\n  let path_prefix = process.env.PATH_PREFIX\r\n    ? process.env.PATH_PREFIX\r\n    : process.env.GATSBY_PATH_PREFIX // make a .env.development file and put GAtSBY\r\n\r\n  let sidebarData\r\n\r\n  // this might be kinda janky code .. but I don't wanna spend forever trying to think about an alternative way\r\n  if (pathname.startsWith(`${path_prefix}docs`)) {\r\n    sidebarData = { path: \"docs\", ...docs }\r\n  } else if (pathname.startsWith(`${path_prefix}customize`)) {\r\n    sidebarData = { path: \"customize\", ...customize }\r\n  }\r\n\r\n  return (\r\n    <div id=\"sidebar-layout\" className=\"display-flex min-w-full grow-1\">\r\n      <SidebarContext.Provider\r\n        value={{\r\n          activeAnchor,\r\n          setActiveAnchor,\r\n          hasScrolled,\r\n          setHasScrolled\r\n        }}\r\n      >\r\n        <SideBar sidebarData={sidebarData} />\r\n        <div\r\n          id=\"docs-section\"\r\n          className={`display-flex flex-col grow-1 overflow-y-scroll position-relative ${layoutStyles.docsSection}`}\r\n          onWheel={() => {\r\n            setHasScrolled(true)\r\n          }}\r\n          // remember to test this on mobile\r\n          onTouchStart={() => {\r\n            setHasScrolled(true)\r\n          }}\r\n        >\r\n          <div\r\n            id=\"small-width-overlay\"\r\n            className={`display-none ${\r\n              sidebarOpen ? \"max-tab:display-block\" : \"\"\r\n            } position-fixed top-0 left-0 w-full h-full z-3 bg-black opacity-10`}\r\n          />\r\n          <div\r\n            id=\"the-document\"\r\n            className={`grow-1 pl-xl p-lg w-19/20 max-w-container lg:mx-auto   ${\r\n              sidebarOpen ? \"max-tab:filter-blur-md\" : \"\"\r\n            }`}\r\n          >\r\n            {children}\r\n          </div>\r\n          <Footer />\r\n        </div>\r\n      </SidebarContext.Provider>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SidebarLayout\r\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","h4","p","ul","li","a","code","_provideComponents","components","React","href","wrapper","MDXLayout","DocumentPage","_ref","location","data","mdx","children","pathname","includes","Layout","onSideBarPage","SidebarLayout","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","createContext","hasScrolled","setHasScrolled","activeAnchor","setActiveAnchor","path","to","useLocation","useContext","SidebarContext","active","setActive","useState","useEffect","process","PATH_PREFIX","className","onClick","document","getElementById","scrollIntoView","behavior","navigate","sidebarData","sidebarOpen","setSidebarOpen","LayoutContext","anchorsOnPage","setAnchorsOnPage","anchorsLoaded","setAnchorsLoaded","anchorUpdate","setAnchorUpdate","intialAnchorLinkSet","setIntialAnchorLinkSet","wideScreen","setWideScreen","width","useWindowDimensions","els","querySelectorAll","observer","window","IntersectionObserver","observerCallback","entries","header","newAnchorInfo","forEach","entry","i","target","split","anchorString","slice","isIntersecting","push","inView","offsetTop","root","threshold","el","observe","length","newAnchorsOnPage","_toConsumableArray","anchorInfo","index","findIndex","anchor","splice","smallestTopOffset","Number","POSITIVE_INFINITY","indexOfSmallestOffset","newActiveAnchorInfo","search","anchorLink","URLSearchParams","get","tag","firstAnchor","console","log","nodes","rootDocArr","categoryArr","categoryMap","node","frontmatter","category","title","slug","order","isCategoryRoot","anchorLinks","categoryName","sublinks","pathName","sort","b","item","sidebarLinkArr","concat","FontAwesomeIcon","icon","faBars","id","faX","map","upperCaseTitle","charAt","toUpperCase","highlightLink","key","Link","link","CustomAnchor","subLinkPath","docs","customize","useStaticQuery","path_prefix","GATSBY_PATH_PREFIX","startsWith","Provider","value","SideBar","onWheel","onTouchStart","Footer"],"sourceRoot":""}