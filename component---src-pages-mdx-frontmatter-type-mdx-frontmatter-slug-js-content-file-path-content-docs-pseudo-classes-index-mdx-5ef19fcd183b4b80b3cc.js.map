{"version":3,"file":"component---src-pages-mdx-frontmatter-type-mdx-frontmatter-slug-js-content-file-path-content-docs-pseudo-classes-index-mdx-5ef19fcd183b4b80b3cc.js","mappings":"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","sources":["webpack://simple-scss-utilities/./content/docs/Pseudo Classes/index.mdx","webpack://simple-scss-utilities/./src/pages/{mdx.frontmatter__type}/{mdx.frontmatter__slug}.js","webpack://simple-scss-utilities/./src/components/Mdx/CodeWrapper.js","webpack://simple-scss-utilities/./src/components/Layout/SidebarContext.js","webpack://simple-scss-utilities/./src/components/Layout/CustomAnchor.js","webpack://simple-scss-utilities/./src/components/Layout/Sidebar.js","webpack://simple-scss-utilities/./src/components/Layout/SidebarLayout.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport CodeWrapper from \"../../../src/components/Mdx/CodeWrapper\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h4: \"h4\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"Overview of the Pseudo Classes\"), \"\\n\", React.createElement(_components.h4, null, \"A good place to start\"), \"\\n\", React.createElement(_components.p, null, \"Ok, so you've decided on a design, you've installed the classes, you have your colors picked out, you have your fonts picked out, and need to get started.\"), \"\\n\", React.createElement(_components.p, null, \"I figured a good place to start off these actual docs is with the Pseudo Classes!\"), \"\\n\", React.createElement(_components.p, null, \"Most clases having to do with Color or Fonts will react to the built in pseudo classes.\"), \"\\n\", React.createElement(_components.p, null, \"The framework comes with classes to react to these 3 default staes:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Hover\"), \"\\n\", React.createElement(_components.li, null, \"Active\"), \"\\n\", React.createElement(_components.li, null, \"and Focus\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"If that's not enough, take a look at the \", React.createElement(_components.a, {\n    href: \"/simple-scss-utilities-docs/customize/\"\n  }, \"Customize\"), \" section to add your own! It's as easy as adding the correct element-state name to this list in \", React.createElement(_components.code, null, \"_variables.scss\"), \":\"), \"\\n\", React.createElement(CodeWrapper, {\n    title: \"_variables.scss\",\n    isFile: true\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-scss\"\n  }, \"$pseudo-classes: \\\"hover\\\", \\\"active\\\", \\\"focus\\\";\\n\"))), \"\\n\", React.createElement(_components.p, null, \"So, for example if you want a \", React.createElement(_components.code, null, \"target\"), \" pseudo class, it's as easy as adding it to the list. However, given how particular the use-cases of many of these are, I think it would make more sense for most cases to take the opportuinty to write your own SCSS for these cases.\"), \"\\n\", React.createElement(_components.p, null, \"Let's take a look at some examples. Maybe it would be fun to make a button:\"), \"\\n\", React.createElement(\"div\", {\n    className: \"flex center p-lg\"\n  }, React.createElement(\"button\", {\n    className: \"bg-green px-lg py-md text-white cursor-pointer radius-md transition-fast-colors hover:bg-green-lt \"\n  }, React.createElement(\"span\", {\n    className: \"text-lg\"\n  }, \"Hover Me!\"))), \"\\n\", React.createElement(_components.p, null, \"Here is the HTML:\"), \"\\n\", React.createElement(CodeWrapper, {\n    title: \"Html\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-html\"\n  }, \"<button\\r\\n  className=\\\"bg-green px-lg py-sm text-white cursor-pointer radius-md transition-fast-colors hover:bg-green-lt \\\"\\r\\n>\\r\\n  <span className=\\\"font-large text-lg\\\">Hover Me!</span>\\r\\n</button>\\n\"))), \"\\n\", React.createElement(_components.p, null, \"I would like to draw your attention to the \", React.createElement(_components.code, null, \"hover:bg-green-lt\"), \" class. This basically says to apply the bg-green-lt class on hover. Pretty simple huh?\"), \"\\n\", React.createElement(_components.p, null, \"Let's try another button this time with an active state:\"), \"\\n\", React.createElement(\"div\", {\n    className: \"flex center p-lg\"\n  }, React.createElement(\"button\", {\n    className: \"bg-green px-lg py-md text-white cursor-pointer radius-md transition-fast active:bg-red-dk active:shadow-none\"\n  }, React.createElement(\"span\", {\n    className: \"text-lg\"\n  }, \"Press Me!\"))), \"\\n\", React.createElement(CodeWrapper, {\n    title: \"Html\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-html\"\n  }, \"<button\\r\\n  className=\\\"bg-green px-lg py-md text-white cursor-pointer radius-md transition-fast active:bg-red-dk active:shadow-none\\\"\\r\\n>\\r\\n  <span className=\\\"text-lg\\\">Press Me!</span>\\r\\n</button>\\n\"))), \"\\n\", React.createElement(_components.p, null, \"This time the backgroud reacts to the \", React.createElement(_components.code, null, \"active\"), \" pseudo class. If your eyes are sharp, you might notice the transition class is different. The \", React.createElement(_components.code, null, \"transition-fast\"), \" class applies a fast transition to all properties, not just color, and will also work here. There are several different variations of the transition class, attempting to cover the most common, but not all of cases. If you have a rare case (like you need to transition 2 different properties differently, for example) that's a time to write some custom SCSS.\"), \"\\n\", React.createElement(_components.p, null, \"For a final exmaple, let's try an input to see the Focus class in action:\"), \"\\n\", React.createElement(\"div\", {\n    className: \"flex center p-lg\"\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    className: \"p-md text-md radius-md border border-default border-sm bg-white text-black focus:bg-blue focus:text-white\",\n    value: \"Focus Me\"\n  })), \"\\n\", React.createElement(CodeWrapper, {\n    title: \"Html\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-html\"\n  }, \"<input\\r\\n  type=\\\"text\\\"\\r\\n  className=\\\"p-md text-md radius-md border border-default border-sm bg-white text-black focus:bg-blue focus:text-white\\\"\\r\\n  value=\\\"Focus Me\\\"\\r\\n/>\\n\"))), \"\\n\", React.createElement(_components.p, null, \"I applied focus properties to the background and the text color sith the \", React.createElement(_components.code, null, \"focus:bg-blue\"), \" and \", React.createElement(_components.code, null, \"focus:text-white\"), \" classes.\"), \"\\n\", React.createElement(_components.p, null, \"Hopefullly this has provided an instructive overview! Take a look at the \", React.createElement(_components.a, {\n    href: \"/simple-scss-utilities-docs/docs/colors/\"\n  }, \"Colors\"), \", \", React.createElement(_components.a, {\n    href: \"/simple-scss-utilities-docs/docs/classes-with-colors/\"\n  }, \"Classes with Colors\"), \", and \", React.createElement(_components.a, {\n    href: \"/simple-scss-utilities-docs/docs/additional-classes/\"\n  }, \"Additional Classes\"), \" pages for more in-depth examples.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"C:/Users/bthve/Desktop/2025 job search and side projects/side-repos/simple-scss-utilities-docs/content/docs/Pseudo Classes/index.mdx\";\nimport React from \"react\";\nimport {useStaticQuery, graphql} from \"gatsby\";\nimport Layout from \"../../components/Layout/Layout\";\nimport SidebarLayout from \"../../components/Layout/SidebarLayout\";\nconst DocumentPage = ({location, data: {mdx}, children}) => {\n  const {pathname} = location;\n  if (pathname.includes(\"/page/\")) {\n    return React.createElement(React.Fragment, null, children);\n  }\n  return React.createElement(Layout, {\n    onSideBarPage: true\n  }, React.createElement(SidebarLayout, {\n    pathname: pathname\n  }, React.createElement(\"main\", null, children)));\n};\nDocumentPage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(DocumentPage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String) {\n    mdx(id: { eq: $id }) {\n      id\n      body\n      frontmatter {\n        description\n        title\n        type\n        image\n      }\n    }\n  }\n`;\n","import React from \"react\"\r\n\r\n// I decided to keep this seperate from CodeBlock.js, which which taken from examples give by how to use prisimjs in MDX around the interent\r\n// This is just a wrapper for code blocks, displays the filename or language, plus whatever else might be necessary in the future\r\n\r\n// a results block might be good too\r\n\r\nconst CodeWrapper = ({ children, title, isFile, addExtraMarginUnderTitle }) => {\r\n  return (\r\n    <div className=\"mt-lg mb-2xl mr-2\">\r\n      <h6\r\n        className={`font-large text-lg position-relative left-1px ${\r\n          addExtraMarginUnderTitle ? \"mb-md\" : \"mb-xs\"\r\n        }`}\r\n      >\r\n        {isFile ? \"File: \" : \"\"}\r\n        {title}\r\n      </h6>\r\n      <div className=\"mr-md\">{children}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CodeWrapper\r\n","import { createContext } from \"react\"\r\n\r\nconst SidebarContext = createContext({\r\n  hasScrolled: false,\r\n  setHasScrolled: () => {}, // keep track if the scrolling was done by the user\r\n\r\n  activeAnchor: \"\", // '${path} ${to} of active anchor link'\r\n  setActiveAnchor: () => {}\r\n})\r\n\r\nexport default SidebarContext\r\n","import React, { useState, useEffect, useContext } from \"react\"\r\nimport SidebarContext from \"./SidebarContext\"\r\nimport { useLocation } from \"@reach/router\"\r\nimport { navigate } from \"gatsby\"\r\n\r\n/*\r\n  Gatsby seemed to have a little trouble with anchor links \r\n  Not only did they not seem to quite work but.. I also wanted to implement smooth scrolling\r\n  if you jump from page to page so I made my own component. \r\n  It's possible to make the URLs just slightly awkared if you\r\n  click directly on the link .. but.. they still work\r\n*/\r\nconst CustomAnchor = ({ children, path, to }) => {\r\n  const location = useLocation()\r\n  const { activeAnchor, setActiveAnchor, hasScrolled, setHasScrolled } =\r\n    useContext(SidebarContext)\r\n  const [active, setActive] = useState(false)\r\n  const { pathname } = location\r\n\r\n  useEffect(() => {\r\n    if (activeAnchor == `${process.env.PATH_PREFIX}${path} ${to}`) {\r\n      setActive(true)\r\n    } else {\r\n      setActive(false)\r\n    }\r\n  }, [activeAnchor])\r\n\r\n  // console.log(\r\n  //   `path: ${path} to: ${to} pathname: ${pathname} prefix with path: ${process.env.PATH_PREFIX}${path}`\r\n  // )\r\n\r\n  return (\r\n    <p\r\n      className={`${active ? \"font-bold\" : \"\"} cursor-pointer`}\r\n      onClick={() => {\r\n        // the pathname from location usually has an added slash\r\n\r\n        if (`${process.env.PATH_PREFIX}${path}/` == pathname) {\r\n          const tag = document.getElementById(to)\r\n          tag.scrollIntoView({ behavior: \"smooth\" })\r\n          // set \"hasScrolled\" to false .. gets set true if the user scrolls the docs area\r\n          setHasScrolled(false)\r\n\r\n          // in the MDX anchor componnnt, the text generates the id \"to\"\r\n          // two anchor links on different documents might have the same text so\r\n          // I have the path be part of the identifying string\r\n          // as long as 2 anchors on the same MDX page don't have the same text we're good\r\n          setActiveAnchor(`${process.env.PATH_PREFIX}${path} ${to}`)\r\n        } else {\r\n          navigate(`${path}?anchor=${to}`)\r\n        }\r\n      }}\r\n    >\r\n      {children}\r\n    </p>\r\n  )\r\n}\r\n\r\nexport default CustomAnchor\r\n","import React, { useState, useEffect, useContext } from \"react\"\r\nimport { Link } from \"gatsby\"\r\nimport { useLocation } from \"@reach/router\"\r\nimport CustomAnchor from \"./CustomAnchor\"\r\nimport SidebarContext from \"./SidebarContext\"\r\nimport LayoutContext from \"./LayoutContext\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faX, faBars } from \"@fortawesome/free-solid-svg-icons\"\r\nimport * as layoutStyles from \"./layout.module.scss\"\r\nimport useWindowDimensions from \"../../hooks/useWindowDimensions\"\r\n// HEADER IS A ReserveD WORD\r\n\r\nconst SideBar = ({ sidebarData }) => {\r\n  const { setActiveAnchor, hasScrolled } = useContext(SidebarContext)\r\n  const { sidebarOpen, setSidebarOpen } = useContext(LayoutContext)\r\n\r\n  const [anchorsOnPage, setAnchorsOnPage] = useState([])\r\n  const [anchorsLoaded, setAnchorsLoaded] = useState(false)\r\n  const [anchorUpdate, setAnchorUpdate] = useState([])\r\n\r\n  const [intialAnchorLinkSet, setIntialAnchorLinkSet] = useState(false)\r\n\r\n  // const [sidebarOpen, setSidebarOpen] = useState(true)\r\n  const [wideScreen, setWideScreen] = useState(false)\r\n  const { width } = useWindowDimensions()\r\n\r\n  const location = useLocation()\r\n  const { pathname } = location\r\n\r\n  // ok every time something enteres or leaves, update\r\n  // the anchors in view\r\n  useEffect(() => {\r\n    const els = document.querySelectorAll(\".anchor-link\")\r\n\r\n    const observerCallback = (entries, observer, header) => {\r\n      const newAnchorInfo = []\r\n      entries.forEach((entry, i) => {\r\n        const to = entry.target.href.split(\"#\")[1]\r\n        const path = pathname.slice(0, -1)\r\n        const anchorString = `${path} ${to}`\r\n\r\n        if (entry.isIntersecting) {\r\n          newAnchorInfo.push({\r\n            anchorString,\r\n            inView: true,\r\n            offsetTop: entry.target.offsetTop\r\n          })\r\n        } else {\r\n          newAnchorInfo.push({\r\n            anchorString,\r\n            inView: false,\r\n            offsetTop: entry.target.offsetTop\r\n          })\r\n        }\r\n      })\r\n\r\n      setAnchorUpdate(newAnchorInfo)\r\n    }\r\n\r\n    const observer = new window.IntersectionObserver(observerCallback, {\r\n      root: null,\r\n      threshold: 0.5 // set offset 0.1 means trigger if atleast 10% of element in viewport\r\n    })\r\n\r\n    els.forEach((el) => {\r\n      observer.observe(el)\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (anchorUpdate.length && !anchorsLoaded) {\r\n      setAnchorsOnPage(anchorUpdate)\r\n      setAnchorsLoaded(true)\r\n    }\r\n  }, [anchorUpdate, anchorsLoaded])\r\n\r\n  // eh, there might be a better way to do this but\r\n  // by the time I got here I was like \"It works, and it's good enough!\"\r\n  useEffect(() => {\r\n    // to prevent infinite reloading, only update if there is a non-empty update, and then set the update to empty if done\r\n    if (anchorsLoaded && anchorUpdate.length) {\r\n      let newAnchorsOnPage = [...anchorsOnPage]\r\n      anchorUpdate.forEach((anchorInfo) => {\r\n        const index = anchorsOnPage.findIndex((anchor) => {\r\n          return anchorInfo.anchorString == anchor.anchorString\r\n        })\r\n\r\n        if (index >= 0) {\r\n          newAnchorsOnPage.splice(index, 1, anchorInfo)\r\n        }\r\n      })\r\n\r\n      setAnchorsOnPage(newAnchorsOnPage)\r\n      setAnchorUpdate([])\r\n\r\n      if (hasScrolled) {\r\n        let smallestTopOffset = Number.POSITIVE_INFINITY\r\n        let indexOfSmallestOffset = -1\r\n        newAnchorsOnPage.forEach((anchor, i) => {\r\n          if (anchor.inView && anchor.offsetTop < smallestTopOffset) {\r\n            smallestTopOffset = anchor.offsetTop\r\n            indexOfSmallestOffset = i\r\n          }\r\n        })\r\n\r\n        if (indexOfSmallestOffset >= 0) {\r\n          const newActiveAnchorInfo = newAnchorsOnPage[indexOfSmallestOffset]\r\n          setActiveAnchor(newActiveAnchorInfo.anchorString)\r\n        } else {\r\n          // if we're here, there's no anchors vidible on screen\r\n          setActiveAnchor(\"\")\r\n        }\r\n      }\r\n    }\r\n  }, [anchorsOnPage, anchorUpdate, anchorsLoaded, hasScrolled])\r\n\r\n  useEffect(() => {\r\n    if (location.search && !intialAnchorLinkSet) {\r\n      const urlParams = new URLSearchParams(location.search)\r\n      const anchorLink = urlParams.get(\"anchor\")\r\n      if (anchorLink) {\r\n        const tag = document.getElementById(anchorLink)\r\n        if (tag) {\r\n          tag.scrollIntoView({ behavior: \"smooth\" })\r\n\r\n          const path = pathname.slice(0, -1)\r\n          setActiveAnchor(`${path} ${anchorLink}`)\r\n        }\r\n      }\r\n      setIntialAnchorLinkSet(true)\r\n    } else if (anchorsLoaded && !intialAnchorLinkSet) {\r\n      // just set the active anchor link to the highest link in view\r\n      // pretty sure it's just gonna be the firs one that's \"in view\"\r\n      // and if the first one is in view, it's gonna be that one so ..\r\n      let firstAnchor = anchorsOnPage[0]\r\n\r\n      if (firstAnchor.inView) {\r\n        setActiveAnchor(firstAnchor.anchorString)\r\n      }\r\n\r\n      setIntialAnchorLinkSet(true)\r\n    }\r\n  }, [anchorsLoaded, anchorsOnPage, intialAnchorLinkSet])\r\n\r\n  useEffect(() => {\r\n    if (width > 768) {\r\n      setWideScreen(true)\r\n    } else {\r\n      setWideScreen(false)\r\n    }\r\n  }, [width])\r\n\r\n  useEffect(() => {\r\n    setSidebarOpen(true)\r\n  }, [wideScreen])\r\n\r\n  // organize alphabetically\r\n  // then loop the map and fill in the links and sublinks\r\n  console.log(\"SIDEBAR DATA IS\")\r\n  console.log(sidebarData)\r\n\r\n  if (!sidebarData) {\r\n    return <>{`No sidebar data for path ${pathname}`}</>\r\n  }\r\n\r\n  const { path, nodes } = sidebarData\r\n  const rootDocArr = []\r\n  const categoryArr = []\r\n  const categoryMap = {}\r\n  nodes.forEach((node) => {\r\n    const {\r\n      frontmatter: { category, title, slug, order, isCategoryRoot, anchorLinks }\r\n    } = node\r\n    if (!category) {\r\n      // don't give a slug of \"index\" part of the path here ..\r\n      // the path will just be /docs/ or /customize/ etc\r\n      // this is different for the categories\r\n      const pathName = slug === \"index\" ? `/${path}` : `/${path}/${slug}`\r\n      rootDocArr.push({\r\n        title,\r\n        path: pathName,\r\n        sublinks: null,\r\n        order,\r\n        anchorLinks\r\n      })\r\n    } else {\r\n      if (!categoryMap[category]) {\r\n        categoryMap[category] = []\r\n      }\r\n\r\n      if (isCategoryRoot) {\r\n        categoryArr.push({\r\n          title, // uppercase the first letter later\r\n          categoryName: category, // in case I change it from the title\r\n          isCategoryRoot: true,\r\n          path: `/${path}/${slug}`,\r\n          sublinks: null, // get changed into an array later\r\n          order,\r\n          anchorLinks\r\n        })\r\n      } else {\r\n        categoryMap[category].push({\r\n          title,\r\n          path: `/${path}/${slug}`,\r\n          order,\r\n          anchorLinks\r\n        })\r\n      }\r\n    }\r\n  })\r\n\r\n  // ok now loop through the sidebarLinkArr. If there's sublinks, fil them in\r\n\r\n  categoryArr.forEach((entry) => {\r\n    const category = entry.categoryName\r\n    entry.sublinks = categoryMap[category]\r\n  })\r\n\r\n  // the root docs will go first, sorted by an order property,  and then the categories\r\n  // in alphabetical order, and then the sublinks (in a category) are sorted by a frontmatter \"order\" property\r\n  // the anchor links are already determined in the frontmatter defintion\r\n  rootDocArr.sort((a, b) => a.order - b.order)\r\n  categoryArr.sort((a, b) => {\r\n    return a.order - b.order\r\n  })\r\n\r\n  categoryArr.forEach((item) => {\r\n    const { sublinks } = item\r\n\r\n    if (sublinks) {\r\n      sublinks.sort((a, b) => {\r\n        return a.order - b.order\r\n      })\r\n    }\r\n  })\r\n\r\n  const sidebarLinkArr = [...rootDocArr, ...categoryArr]\r\n\r\n  // capitalize category name\r\n  // .. hm.. oh yeah. Fix anchor links\r\n\r\n  return (\r\n    <>\r\n      <div className=\"w-0\">\r\n        <div\r\n          onClick={() => setSidebarOpen(true)}\r\n          className={`${\r\n            sidebarOpen ? \"display-none\" : \"display-flex\"\r\n          } text-xl w-3 h-3 position-relative top-1 left-1 radius-full cursor-pointer shadow-magenta-lg hover:shadow-blue-lg bg-background-ltr items-center justify-center bg-background z-5 text-magenta hover:text-blue`}\r\n        >\r\n          <FontAwesomeIcon icon={faBars} />\r\n        </div>\r\n      </div>\r\n      <div\r\n        id=\"sidebar\"\r\n        className={`${\r\n          layoutStyles.sidebar\r\n        }  max-tab:position-absolute max-tab:h-full min-w-1/4 max-tab:w-20 overflow-y-scroll bg-background z-4  ${\r\n          sidebarOpen ? \"\" : \"display-none\"\r\n        }`}\r\n      >\r\n        <nav className=\"p-md\">\r\n          <span className={`${wideScreen ? \"display-none\" : \"\"} `}>\r\n            <FontAwesomeIcon\r\n              className={`cursor-pointer hover:text-magenta text-magenta hover:text-blue text-lg py-sm`}\r\n              onClick={() => setSidebarOpen(false)}\r\n              icon={faX}\r\n            />\r\n          </span>\r\n          <ul className=\"display-flex flex-col line-height-lg\">\r\n            {sidebarLinkArr.map((entry) => {\r\n              const {\r\n                isCategoryRoot,\r\n                categoryName,\r\n                path,\r\n                title,\r\n                sublinks,\r\n                anchorLinks\r\n              } = entry\r\n\r\n              if (isCategoryRoot) {\r\n                const upperCaseTitle =\r\n                  title.charAt(0).toUpperCase() + title.slice(1)\r\n\r\n                const highlightLink =\r\n                  `${process.env.PATH_PREFIX}${path}/` === pathname\r\n\r\n                return (\r\n                  <li key={`${path} ${title}`}>\r\n                    <span\r\n                      className={`${\r\n                        highlightLink ? \"text-magenta\" : \"\"\r\n                      } font-large hover:text-magenta `}\r\n                    >\r\n                      <Link to={path}>{upperCaseTitle}</Link>\r\n                    </span>\r\n                    {anchorLinks && (\r\n                      <ul className=\"line-height-md \">\r\n                        {anchorLinks.map((anchorLink, i) => {\r\n                          // name of is a bit different, I don't think anchor links are a full \"path\" (might need to refacto later)\r\n                          const { title, link } = anchorLink\r\n\r\n                          return (\r\n                            <li\r\n                              key={`${title} ${link}`}\r\n                              className={`pl-md text-md ${\r\n                                i == anchorLinks.length - 1 ? \"mb-xs\" : \"\"\r\n                              } `}\r\n                            >\r\n                              <CustomAnchor path={path} to={link}>\r\n                                {title}\r\n                              </CustomAnchor>\r\n                            </li>\r\n                          )\r\n                        })}\r\n                      </ul>\r\n                    )}\r\n                    {sublinks && (\r\n                      <ul>\r\n                        {sublinks.map((link, i) => {\r\n                          const { title, path: subLinkPath, anchorLinks } = link\r\n\r\n                          const highlightLink =\r\n                            `${process.env.PATH_PREFIX}${subLinkPath}/` ===\r\n                            pathname\r\n\r\n                          return (\r\n                            <li\r\n                              key={`${title} ${subLinkPath}`}\r\n                              className={`pl-md font-normal   ${\r\n                                i == sublinks.length - 1 ? \"mb-xs\" : \"\"\r\n                              }`}\r\n                            >\r\n                              <span\r\n                                className={`${\r\n                                  highlightLink ? \"text-magenta\" : \"\"\r\n                                } font-bold hover:text-magenta`}\r\n                              >\r\n                                <Link to={subLinkPath}>{title}</Link>\r\n                              </span>\r\n\r\n                              {anchorLinks && (\r\n                                <ul className=\"line-height-md \">\r\n                                  {anchorLinks.map((anchorLink) => {\r\n                                    // name of is a bit different, I don't think anchor links are a full \"path\" (might need to refacto later)\r\n                                    const { title, link } = anchorLink\r\n\r\n                                    return (\r\n                                      <li\r\n                                        key={`${title} ${link}`}\r\n                                        className=\"pl-md text-md hover:text-magenta\"\r\n                                      >\r\n                                        <CustomAnchor\r\n                                          path={subLinkPath}\r\n                                          to={link}\r\n                                        >\r\n                                          {title}\r\n                                        </CustomAnchor>\r\n                                      </li>\r\n                                    )\r\n                                  })}\r\n                                </ul>\r\n                              )}\r\n                            </li>\r\n                          )\r\n                        })}\r\n                      </ul>\r\n                    )}\r\n                  </li>\r\n                )\r\n              }\r\n\r\n              const upperCaseTitle =\r\n                title.charAt(0).toUpperCase() + title.slice(1)\r\n\r\n              const highlightLink =\r\n                `${process.env.PATH_PREFIX}${path}/` === pathname\r\n\r\n              return (\r\n                <li key={`${path} ${title}`}>\r\n                  <span\r\n                    className={`${\r\n                      highlightLink ? \"text-magenta\" : \"\"\r\n                    } font-large hover:text-magenta`}\r\n                  >\r\n                    <Link to={path}>{title}</Link>\r\n                  </span>\r\n                </li>\r\n              )\r\n            })}\r\n          </ul>\r\n        </nav>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SideBar\r\n","import React, { useState, useContext } from \"react\"\r\nimport Footer from \"./Footer\"\r\nimport SideBar from \"./Sidebar\"\r\nimport LayoutContext from \"./LayoutContext\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\nimport * as layoutStyles from \"./layout.module.scss\"\r\nimport SidebarContext from \"./SidebarContext\"\r\n// not sure how best to pass the sidebar and the content\r\n\r\nconst SidebarLayout = ({ pathname, children }) => {\r\n  // context state\r\n  const { sidebarOpen, setSidebarOpen } = useContext(LayoutContext)\r\n\r\n  const [hasScrolled, setHasScrolled] = useState(false)\r\n  const [activeAnchor, setActiveAnchor] = useState(\"\")\r\n\r\n  const { docs, components, customize } = useStaticQuery(graphql`\r\n    query HeaderQuery {\r\n      docs: allMdx(filter: { frontmatter: { type: { eq: \"docs\" } } }) {\r\n        nodes {\r\n          id\r\n          frontmatter {\r\n            title\r\n            slug\r\n            category\r\n            order\r\n            isCategoryRoot\r\n            anchorLinks {\r\n              title\r\n              link\r\n            }\r\n          }\r\n        }\r\n      }\r\n      # components: allMdx(\r\n      #   filter: { frontmatter: { type: { eq: \"components\" } } }\r\n      # ) {\r\n      #   nodes {\r\n      #     id\r\n      #     frontmatter {\r\n      #       title\r\n      #       slug\r\n      #       category\r\n      #       order\r\n      #       isCategoryRoot\r\n      #       anchorLinks {\r\n      #         title\r\n      #         link\r\n      #       }\r\n      #     }\r\n      #   }\r\n      # }\r\n      customize: allMdx(\r\n        filter: { frontmatter: { type: { eq: \"customize\" } } }\r\n      ) {\r\n        nodes {\r\n          id\r\n          frontmatter {\r\n            title\r\n            slug\r\n            category\r\n            order\r\n            isCategoryRoot\r\n            anchorLinks {\r\n              title\r\n              link\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  // const pathParts = pathname.split(\"/\")\r\n  // const section = pathParts.length && pathname.split(\"/\")[1] // this should always be defined in this route but let;s be careful\r\n\r\n  let path_prefix = process.env.PATH_PREFIX\r\n    ? process.env.PATH_PREFIX\r\n    : process.env.GATSBY_PATH_PREFIX // make a .env.development file and put GAtSBY\r\n\r\n  let sidebarData\r\n\r\n  // this might be kinda janky code .. but I don't wanna spend forever trying to think about an alternative way\r\n  if (pathname.startsWith(`${path_prefix}docs`)) {\r\n    sidebarData = { path: \"docs\", ...docs }\r\n  } else if (pathname.startsWith(`${path_prefix}customize`)) {\r\n    sidebarData = { path: \"customize\", ...customize }\r\n  }\r\n\r\n  return (\r\n    <div id=\"sidebar-layout\" className=\"display-flex min-w-full grow-1\">\r\n      <SidebarContext.Provider\r\n        value={{\r\n          activeAnchor,\r\n          setActiveAnchor,\r\n          hasScrolled,\r\n          setHasScrolled\r\n        }}\r\n      >\r\n        <SideBar sidebarData={sidebarData} />\r\n        <div\r\n          id=\"docs-section\"\r\n          className={`display-flex flex-col grow-1 overflow-y-scroll position-relative ${layoutStyles.docsSection}`}\r\n          onWheel={() => {\r\n            setHasScrolled(true)\r\n          }}\r\n          // remember to test this on mobile\r\n          onTouchStart={() => {\r\n            setHasScrolled(true)\r\n          }}\r\n        >\r\n          <div\r\n            id=\"small-width-overlay\"\r\n            className={`display-none ${\r\n              sidebarOpen ? \"max-tab:display-block\" : \"\"\r\n            } position-fixed top-0 left-0 w-full h-full z-3 bg-black opacity-10`}\r\n          />\r\n          <div\r\n            id=\"the-document\"\r\n            className={`grow-1 pl-xl p-lg w-19/20 max-w-container lg:mx-auto   ${\r\n              sidebarOpen ? \"max-tab:filter-blur-md\" : \"\"\r\n            }`}\r\n          >\r\n            {children}\r\n          </div>\r\n          <Footer />\r\n        </div>\r\n      </SidebarContext.Provider>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SidebarLayout\r\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","h4","p","ul","li","a","code","pre","_provideComponents","components","React","href","CodeWrapper","title","isFile","className","type","value","wrapper","MDXLayout","DocumentPage","_ref","location","data","mdx","children","pathname","includes","Layout","onSideBarPage","SidebarLayout","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","addExtraMarginUnderTitle","createContext","hasScrolled","setHasScrolled","activeAnchor","setActiveAnchor","path","to","useLocation","useContext","SidebarContext","active","setActive","useState","useEffect","process","PATH_PREFIX","onClick","document","getElementById","scrollIntoView","behavior","navigate","sidebarData","sidebarOpen","setSidebarOpen","LayoutContext","anchorsOnPage","setAnchorsOnPage","anchorsLoaded","setAnchorsLoaded","anchorUpdate","setAnchorUpdate","intialAnchorLinkSet","setIntialAnchorLinkSet","wideScreen","setWideScreen","width","useWindowDimensions","els","querySelectorAll","observer","window","IntersectionObserver","observerCallback","entries","header","newAnchorInfo","forEach","entry","i","target","split","anchorString","slice","isIntersecting","push","inView","offsetTop","root","threshold","el","observe","length","newAnchorsOnPage","_toConsumableArray","anchorInfo","index","findIndex","anchor","splice","smallestTopOffset","Number","POSITIVE_INFINITY","indexOfSmallestOffset","newActiveAnchorInfo","search","anchorLink","URLSearchParams","get","tag","firstAnchor","console","log","nodes","rootDocArr","categoryArr","categoryMap","node","frontmatter","category","slug","order","isCategoryRoot","anchorLinks","categoryName","sublinks","pathName","sort","b","item","sidebarLinkArr","concat","FontAwesomeIcon","icon","faBars","id","faX","map","upperCaseTitle","charAt","toUpperCase","highlightLink","key","Link","link","CustomAnchor","subLinkPath","docs","customize","useStaticQuery","path_prefix","GATSBY_PATH_PREFIX","startsWith","Provider","SideBar","onWheel","onTouchStart","Footer"],"sourceRoot":""}