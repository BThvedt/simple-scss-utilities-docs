{"version":3,"file":"component---src-pages-mdx-frontmatter-type-mdx-frontmatter-slug-js-content-file-path-content-docs-night-mode-index-mdx-8d39853f9f7549da7be9.js","mappings":"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","sources":["webpack://simple-scss-utilities/./content/docs/Night Mode/index.mdx","webpack://simple-scss-utilities/./src/pages/{mdx.frontmatter__type}/{mdx.frontmatter__slug}.js","webpack://simple-scss-utilities/./src/components/Mdx/CodeWrapper.js","webpack://simple-scss-utilities/./src/components/Layout/SidebarContext.js","webpack://simple-scss-utilities/./src/components/Layout/CustomAnchor.js","webpack://simple-scss-utilities/./src/components/Layout/Sidebar.js","webpack://simple-scss-utilities/./src/components/Layout/SidebarLayout.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faSun} from \"@fortawesome/free-solid-svg-icons\";\nimport {Paragraph} from \"../../../src/components/Mdx/textComponents\";\nimport CodeWrapper from \"../../../src/components/Mdx/CodeWrapper\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h4: \"h4\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    a: \"a\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"Dark Mode\"), \"\\n\", React.createElement(_components.h4, null, \"How different color modes work\"), \"\\n\", React.createElement(_components.p, null, \"Many large websites come in a light and dark color mode. Now, I use JS for contorlling this, it's just my personal taste and I don't mind, since probably wll over 99% of users have JS turned on which is enough for me and because all my personal projects are heavy in JS anyway, but the option to control it with user system settings is included as well. And I'll talk about how to use either way in this section.\"), \"\\n\", React.createElement(_components.p, null, \"I guess the easiest place to start is by looking at the color definitions in \", React.createElement(_components.code, null, \"_variables.scss\"), \":\"), \"\\n\", React.createElement(CodeWrapper, {\n    title: \"_variables.scss\",\n    isFile: true\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-scss\"\n  }, \"$modes: \\\"default\\\", \\\"dark-mode\\\";\\r\\n$jsForColorMode: true;\\r\\n\\r\\n$color-modifiers: (\\r\\n  \\\"light\\\": (\\r\\n    \\\"lt\\\": 15%,\\r\\n    \\\"ltr\\\": 30%\\r\\n  ),\\r\\n  \\\"dark\\\": (\\r\\n    \\\"dk\\\": 15%,\\r\\n    \\\"dkr\\\": 30%\\r\\n  )\\r\\n);\\r\\n\\r\\n$colors: (\\r\\n  \\\"default\\\": (\\r\\n    \\\"white\\\": #fff,\\r\\n    \\\"black\\\": #000,\\r\\n    \\\"red\\\": #cb3810,\\r\\n    \\\"green\\\": #589f50,\\r\\n    \\\"blue\\\": #2978a0,\\r\\n    \\\"default\\\": #252832,\\r\\n    \\\"background\\\": #fdfcf9,\\r\\n    \\\"magenta\\\": #bf4081\\r\\n  ),\\r\\n  \\\"dark-mode\\\": (\\r\\n    \\\"background\\\": #292d3a,\\r\\n    \\\"default\\\": #dcdbda,\\r\\n    \\\"blue\\\": #5798e1,\\r\\n    \\\"dark-mode-only\\\": #4d5359\\r\\n  )\\r\\n);\\n\"))), \"\\n\", React.createElement(_components.p, null, \"Alright so what is going on here? It's not tough. All these colors generate various utility classes. The 'default' color mode, which is a \\\"light\\\" color theme, defines about 8 colors. If you've read the \", React.createElement(_components.a, {\n    href: \"/simple-scss-utilities-docs/docs/colors/\"\n  }, \"Colors\"), \" section which goes into more detail you'll know that each of 'em except for white and black come in 5 shades, which is the shade in \", React.createElement(_components.code, null, \"$colors\"), \" map plus every other shade in the \", React.createElement(_components.code, null, \"$color-modifiers\"), \" map which lighten or darken them by the percents specified (by mixing in white or black).\"), \"\\n\", React.createElement(_components.p, null, \"Below the \", React.createElement(_components.code, null, \"default\"), \" map in \", React.createElement(_components.code, null, \"$colors\"), \" is the \", React.createElement(_components.code, null, \"dark-mode\"), \" map. Every color in the \", React.createElement(_components.code, null, \"dark-mode\"), \" map that has the same name as in the 'default' map is overridden for that mode, and the shades are overridden too if you're wondering. Here, I override 2 colors, the background and the default (which I use for text) to provide a quick and easy dark mode. I also override \\\"blue\\\" just for illustrative purposes, as well as I define a color \", React.createElement(_components.code, null, \"dark-mode-only\"), \", the classes generated won't have any effet in outslide of dark mode. I did this partially for illustration, but also becasue I wanted a dark-mode specific color for the inline code blocks. This also could have been handeled by adding another color to the default colors and overriding it for dark mode, but I think it's handy to just have an extra color or two depending the current active color theme.\"), \"\\n\", React.createElement(_components.p, null, \"You can \", React.createElement(_components.a, {\n    href: \"/simple-scss-utilities-docs/customize/\"\n  }, \"Customize\"), \" the names, shades, the amount of colors, even the amount of modes if you are using JavaScript. You can see how it works on this site by hitting the \", React.createElement(FontAwesomeIcon, {\n    icon: faSun\n  }), \" icon in the top right, now, let's dive into a little bit more on what's going on under the hood.\"), \"\\n\", React.createElement(_components.p, null, \"So, let's take a look at these lines:\"), \"\\n\", React.createElement(CodeWrapper, {\n    title: \"_variables.scss\",\n    isFile: true\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-scss\"\n  }, \"$modes: \\\"default\\\", \\\"dark-mode\\\";\\r\\n$jsForColorMode: true;\\n\"))), \"\\n\", React.createElement(_components.p, null, \"Note that the submaps in the \", React.createElement(_components.code, null, \"$colors\"), \" map have to match the names in the \", React.createElement(_components.code, null, \"$modes\"), \" list. If you were to define a third color mode, for example, you'd have to put it in this \", React.createElement(_components.code, null, \"$modes\"), \" list as well as the \", React.createElement(_components.code, null, \"$colors\"), \" map, and follow the same pattern as the two default modes.\"), \"\\n\", React.createElement(_components.h2, null, \"With JS\"), \"\\n\", React.createElement(_components.p, null, \"If \", React.createElement(_components.code, null, \"$jsForColorMode\"), \" is true, then you can switch color modes by applying a class to some kind of wrapper element. For example, in this site, the main layout is wrappted with a div, and when a user clicks the \", React.createElement(FontAwesomeIcon, {\n    icon: faSun\n  }), \" icon I add or remove a \", React.createElement(_components.code, null, \".dark-mode\"), \" class to the wrapper, and the css applies the overridden colors. No additional classes are necessary this way, although I did include that \", React.createElement(_components.code, null, \"dark-mode-only\"), \" color I mentioned above as well as some extra classes for box-shadows (see the \", React.createElement(_components.a, {\n    href: \"/simple-scss-utilities-docs/docs/box-shadow/\"\n  }, \"Box Shadows\"), \") section.\"), \"\\n\", React.createElement(_components.p, null, \"So in other words, anything with a class generated with an over-ridden color, say for example the background color which is applied by classes such as \", React.createElement(_components.code, null, \".bg-background\"), \" will have the light, off-white #fdfcf9 color in default mode, but have the darker \", React.createElement(_components.code, null, \"#292d3a\"), \" color when it's wrapped by an element with the \", React.createElement(_components.code, null, \".dark-mode\"), \" class. All you gotta do is wrap your site in a wrapper div and switch the class name! Note that the names of the class (in the non-default mode) has to match the names in the \", React.createElement(_components.code, null, \"_variables.scss\"), \" file.\"), \"\\n\", React.createElement(_components.p, null, \"Just as an illustration, here's how I approach adding or removing this class for this particular site..\"), \"\\n\", React.createElement(CodeWrapper, {\n    title: \"JS\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-JS\"\n  }, \"\\r\\nfunction setThemeMode(mode) {\\r\\n  // .. adds a class to the wrapper div\\r\\n\\t// note that 'default' doesn't actually neeed a class\\r\\n  // only 'dark-mode' needs a .dark-mode class\\r\\n\\t// other modes, if you have 'em, will take a classname of whatever you define\\r\\n\\t// in the _variables.scss file\\r\\n}\\r\\n\\r\\n// runs when the site is loaded\\r\\nconst mode = localStorage.getItem(\\\"themeMode\\\")\\r\\n\\r\\nif (mode === \\\"dark-mode\\\") {\\r\\n  setThemeMode(\\\"dark-mode\\\")\\r\\n} else if (!mode) {\\r\\n\\t// in case this is a user's first time to the site, I set it to\\r\\n\\t// whatever the system settings\\r\\n  if (\\r\\n    window.matchMedia &&\\r\\n    window.matchMedia(\\\"(prefers-color-scheme: dark)\\\").matches\\r\\n  ) {\\r\\n    setThemeMode(\\\"dark-mode\\\")\\r\\n  }\\r\\n} else {\\r\\n  setThemeMode(\\\"default\\\")\\r\\n}\\r\\n\\r\\n// .. plus another bit of code for when the user clicks the icon which sets the class and\\r\\n// stores the mode in local storage\\n\"))), \"\\n\", React.createElement(_components.p, null, \"It's a react-based site so I have it in a couple \", React.createElement(_components.code, null, \"useEffect()\"), \" hooks but however you implement it is up to you. It's pretty straight forward, check localstorage to see if the user has visited before and set a preference, apply the preference, and that's it. If the user hasn't visted before set a preference, it checks the system settings to see if they've set that they prefer a dark color scheme and applies that.\"), \"\\n\", React.createElement(_components.p, null, \"So let's talk about this system setting. It depends on your platform, but on Windows 11 desktop for exmaple, you'd right click the desktop, select \", React.createElement(_components.code, null, \"Personalize\"), \" in the context menu that pops up, and then look for \", React.createElement(_components.code, null, \"Color\"), \" and you can change your mode from \", React.createElement(_components.code, null, \"light\"), \" to \", React.createElement(_components.code, null, \"dark\"), \". For other platforms it's easy enough to figure out how to do this.\"), \"\\n\", React.createElement(_components.p, null, \"But IF you are on windows, and you change your mode, your browser will pick it up. Now, since you're already here, you've got a variable in \", React.createElement(_components.code, null, \"local storage\"), \" that is already storing the mode. Open the developer console and (in chrome, for exmple) go to \", React.createElement(_components.code, null, \"Application\"), \" → \", React.createElement(_components.code, null, \"Local Storage\"), \" → \", React.createElement(_components.code, null, \"https://bthvedt.github.io\"), \" and find the \", React.createElement(_components.code, null, \"themeMode\"), \" variable and delete it. Change your system setting to dark, and refresh the page, and this site will be in dark mode, since I'm automatically detecting it with JS! Of coruse that involves a small amount of effort, so only do it if you want to see verification that it works haha.\"), \"\\n\", React.createElement(_components.h2, null, \"But I don't wanna use JS!\"), \"\\n\", React.createElement(_components.p, null, \"Ok that's fine too. Everything still will work the same style-wise, exempt now you are restricted to 2 modes. Now this site uses JS, and like I said it doesn't bother me because well over 99% of people have JS enabled and I'm ok with that, but if you're making your own that doesn't use JS just change this setting:\"), \"\\n\", React.createElement(CodeWrapper, {\n    title: \"_variables.scss\",\n    isFile: true\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-scss\"\n  }, \"$jsForColorMode: true; // <-- change to false\\n\"))), \"\\n\", React.createElement(_components.p, null, \"Now, the generated CSS won't apply a \", React.createElement(_components.code, null, \".dark-mode\"), \" class, instead, it will use the \", React.createElement(_components.code, null, \"prefers-color-scheme:dark\"), \" media query. Otherwise, the styles and colors work the same!\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/mnt/c/Users/bthve/Desktop/2025 job search and side projects/side-repos/simple-scss-utilities-docs/content/docs/Night Mode/index.mdx\";\nimport React from \"react\";\nimport {useStaticQuery, graphql} from \"gatsby\";\nimport Layout from \"../../components/Layout/Layout\";\nimport SidebarLayout from \"../../components/Layout/SidebarLayout\";\nconst DocumentPage = ({location, data: {mdx}, children}) => {\n  const {pathname} = location;\n  if (pathname.includes(\"/page/\")) {\n    return React.createElement(React.Fragment, null, children);\n  }\n  return React.createElement(Layout, {\n    onSideBarPage: true\n  }, React.createElement(SidebarLayout, {\n    pathname: pathname\n  }, React.createElement(\"main\", null, children)));\n};\nDocumentPage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(DocumentPage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String) {\n    mdx(id: { eq: $id }) {\n      id\n      body\n      frontmatter {\n        description\n        title\n        type\n        image\n      }\n    }\n  }\n`;\n","import React from \"react\"\r\n\r\n// I decided to keep this seperate from CodeBlock.js, which which taken from examples give by how to use prisimjs in MDX around the interent\r\n// This is just a wrapper for code blocks, displays the filename or language, plus whatever else might be necessary in the future\r\n\r\n// a results block might be good too\r\n\r\nconst CodeWrapper = ({ children, title, isFile, addExtraMarginUnderTitle }) => {\r\n  return (\r\n    <div className=\"mt-lg mb-2xl mr-2\">\r\n      <h6\r\n        className={`font-large text-lg position-relative left-1px ${\r\n          addExtraMarginUnderTitle ? \"mb-md\" : \"mb-xs\"\r\n        }`}\r\n      >\r\n        {isFile ? \"File: \" : \"\"}\r\n        {title}\r\n      </h6>\r\n      <div className=\"mr-md\">{children}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CodeWrapper\r\n","import { createContext } from \"react\"\r\n\r\nconst SidebarContext = createContext({\r\n  hasScrolled: false,\r\n  setHasScrolled: () => {}, // keep track if the scrolling was done by the user\r\n\r\n  activeAnchor: \"\", // '${path} ${to} of active anchor link'\r\n  setActiveAnchor: () => {}\r\n})\r\n\r\nexport default SidebarContext\r\n","import React, { useState, useEffect, useContext } from \"react\"\r\nimport SidebarContext from \"./SidebarContext\"\r\nimport { useLocation } from \"@reach/router\"\r\nimport { navigate } from \"gatsby\"\r\n\r\n/*\r\n  Gatsby seemed to have a little trouble with anchor links \r\n  Not only did they not seem to quite work but.. I also wanted to implement smooth scrolling\r\n  if you jump from page to page so I made my own component. \r\n  It's possible to make the URLs just slightly awkared if you\r\n  click directly on the link .. but.. they still work\r\n*/\r\nconst CustomAnchor = ({ children, path, to }) => {\r\n  const location = useLocation()\r\n  const { activeAnchor, setActiveAnchor, hasScrolled, setHasScrolled } =\r\n    useContext(SidebarContext)\r\n  const [active, setActive] = useState(false)\r\n  const { pathname } = location\r\n\r\n  useEffect(() => {\r\n    if (activeAnchor == `${process.env.PATH_PREFIX}${path} ${to}`) {\r\n      setActive(true)\r\n    } else {\r\n      setActive(false)\r\n    }\r\n  }, [activeAnchor])\r\n\r\n  // console.log(\r\n  //   `path: ${path} to: ${to} pathname: ${pathname} prefix with path: ${process.env.PATH_PREFIX}${path}`\r\n  // )\r\n\r\n  return (\r\n    <p\r\n      className={`${active ? \"font-bold\" : \"\"} cursor-pointer`}\r\n      onClick={() => {\r\n        // the pathname from location usually has an added slash\r\n\r\n        if (`${process.env.PATH_PREFIX}${path}/` == pathname) {\r\n          const tag = document.getElementById(to)\r\n          tag.scrollIntoView({ behavior: \"smooth\" })\r\n          // set \"hasScrolled\" to false .. gets set true if the user scrolls the docs area\r\n          setHasScrolled(false)\r\n\r\n          // in the MDX anchor componnnt, the text generates the id \"to\"\r\n          // two anchor links on different documents might have the same text so\r\n          // I have the path be part of the identifying string\r\n          // as long as 2 anchors on the same MDX page don't have the same text we're good\r\n          setActiveAnchor(`${process.env.PATH_PREFIX}${path} ${to}`)\r\n        } else {\r\n          navigate(`${path}?anchor=${to}`)\r\n        }\r\n      }}\r\n    >\r\n      {children}\r\n    </p>\r\n  )\r\n}\r\n\r\nexport default CustomAnchor\r\n","import React, { useState, useEffect, useContext } from \"react\"\r\nimport { Link } from \"gatsby\"\r\nimport { useLocation } from \"@reach/router\"\r\nimport CustomAnchor from \"./CustomAnchor\"\r\nimport SidebarContext from \"./SidebarContext\"\r\nimport LayoutContext from \"./LayoutContext\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faX, faBars } from \"@fortawesome/free-solid-svg-icons\"\r\nimport * as layoutStyles from \"./layout.module.scss\"\r\nimport useWindowDimensions from \"../../hooks/useWindowDimensions\"\r\n// HEADER IS A ReserveD WORD\r\n\r\nconst SideBar = ({ sidebarData }) => {\r\n  const { setActiveAnchor, hasScrolled } = useContext(SidebarContext)\r\n  const { sidebarOpen, setSidebarOpen } = useContext(LayoutContext)\r\n\r\n  const [anchorsOnPage, setAnchorsOnPage] = useState([])\r\n  const [anchorsLoaded, setAnchorsLoaded] = useState(false)\r\n  const [anchorUpdate, setAnchorUpdate] = useState([])\r\n\r\n  const [intialAnchorLinkSet, setIntialAnchorLinkSet] = useState(false)\r\n\r\n  // const [sidebarOpen, setSidebarOpen] = useState(true)\r\n  const [wideScreen, setWideScreen] = useState(false)\r\n  const { width } = useWindowDimensions()\r\n\r\n  const location = useLocation()\r\n  const { pathname } = location\r\n\r\n  // ok every time something enteres or leaves, update\r\n  // the anchors in view\r\n  useEffect(() => {\r\n    const els = document.querySelectorAll(\".anchor-link\")\r\n\r\n    const observerCallback = (entries, observer, header) => {\r\n      const newAnchorInfo = []\r\n      entries.forEach((entry, i) => {\r\n        const to = entry.target.href.split(\"#\")[1]\r\n        const path = pathname.slice(0, -1)\r\n        const anchorString = `${path} ${to}`\r\n\r\n        if (entry.isIntersecting) {\r\n          newAnchorInfo.push({\r\n            anchorString,\r\n            inView: true,\r\n            offsetTop: entry.target.offsetTop\r\n          })\r\n        } else {\r\n          newAnchorInfo.push({\r\n            anchorString,\r\n            inView: false,\r\n            offsetTop: entry.target.offsetTop\r\n          })\r\n        }\r\n      })\r\n\r\n      setAnchorUpdate(newAnchorInfo)\r\n    }\r\n\r\n    const observer = new window.IntersectionObserver(observerCallback, {\r\n      root: null,\r\n      threshold: 0.5 // set offset 0.1 means trigger if atleast 10% of element in viewport\r\n    })\r\n\r\n    els.forEach((el) => {\r\n      observer.observe(el)\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (anchorUpdate.length && !anchorsLoaded) {\r\n      setAnchorsOnPage(anchorUpdate)\r\n      setAnchorsLoaded(true)\r\n    }\r\n  }, [anchorUpdate, anchorsLoaded])\r\n\r\n  // eh, there might be a better way to do this but\r\n  // by the time I got here I was like \"It works, and it's good enough!\"\r\n  useEffect(() => {\r\n    // to prevent infinite reloading, only update if there is a non-empty update, and then set the update to empty if done\r\n    if (anchorsLoaded && anchorUpdate.length) {\r\n      let newAnchorsOnPage = [...anchorsOnPage]\r\n      anchorUpdate.forEach((anchorInfo) => {\r\n        const index = anchorsOnPage.findIndex((anchor) => {\r\n          return anchorInfo.anchorString == anchor.anchorString\r\n        })\r\n\r\n        if (index >= 0) {\r\n          newAnchorsOnPage.splice(index, 1, anchorInfo)\r\n        }\r\n      })\r\n\r\n      setAnchorsOnPage(newAnchorsOnPage)\r\n      setAnchorUpdate([])\r\n\r\n      if (hasScrolled) {\r\n        let smallestTopOffset = Number.POSITIVE_INFINITY\r\n        let indexOfSmallestOffset = -1\r\n        newAnchorsOnPage.forEach((anchor, i) => {\r\n          if (anchor.inView && anchor.offsetTop < smallestTopOffset) {\r\n            smallestTopOffset = anchor.offsetTop\r\n            indexOfSmallestOffset = i\r\n          }\r\n        })\r\n\r\n        if (indexOfSmallestOffset >= 0) {\r\n          const newActiveAnchorInfo = newAnchorsOnPage[indexOfSmallestOffset]\r\n          setActiveAnchor(newActiveAnchorInfo.anchorString)\r\n        } else {\r\n          // if we're here, there's no anchors vidible on screen\r\n          setActiveAnchor(\"\")\r\n        }\r\n      }\r\n    }\r\n  }, [anchorsOnPage, anchorUpdate, anchorsLoaded, hasScrolled])\r\n\r\n  useEffect(() => {\r\n    if (location.search && !intialAnchorLinkSet) {\r\n      const urlParams = new URLSearchParams(location.search)\r\n      const anchorLink = urlParams.get(\"anchor\")\r\n      if (anchorLink) {\r\n        const tag = document.getElementById(anchorLink)\r\n        if (tag) {\r\n          tag.scrollIntoView({ behavior: \"smooth\" })\r\n\r\n          const path = pathname.slice(0, -1)\r\n          setActiveAnchor(`${path} ${anchorLink}`)\r\n        }\r\n      }\r\n      setIntialAnchorLinkSet(true)\r\n    } else if (anchorsLoaded && !intialAnchorLinkSet) {\r\n      // just set the active anchor link to the highest link in view\r\n      // pretty sure it's just gonna be the firs one that's \"in view\"\r\n      // and if the first one is in view, it's gonna be that one so ..\r\n      let firstAnchor = anchorsOnPage[0]\r\n\r\n      if (firstAnchor.inView) {\r\n        setActiveAnchor(firstAnchor.anchorString)\r\n      }\r\n\r\n      setIntialAnchorLinkSet(true)\r\n    }\r\n  }, [anchorsLoaded, anchorsOnPage, intialAnchorLinkSet])\r\n\r\n  useEffect(() => {\r\n    if (width > 768) {\r\n      setWideScreen(true)\r\n    } else {\r\n      setWideScreen(false)\r\n    }\r\n  }, [width])\r\n\r\n  useEffect(() => {\r\n    setSidebarOpen(true)\r\n  }, [wideScreen])\r\n\r\n  // organize alphabetically\r\n  // then loop the map and fill in the links and sublinks\r\n  console.log(\"SIDEBAR DATA IS\")\r\n  console.log(sidebarData)\r\n\r\n  if (!sidebarData) {\r\n    return <>{`No sidebar data for path ${pathname}`}</>\r\n  }\r\n\r\n  const { path, nodes } = sidebarData\r\n  const rootDocArr = []\r\n  const categoryArr = []\r\n  const categoryMap = {}\r\n  nodes.forEach((node) => {\r\n    const {\r\n      frontmatter: { category, title, slug, order, isCategoryRoot, anchorLinks }\r\n    } = node\r\n    if (!category) {\r\n      // don't give a slug of \"index\" part of the path here ..\r\n      // the path will just be /docs/ or /customize/ etc\r\n      // this is different for the categories\r\n      const pathName = slug === \"index\" ? `/${path}` : `/${path}/${slug}`\r\n      rootDocArr.push({\r\n        title,\r\n        path: pathName,\r\n        sublinks: null,\r\n        order,\r\n        anchorLinks\r\n      })\r\n    } else {\r\n      if (!categoryMap[category]) {\r\n        categoryMap[category] = []\r\n      }\r\n\r\n      if (isCategoryRoot) {\r\n        categoryArr.push({\r\n          title, // uppercase the first letter later\r\n          categoryName: category, // in case I change it from the title\r\n          isCategoryRoot: true,\r\n          path: `/${path}/${slug}`,\r\n          sublinks: null, // get changed into an array later\r\n          order,\r\n          anchorLinks\r\n        })\r\n      } else {\r\n        categoryMap[category].push({\r\n          title,\r\n          path: `/${path}/${slug}`,\r\n          order,\r\n          anchorLinks\r\n        })\r\n      }\r\n    }\r\n  })\r\n\r\n  // ok now loop through the sidebarLinkArr. If there's sublinks, fil them in\r\n\r\n  categoryArr.forEach((entry) => {\r\n    const category = entry.categoryName\r\n    entry.sublinks = categoryMap[category]\r\n  })\r\n\r\n  // the root docs will go first, sorted by an order property,  and then the categories\r\n  // in alphabetical order, and then the sublinks (in a category) are sorted by a frontmatter \"order\" property\r\n  // the anchor links are already determined in the frontmatter defintion\r\n  rootDocArr.sort((a, b) => a.order - b.order)\r\n  categoryArr.sort((a, b) => {\r\n    return a.order - b.order\r\n  })\r\n\r\n  categoryArr.forEach((item) => {\r\n    const { sublinks } = item\r\n\r\n    if (sublinks) {\r\n      sublinks.sort((a, b) => {\r\n        return a.order - b.order\r\n      })\r\n    }\r\n  })\r\n\r\n  const sidebarLinkArr = [...rootDocArr, ...categoryArr]\r\n\r\n  // capitalize category name\r\n  // .. hm.. oh yeah. Fix anchor links\r\n\r\n  return (\r\n    <>\r\n      <div className=\"w-0\">\r\n        <div\r\n          onClick={() => setSidebarOpen(true)}\r\n          className={`${\r\n            sidebarOpen ? \"display-none\" : \"display-flex\"\r\n          } text-xl w-3 h-3 position-relative top-1 left-1 radius-full cursor-pointer shadow-magenta-lg hover:shadow-blue-lg bg-background-ltr items-center justify-center bg-background z-5 text-magenta hover:text-blue`}\r\n        >\r\n          <FontAwesomeIcon icon={faBars} />\r\n        </div>\r\n      </div>\r\n      <div\r\n        id=\"sidebar\"\r\n        className={`${\r\n          layoutStyles.sidebar\r\n        }  max-tab:position-absolute max-tab:h-full min-w-1/4 max-tab:w-20 overflow-y-scroll bg-background z-4  ${\r\n          sidebarOpen ? \"\" : \"display-none\"\r\n        }`}\r\n      >\r\n        <nav className=\"p-md\">\r\n          <span className={`${wideScreen ? \"display-none\" : \"\"} `}>\r\n            <FontAwesomeIcon\r\n              className={`cursor-pointer hover:text-magenta text-magenta hover:text-blue text-lg py-sm`}\r\n              onClick={() => setSidebarOpen(false)}\r\n              icon={faX}\r\n            />\r\n          </span>\r\n          <ul className=\"display-flex flex-col line-height-lg\">\r\n            {sidebarLinkArr.map((entry) => {\r\n              const {\r\n                isCategoryRoot,\r\n                categoryName,\r\n                path,\r\n                title,\r\n                sublinks,\r\n                anchorLinks\r\n              } = entry\r\n\r\n              if (isCategoryRoot) {\r\n                const upperCaseTitle =\r\n                  title.charAt(0).toUpperCase() + title.slice(1)\r\n\r\n                const highlightLink =\r\n                  `${process.env.PATH_PREFIX}${path}/` === pathname\r\n\r\n                return (\r\n                  <li key={`${path} ${title}`}>\r\n                    <span\r\n                      className={`${\r\n                        highlightLink ? \"text-magenta\" : \"\"\r\n                      } font-large hover:text-magenta `}\r\n                    >\r\n                      <Link to={path}>{upperCaseTitle}</Link>\r\n                    </span>\r\n                    {anchorLinks && (\r\n                      <ul className=\"line-height-md \">\r\n                        {anchorLinks.map((anchorLink, i) => {\r\n                          // name of is a bit different, I don't think anchor links are a full \"path\" (might need to refacto later)\r\n                          const { title, link } = anchorLink\r\n\r\n                          return (\r\n                            <li\r\n                              key={`${title} ${link}`}\r\n                              className={`pl-md text-md ${\r\n                                i == anchorLinks.length - 1 ? \"mb-xs\" : \"\"\r\n                              } `}\r\n                            >\r\n                              <CustomAnchor path={path} to={link}>\r\n                                {title}\r\n                              </CustomAnchor>\r\n                            </li>\r\n                          )\r\n                        })}\r\n                      </ul>\r\n                    )}\r\n                    {sublinks && (\r\n                      <ul>\r\n                        {sublinks.map((link, i) => {\r\n                          const { title, path: subLinkPath, anchorLinks } = link\r\n\r\n                          const highlightLink =\r\n                            `${process.env.PATH_PREFIX}${subLinkPath}/` ===\r\n                            pathname\r\n\r\n                          return (\r\n                            <li\r\n                              key={`${title} ${subLinkPath}`}\r\n                              className={`pl-md font-normal   ${\r\n                                i == sublinks.length - 1 ? \"mb-xs\" : \"\"\r\n                              }`}\r\n                            >\r\n                              <span\r\n                                className={`${\r\n                                  highlightLink ? \"text-magenta\" : \"\"\r\n                                } font-bold hover:text-magenta`}\r\n                              >\r\n                                <Link to={subLinkPath}>{title}</Link>\r\n                              </span>\r\n\r\n                              {anchorLinks && (\r\n                                <ul className=\"line-height-md \">\r\n                                  {anchorLinks.map((anchorLink) => {\r\n                                    // name of is a bit different, I don't think anchor links are a full \"path\" (might need to refacto later)\r\n                                    const { title, link } = anchorLink\r\n\r\n                                    return (\r\n                                      <li\r\n                                        key={`${title} ${link}`}\r\n                                        className=\"pl-md text-md hover:text-magenta\"\r\n                                      >\r\n                                        <CustomAnchor\r\n                                          path={subLinkPath}\r\n                                          to={link}\r\n                                        >\r\n                                          {title}\r\n                                        </CustomAnchor>\r\n                                      </li>\r\n                                    )\r\n                                  })}\r\n                                </ul>\r\n                              )}\r\n                            </li>\r\n                          )\r\n                        })}\r\n                      </ul>\r\n                    )}\r\n                  </li>\r\n                )\r\n              }\r\n\r\n              const upperCaseTitle =\r\n                title.charAt(0).toUpperCase() + title.slice(1)\r\n\r\n              const highlightLink =\r\n                `${process.env.PATH_PREFIX}${path}/` === pathname\r\n\r\n              return (\r\n                <li key={`${path} ${title}`}>\r\n                  <span\r\n                    className={`${\r\n                      highlightLink ? \"text-magenta\" : \"\"\r\n                    } font-large hover:text-magenta`}\r\n                  >\r\n                    <Link to={path}>{title}</Link>\r\n                  </span>\r\n                </li>\r\n              )\r\n            })}\r\n          </ul>\r\n        </nav>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SideBar\r\n","import React, { useState, useContext } from \"react\"\r\nimport Footer from \"./Footer\"\r\nimport SideBar from \"./Sidebar\"\r\nimport LayoutContext from \"./LayoutContext\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\nimport * as layoutStyles from \"./layout.module.scss\"\r\nimport SidebarContext from \"./SidebarContext\"\r\n// not sure how best to pass the sidebar and the content\r\n\r\nconst SidebarLayout = ({ pathname, children }) => {\r\n  // context state\r\n  const { sidebarOpen, setSidebarOpen } = useContext(LayoutContext)\r\n\r\n  const [hasScrolled, setHasScrolled] = useState(false)\r\n  const [activeAnchor, setActiveAnchor] = useState(\"\")\r\n\r\n  const { docs, components, customize } = useStaticQuery(graphql`\r\n    query HeaderQuery {\r\n      docs: allMdx(filter: { frontmatter: { type: { eq: \"docs\" } } }) {\r\n        nodes {\r\n          id\r\n          frontmatter {\r\n            title\r\n            slug\r\n            category\r\n            order\r\n            isCategoryRoot\r\n            anchorLinks {\r\n              title\r\n              link\r\n            }\r\n          }\r\n        }\r\n      }\r\n      # components: allMdx(\r\n      #   filter: { frontmatter: { type: { eq: \"components\" } } }\r\n      # ) {\r\n      #   nodes {\r\n      #     id\r\n      #     frontmatter {\r\n      #       title\r\n      #       slug\r\n      #       category\r\n      #       order\r\n      #       isCategoryRoot\r\n      #       anchorLinks {\r\n      #         title\r\n      #         link\r\n      #       }\r\n      #     }\r\n      #   }\r\n      # }\r\n      customize: allMdx(\r\n        filter: { frontmatter: { type: { eq: \"customize\" } } }\r\n      ) {\r\n        nodes {\r\n          id\r\n          frontmatter {\r\n            title\r\n            slug\r\n            category\r\n            order\r\n            isCategoryRoot\r\n            anchorLinks {\r\n              title\r\n              link\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  // const pathParts = pathname.split(\"/\")\r\n  // const section = pathParts.length && pathname.split(\"/\")[1] // this should always be defined in this route but let;s be careful\r\n\r\n  let path_prefix = process.env.PATH_PREFIX\r\n    ? process.env.PATH_PREFIX\r\n    : process.env.GATSBY_PATH_PREFIX // make a .env.development file and put GAtSBY\r\n\r\n  let sidebarData\r\n\r\n  console.log(\"TIME TO DEBUG\")\r\n  console.log(sidebarData)\r\n  console.log(`${path_prefix}docs`)\r\n  console.log(process.env)\r\n  console.log(process.env.GATSBY_PATH_PREFIX)\r\n  console.log(process.env.PATH_PREFIX)\r\n\r\n  // this might be kinda janky code .. but I don't wanna spend forever trying to think about an alternative way\r\n  if (pathname.startsWith(`${path_prefix}docs`)) {\r\n    sidebarData = { path: \"docs\", ...docs }\r\n  } else if (pathname.startsWith(`${path_prefix}customize`)) {\r\n    sidebarData = { path: \"customize\", ...customize }\r\n  }\r\n\r\n  return (\r\n    <div id=\"sidebar-layout\" className=\"display-flex min-w-full grow-1\">\r\n      <SidebarContext.Provider\r\n        value={{\r\n          activeAnchor,\r\n          setActiveAnchor,\r\n          hasScrolled,\r\n          setHasScrolled\r\n        }}\r\n      >\r\n        <SideBar sidebarData={sidebarData} />\r\n        <div\r\n          id=\"docs-section\"\r\n          className={`display-flex flex-col grow-1 overflow-y-scroll position-relative ${layoutStyles.docsSection}`}\r\n          onWheel={() => {\r\n            setHasScrolled(true)\r\n          }}\r\n          // remember to test this on mobile\r\n          onTouchStart={() => {\r\n            setHasScrolled(true)\r\n          }}\r\n        >\r\n          <div\r\n            id=\"small-width-overlay\"\r\n            className={`display-none ${\r\n              sidebarOpen ? \"max-tab:display-block\" : \"\"\r\n            } position-fixed top-0 left-0 w-full h-full z-3 bg-black opacity-10`}\r\n          />\r\n          <div\r\n            id=\"the-document\"\r\n            className={`grow-1 pl-xl p-lg w-19/20 max-w-container lg:mx-auto   ${\r\n              sidebarOpen ? \"max-tab:filter-blur-md\" : \"\"\r\n            }`}\r\n          >\r\n            {children}\r\n          </div>\r\n          <Footer />\r\n        </div>\r\n      </SidebarContext.Provider>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SidebarLayout\r\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","h4","p","code","pre","a","h2","_provideComponents","components","React","CodeWrapper","title","isFile","className","href","FontAwesomeIcon","icon","faSun","wrapper","MDXLayout","DocumentPage","_ref","location","data","mdx","children","pathname","includes","Layout","onSideBarPage","SidebarLayout","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","addExtraMarginUnderTitle","createContext","hasScrolled","setHasScrolled","activeAnchor","setActiveAnchor","path","to","useLocation","useContext","SidebarContext","active","setActive","useState","useEffect","process","PATH_PREFIX","onClick","document","getElementById","scrollIntoView","behavior","navigate","sidebarData","sidebarOpen","setSidebarOpen","LayoutContext","anchorsOnPage","setAnchorsOnPage","anchorsLoaded","setAnchorsLoaded","anchorUpdate","setAnchorUpdate","intialAnchorLinkSet","setIntialAnchorLinkSet","wideScreen","setWideScreen","width","useWindowDimensions","els","querySelectorAll","observer","window","IntersectionObserver","observerCallback","entries","header","newAnchorInfo","forEach","entry","i","target","split","anchorString","slice","isIntersecting","push","inView","offsetTop","root","threshold","el","observe","length","newAnchorsOnPage","_toConsumableArray","anchorInfo","index","findIndex","anchor","splice","smallestTopOffset","Number","POSITIVE_INFINITY","indexOfSmallestOffset","newActiveAnchorInfo","search","anchorLink","URLSearchParams","get","tag","firstAnchor","console","log","nodes","rootDocArr","categoryArr","categoryMap","node","frontmatter","category","slug","order","isCategoryRoot","anchorLinks","categoryName","sublinks","pathName","sort","b","item","sidebarLinkArr","concat","faBars","id","faX","map","upperCaseTitle","charAt","toUpperCase","highlightLink","key","Link","link","CustomAnchor","subLinkPath","docs","customize","useStaticQuery","path_prefix","startsWith","Provider","value","SideBar","onWheel","onTouchStart","Footer"],"sourceRoot":""}