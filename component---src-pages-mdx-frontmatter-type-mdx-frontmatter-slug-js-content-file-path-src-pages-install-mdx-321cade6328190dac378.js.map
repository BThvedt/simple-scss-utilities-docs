{"version":3,"file":"component---src-pages-mdx-frontmatter-type-mdx-frontmatter-slug-js-content-file-path-src-pages-install-mdx-321cade6328190dac378.js","mappings":"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","sources":["webpack://simple-scss-utilities/./src/pages/install.mdx","webpack://simple-scss-utilities/./src/components/Mdx/CodeWrapper.js","webpack://simple-scss-utilities/./src/components/Layout/SidebarContext.js","webpack://simple-scss-utilities/./src/components/Layout/CustomAnchor.js","webpack://simple-scss-utilities/./src/components/Layout/Sidebar.js","webpack://simple-scss-utilities/./src/components/Layout/SidebarLayout.js","webpack://simple-scss-utilities/./src/pages/{mdx.frontmatter__type}/{mdx.frontmatter__slug}.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport ImportedLayout from \"../components/Layout/Layout\";\nimport CodeWrapper from \"../../src/components/Mdx/CodeWrapper\";\nconst MDXLayout = function Layout({children}) {\n  const _components = Object.assign({\n    main: \"main\"\n  }, _provideComponents());\n  return React.createElement(ImportedLayout, null, React.createElement(_components.main, {\n    className: \"p-xl\"\n  }, children));\n};\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h4: \"h4\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"Installing Simple Scss Utilities\"), \"\\n\", React.createElement(_components.h4, null, \"Not tough, if you're familiar with SCSS and NPM\"), \"\\n\", React.createElement(\"div\", {\n    className: \"max-w-42 mx-auto text-lg line-height-xl\"\n  }, React.createElement(_components.p, null, \"Confession time: I left this project before I finished the docs because I got a web developer job. However, I decided to come back to it and try to use it for an actual project. I learned a few things about configuring the gulpfile when I did.\"), React.createElement(_components.p, null, \"So, let'ss start with a simple example, then switch to a more realistic exmpale. Preresiqute: I assume if you're reading this you're probably familar with NPM.\"), React.createElement(_components.h4, null, \"Start Here: A simple example\"), React.createElement(_components.p, null, \"Once you understand all the lines in this simple example, you can move onto the real example I provide. Then, (especially with the help of AI which wasn't really widely used when I first made this), you will be ready to taylor the gulpfile to yoru needs.\"), React.createElement(_components.p, null, \"The first step would be to clone the base scss files into your project, wherever you want to put them:\"), React.createElement(CodeWrapper, {\n    title: \"Clone the repo\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"git clone https://github.com/BThvedt/simple-scss-utilities\\n\"))), React.createElement(_components.p, null, \"The next step is to install the npm files that are required:\"), React.createElement(CodeWrapper, {\n    title: \"Install NPM Packages\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"npm init\\r\\nnpm install gulp gulp-sass sass gulp-purgecss\\n\"))), React.createElement(_components.p, null, \"You also might need to install \", React.createElement(_components.code, null, \"gulp-cli\"), \" in order to make the gulp commmands work. For NPM init, I'm using the 'commonjs' syntax for requires, I believe for my version (Node v 22 and NPM v 10) it's still the default setting.\"), React.createElement(_components.p, null, \"Ok. Then in whatever directory you decided to install, it's time to make a gulp file. Here's the basic example:\"), React.createElement(\"div\", {\n    className: \"text-md line-height-md\"\n  }, React.createElement(CodeWrapper, {\n    title: \"gulpfile.js\",\n    addExtraMarginUnderTitle: \"True\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-JS\"\n  }, \"\\r\\nconst { src, dest, watch, series } = require(\\\"gulp\\\")\\r\\nconst sass = require(\\\"gulp-sass\\\")(require(\\\"sass\\\"))\\r\\nconst purgecss = require(\\\"gulp-purgecss\\\")\\r\\n\\r\\nfunction buildStyles() {\\r\\n  return src(\\\"simple-scss-utilities/**/*.scss\\\")\\r\\n    .pipe(sass())\\r\\n    .pipe(\\r\\n      purgecss({\\r\\n        content: [\\\"src/**/*.js\\\", \\\"content/**/*.mdx\\\"],\\r\\n        defaultExtractor: (content) => {\\r\\n          const defaultSelectors = content.match(/[A-Za-z0-9_-]+/g) || []\\r\\n          const extendedSelectors = content.match(/[^<>\\\"=\\\\s]+/g) || []\\r\\n          return defaultSelectors.concat(extendedSelectors)\\r\\n        }\\r\\n      })\\r\\n    )\\r\\n    .pipe(dest(\\\"src/css\\\"))\\r\\n}\\r\\n\\r\\nfunction watchTask() {\\r\\n  watch([\\\"simple-scss-utilities/**/*.scss\\\", \\\"*.html\\\"], buildStyles)\\r\\n}\\r\\n\\r\\nexports.watch = series(buildStyles, watchTask)\\r\\n\\n\")))), React.createElement(_components.p, null, \"I'd like to call out the important lines. This is very similar to the actual file I used for this site, with a couple important exceptions. This site is built in gatsby, with .mdx and js files. So if we loook at the \", React.createElement(_components.code, null, \"buildStyles()\"), \" funciton, you can see we're taking our source (which is all the .scss files inside the simple scss utilities folder, the path is relative to the .gulpfile), and piping it through the sass() function which basically compiles the sass into css.\"), React.createElement(_components.p, null, \"THEN, we're purging the unused classes, so I look in all the .js and .mdx files, in the \", React.createElement(_components.code, null, \"src/**/*.jos\"), \" and \", React.createElement(_components.code, null, \"content/**/*.mdx\"), \" and call a function called \", React.createElement(_components.code, null, \"purgecss()\"), \" (which is very important - I have an entire rant on how important it is somewehre else on this site) which uses a couple regex patterns to find selectors, then whatever isn't used iss purged from the final css file living in \", React.createElement(_components.code, null, \"src/css\"), \" (I think the default filename is index.css)\"), React.createElement(_components.p, null, \"Then finally we have a watchtask. I'm watching the \", React.createElement(_components.code, null, \"simple-scss-utilities\"), \" folder (because I was touching it up alongside making this site) as well as an \", React.createElement(_components.code, null, \".html\"), \" file for some reason. I can't remember why I did it like that. Nevertheless, it's not hard to see what it does. It actively watches the files specified, and runs the function that compiles and purges the styles.\"), React.createElement(_components.p, null, \"The command from the command line will build and purge it all:\"), React.createElement(CodeWrapper, {\n    title: \"Run Gulp\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"gulp watch\\n\"))), React.createElement(_components.p, null, \"The only thing to do would be to add the resulting css file to your site, and you'd have your utility classes.\"), React.createElement(_components.p, null, \"However, this is not a realistic example for several reasons:\"), React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"The entire point of these utility classes is to handle 80% of the styling, the rest should be handled by the user in very slim, very lightweight .scss files. So you would probably need to watch multiple directories.\"), \"\\n\", React.createElement(_components.li, null, \"The purge function just takes too long to run on some underpowered machines (like mine)\"), \"\\n\"), React.createElement(_components.h4, null, \"A more practical example\"), React.createElement(_components.p, null, \"So let's make some tweaks and dive into a more real example. This is an example I'm using on a current project. It's a drupal site (a PHP Content management framework) and I've got a custom module to add react elements to the site as well as a lot of .twig files (a markup template engine) for the site's templatle. So what the file would have to do is:\"), React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"watch all the .js and .twig files\"), \"\\n\", React.createElement(_components.li, null, \"not take a long time\"), \"\\n\", React.createElement(_components.li, null, \"compile both the simple-scss-utilities classes as well as another directory of .scss files for custom non-utility stylese\"), \"\\n\"), React.createElement(_components.p, null, \"So for a strategy, I break the file apart into three commands:\"), React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"build: gets the simple-scss-utilities files ready to use (unpurged)\"), \"\\n\", React.createElement(_components.li, null, \"watch: watches just the custom styles\"), \"\\n\", React.createElement(_components.li, null, \"purge: Purges the scss files (run before deploy) - reduces nearly a Megabyte of css into typically just a few KB\"), \"\\n\"), React.createElement(_components.p, null, \"I will also use caching and cleaning to touch up a few loose ends. So first thing to do would be to install a few new packages:\"), React.createElement(CodeWrapper, {\n    title: \"A couple more packages\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"npm install gulp-concat gulp-clean-css gulp-cached\\n\"))), React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"gulp-concat will help us specify names for the generated css files\"), \"\\n\", React.createElement(_components.li, null, \"gulp-clean-css will help us simplify the generated files\"), \"\\n\", React.createElement(_components.li, null, \"and gulp cached will only look for file changes (I guess it's not that important in the end but I have it in there haha)\"), \"\\n\"), React.createElement(_components.p, null, \"Here is the new gulpfile\"), React.createElement(\"div\", {\n    className: \"text-md line-height-md\"\n  }, React.createElement(CodeWrapper, {\n    title: \"gulpfile.js\",\n    addExtraMarginUnderTitle: \"True\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-JS\"\n  }, \"\\r\\nconst { src, dest, watch, series, parallel } = require(\\\"gulp\\\");\\r\\nconst sass = require(\\\"gulp-sass\\\")(require(\\\"sass\\\"));\\r\\nconst purgecss = require(\\\"gulp-purgecss\\\");\\r\\nconst concat = require(\\\"gulp-concat\\\");\\r\\nconst cleanCSS = require(\\\"gulp-clean-css\\\");\\r\\nconst cached = require(\\\"gulp-cached\\\");\\r\\n\\r\\n// Build raw utility styles without purging\\r\\nfunction buildSSU() {\\r\\n  return src(\\\"simple-scss-utilities/**/*.scss\\\")\\r\\n    .pipe(cached(\\\"build\\\")) // cache unpurged build\\r\\n    .pipe(sass())\\r\\n    .pipe(concat(\\\"ssu.css\\\"))\\r\\n    .pipe(dest(\\\"css\\\"));\\r\\n}\\r\\n\\r\\n// SCSS for global styles\\r\\nfunction buildGlobalStyles() {\\r\\n  return src(\\\"scss/**/*.scss\\\") // <-- your second folder\\r\\n    .pipe(cached(\\\"global\\\")) // only changed files\\r\\n    .pipe(sass())\\r\\n    .pipe(concat(\\\"style.css\\\"))\\r\\n    .pipe(cleanCSS())\\r\\n    .pipe(dest(\\\"css\\\"));\\r\\n}\\r\\n\\r\\n// SCSS with PurgeCSS\\r\\nfunction buildPurgedStyles() {\\r\\n  return src(\\\"simple-scss-utilities/**/*.scss\\\")\\r\\n    .pipe(cached(\\\"styles\\\")) // only changed files\\r\\n    .pipe(sass())\\r\\n    .pipe(\\r\\n      purgecss({\\r\\n        content: [\\r\\n          \\\"../../modules/custom/react_components/**/*.js\\\",\\r\\n          \\\"./templates/**/*.twig\\\",\\r\\n        ],\\r\\n        defaultExtractor: (content) => {\\r\\n          const defaultSelectors = content.match(/[A-Za-z0-9_-]+/g) || [];\\r\\n          const extendedSelectors = content.match(/[^<>\\\"=\\\\s]+/g) || [];\\r\\n          return defaultSelectors.concat(extendedSelectors);\\r\\n        },\\r\\n      })\\r\\n    )\\r\\n    .pipe(concat(\\\"ssu.css\\\"))\\r\\n    .pipe(dest(\\\"css\\\"));\\r\\n}\\r\\n\\r\\nexports.build = parallel(buildSSU, buildGlobalStyles);\\r\\nexports.watch = () => {\\r\\n  watch(\\\"scss/**/*.scss\\\", buildGlobalStyles);\\r\\n};\\r\\nexports.purge = buildPurgedStyles;\\r\\n\\r\\n\\n\")))), React.createElement(_components.p, null, \"So the first thing probalby to notice is the exports at the bottom, I break everything apart into 3 seperate functions. Also notice I'm watching multiple scss directories and generating multiple css files. asdf\"), React.createElement(_components.p, null, \"To use, first you would run: \", React.createElement(_components.code, null, \"gulp build\"), \". This runs the \", React.createElement(_components.code, null, \"buildSSU\"), \" and \", React.createElement(_components.code, null, \"buildGlobalStyles\"), \" functions, which should compile everything into two files: \", React.createElement(_components.code, null, \"style.css\"), \" and \", React.createElement(_components.code, null, \"ssu.css\"), \" . You would want to add these to your project, using whatever means is approperate. The \", React.createElement(_components.code, null, \"cleanCSS()\"), \" function in \", React.createElement(_components.code, null, \"buildGlobalStyles\"), \" allows everything to go into a single file (by default it was mirroring the structure of my custom .scss directory, which uses folders and subfolders for the various .scss files to go along with each template file my site uses, but I would just want one .css file)\"), React.createElement(_components.p, null, \"Then, in development, I'd run \", React.createElement(_components.code, null, \"gulp watch\"), \". This ONLY watches my custom .scss directory, which speeds things up quite a bit. In theory, I wouldn't need to edit the \", React.createElement(_components.code, null, \"simple-scss-utilities\"), \" directory at all, so why even bother with it?\"), React.createElement(_components.p, null, \"Finally, before deploying, I would run \", React.createElement(_components.code, null, \"gulp purgs\"), \". This purges all the unused simple-scss-utilities classes. I'm watching two directories, one for my react_components, and one for my .twig template files, and any class that's not in these directories will be thrwon out, turning the generated ssu.css file from nearly 900KB into something much, muchm much slimmer.\"), React.createElement(_components.p, null, \"Hopefully I didn't leave out any detail, and hopefully it's easy to see how to modify/extend these basic concepts into whatever use case you need!\")));\n}\nfunction MDXContent(props = {}) {\n  return React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props));\n}\nexport default MDXContent;\n","import React from \"react\"\r\n\r\n// I decided to keep this seperate from CodeBlock.js, which which taken from examples give by how to use prisimjs in MDX around the interent\r\n// This is just a wrapper for code blocks, displays the filename or language, plus whatever else might be necessary in the future\r\n\r\n// a results block might be good too\r\n\r\nconst CodeWrapper = ({ children, title, isFile, addExtraMarginUnderTitle }) => {\r\n  return (\r\n    <div className=\"mt-lg mb-2xl mr-2\">\r\n      <h6\r\n        className={`font-large text-lg position-relative left-1px ${\r\n          addExtraMarginUnderTitle ? \"mb-md\" : \"mb-xs\"\r\n        }`}\r\n      >\r\n        {isFile ? \"File: \" : \"\"}\r\n        {title}\r\n      </h6>\r\n      <div className=\"mr-md\">{children}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CodeWrapper\r\n","import { createContext } from \"react\"\r\n\r\nconst SidebarContext = createContext({\r\n  hasScrolled: false,\r\n  setHasScrolled: () => {}, // keep track if the scrolling was done by the user\r\n\r\n  activeAnchor: \"\", // '${path} ${to} of active anchor link'\r\n  setActiveAnchor: () => {}\r\n})\r\n\r\nexport default SidebarContext\r\n","import React, { useState, useEffect, useContext } from \"react\"\r\nimport SidebarContext from \"./SidebarContext\"\r\nimport { useLocation } from \"@reach/router\"\r\nimport { navigate } from \"gatsby\"\r\n\r\n/*\r\n  Gatsby seemed to have a little trouble with anchor links \r\n  Not only did they not seem to quite work but.. I also wanted to implement smooth scrolling\r\n  if you jump from page to page so I made my own component. \r\n  It's possible to make the URLs just slightly awkared if you\r\n  click directly on the link .. but.. they still work\r\n*/\r\nconst CustomAnchor = ({ children, path, to }) => {\r\n  const location = useLocation()\r\n  const { activeAnchor, setActiveAnchor, hasScrolled, setHasScrolled } =\r\n    useContext(SidebarContext)\r\n  const [active, setActive] = useState(false)\r\n  const { pathname } = location\r\n\r\n  useEffect(() => {\r\n    if (activeAnchor == `${process.env.PATH_PREFIX}${path} ${to}`) {\r\n      setActive(true)\r\n    } else {\r\n      setActive(false)\r\n    }\r\n  }, [activeAnchor])\r\n\r\n  // console.log(\r\n  //   `path: ${path} to: ${to} pathname: ${pathname} prefix with path: ${process.env.PATH_PREFIX}${path}`\r\n  // )\r\n\r\n  return (\r\n    <p\r\n      className={`${active ? \"font-bold\" : \"\"} cursor-pointer`}\r\n      onClick={() => {\r\n        // the pathname from location usually has an added slash\r\n\r\n        if (`${process.env.PATH_PREFIX}${path}/` == pathname) {\r\n          const tag = document.getElementById(to)\r\n          tag.scrollIntoView({ behavior: \"smooth\" })\r\n          // set \"hasScrolled\" to false .. gets set true if the user scrolls the docs area\r\n          setHasScrolled(false)\r\n\r\n          // in the MDX anchor componnnt, the text generates the id \"to\"\r\n          // two anchor links on different documents might have the same text so\r\n          // I have the path be part of the identifying string\r\n          // as long as 2 anchors on the same MDX page don't have the same text we're good\r\n          setActiveAnchor(`${process.env.PATH_PREFIX}${path} ${to}`)\r\n        } else {\r\n          navigate(`${path}?anchor=${to}`)\r\n        }\r\n      }}\r\n    >\r\n      {children}\r\n    </p>\r\n  )\r\n}\r\n\r\nexport default CustomAnchor\r\n","import React, { useState, useEffect, useContext } from \"react\"\r\nimport { Link } from \"gatsby\"\r\nimport { useLocation } from \"@reach/router\"\r\nimport CustomAnchor from \"./CustomAnchor\"\r\nimport SidebarContext from \"./SidebarContext\"\r\nimport LayoutContext from \"./LayoutContext\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faX, faBars } from \"@fortawesome/free-solid-svg-icons\"\r\nimport * as layoutStyles from \"./layout.module.scss\"\r\nimport useWindowDimensions from \"../../hooks/useWindowDimensions\"\r\n// HEADER IS A ReserveD WORD\r\n\r\nconst SideBar = ({ sidebarData }) => {\r\n  const { setActiveAnchor, hasScrolled } = useContext(SidebarContext)\r\n  const { sidebarOpen, setSidebarOpen } = useContext(LayoutContext)\r\n\r\n  const [anchorsOnPage, setAnchorsOnPage] = useState([])\r\n  const [anchorsLoaded, setAnchorsLoaded] = useState(false)\r\n  const [anchorUpdate, setAnchorUpdate] = useState([])\r\n\r\n  const [intialAnchorLinkSet, setIntialAnchorLinkSet] = useState(false)\r\n\r\n  // const [sidebarOpen, setSidebarOpen] = useState(true)\r\n  const [wideScreen, setWideScreen] = useState(false)\r\n  const { width } = useWindowDimensions()\r\n\r\n  const location = useLocation()\r\n  const { pathname } = location\r\n\r\n  // ok every time something enteres or leaves, update\r\n  // the anchors in view\r\n  useEffect(() => {\r\n    const els = document.querySelectorAll(\".anchor-link\")\r\n\r\n    const observerCallback = (entries, observer, header) => {\r\n      const newAnchorInfo = []\r\n      entries.forEach((entry, i) => {\r\n        const to = entry.target.href.split(\"#\")[1]\r\n        const path = pathname.slice(0, -1)\r\n        const anchorString = `${path} ${to}`\r\n\r\n        if (entry.isIntersecting) {\r\n          newAnchorInfo.push({\r\n            anchorString,\r\n            inView: true,\r\n            offsetTop: entry.target.offsetTop\r\n          })\r\n        } else {\r\n          newAnchorInfo.push({\r\n            anchorString,\r\n            inView: false,\r\n            offsetTop: entry.target.offsetTop\r\n          })\r\n        }\r\n      })\r\n\r\n      setAnchorUpdate(newAnchorInfo)\r\n    }\r\n\r\n    const observer = new window.IntersectionObserver(observerCallback, {\r\n      root: null,\r\n      threshold: 0.5 // set offset 0.1 means trigger if atleast 10% of element in viewport\r\n    })\r\n\r\n    els.forEach((el) => {\r\n      observer.observe(el)\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (anchorUpdate.length && !anchorsLoaded) {\r\n      setAnchorsOnPage(anchorUpdate)\r\n      setAnchorsLoaded(true)\r\n    }\r\n  }, [anchorUpdate, anchorsLoaded])\r\n\r\n  // eh, there might be a better way to do this but\r\n  // by the time I got here I was like \"It works, and it's good enough!\"\r\n  useEffect(() => {\r\n    // to prevent infinite reloading, only update if there is a non-empty update, and then set the update to empty if done\r\n    if (anchorsLoaded && anchorUpdate.length) {\r\n      let newAnchorsOnPage = [...anchorsOnPage]\r\n      anchorUpdate.forEach((anchorInfo) => {\r\n        const index = anchorsOnPage.findIndex((anchor) => {\r\n          return anchorInfo.anchorString == anchor.anchorString\r\n        })\r\n\r\n        if (index >= 0) {\r\n          newAnchorsOnPage.splice(index, 1, anchorInfo)\r\n        }\r\n      })\r\n\r\n      setAnchorsOnPage(newAnchorsOnPage)\r\n      setAnchorUpdate([])\r\n\r\n      if (hasScrolled) {\r\n        let smallestTopOffset = Number.POSITIVE_INFINITY\r\n        let indexOfSmallestOffset = -1\r\n        newAnchorsOnPage.forEach((anchor, i) => {\r\n          if (anchor.inView && anchor.offsetTop < smallestTopOffset) {\r\n            smallestTopOffset = anchor.offsetTop\r\n            indexOfSmallestOffset = i\r\n          }\r\n        })\r\n\r\n        if (indexOfSmallestOffset >= 0) {\r\n          const newActiveAnchorInfo = newAnchorsOnPage[indexOfSmallestOffset]\r\n          setActiveAnchor(newActiveAnchorInfo.anchorString)\r\n        } else {\r\n          // if we're here, there's no anchors vidible on screen\r\n          setActiveAnchor(\"\")\r\n        }\r\n      }\r\n    }\r\n  }, [anchorsOnPage, anchorUpdate, anchorsLoaded, hasScrolled])\r\n\r\n  useEffect(() => {\r\n    if (location.search && !intialAnchorLinkSet) {\r\n      const urlParams = new URLSearchParams(location.search)\r\n      const anchorLink = urlParams.get(\"anchor\")\r\n      if (anchorLink) {\r\n        const tag = document.getElementById(anchorLink)\r\n        if (tag) {\r\n          tag.scrollIntoView({ behavior: \"smooth\" })\r\n\r\n          const path = pathname.slice(0, -1)\r\n          setActiveAnchor(`${path} ${anchorLink}`)\r\n        }\r\n      }\r\n      setIntialAnchorLinkSet(true)\r\n    } else if (anchorsLoaded && !intialAnchorLinkSet) {\r\n      // just set the active anchor link to the highest link in view\r\n      // pretty sure it's just gonna be the firs one that's \"in view\"\r\n      // and if the first one is in view, it's gonna be that one so ..\r\n      let firstAnchor = anchorsOnPage[0]\r\n\r\n      if (firstAnchor.inView) {\r\n        setActiveAnchor(firstAnchor.anchorString)\r\n      }\r\n\r\n      setIntialAnchorLinkSet(true)\r\n    }\r\n  }, [anchorsLoaded, anchorsOnPage, intialAnchorLinkSet])\r\n\r\n  useEffect(() => {\r\n    if (width > 768) {\r\n      setWideScreen(true)\r\n    } else {\r\n      setWideScreen(false)\r\n    }\r\n  }, [width])\r\n\r\n  useEffect(() => {\r\n    setSidebarOpen(true)\r\n  }, [wideScreen])\r\n\r\n  // organize alphabetically\r\n  // then loop the map and fill in the links and sublinks\r\n  console.log(\"SIDEBAR DATA IS\")\r\n  console.log(sidebarData)\r\n\r\n  if (!sidebarData) {\r\n    return <>{`No sidebar data for path ${pathname}`}</>\r\n  }\r\n\r\n  const { path, nodes } = sidebarData\r\n  const rootDocArr = []\r\n  const categoryArr = []\r\n  const categoryMap = {}\r\n  nodes.forEach((node) => {\r\n    const {\r\n      frontmatter: { category, title, slug, order, isCategoryRoot, anchorLinks }\r\n    } = node\r\n    if (!category) {\r\n      // don't give a slug of \"index\" part of the path here ..\r\n      // the path will just be /docs/ or /customize/ etc\r\n      // this is different for the categories\r\n      const pathName = slug === \"index\" ? `/${path}` : `/${path}/${slug}`\r\n      rootDocArr.push({\r\n        title,\r\n        path: pathName,\r\n        sublinks: null,\r\n        order,\r\n        anchorLinks\r\n      })\r\n    } else {\r\n      if (!categoryMap[category]) {\r\n        categoryMap[category] = []\r\n      }\r\n\r\n      if (isCategoryRoot) {\r\n        categoryArr.push({\r\n          title, // uppercase the first letter later\r\n          categoryName: category, // in case I change it from the title\r\n          isCategoryRoot: true,\r\n          path: `/${path}/${slug}`,\r\n          sublinks: null, // get changed into an array later\r\n          order,\r\n          anchorLinks\r\n        })\r\n      } else {\r\n        categoryMap[category].push({\r\n          title,\r\n          path: `/${path}/${slug}`,\r\n          order,\r\n          anchorLinks\r\n        })\r\n      }\r\n    }\r\n  })\r\n\r\n  // ok now loop through the sidebarLinkArr. If there's sublinks, fil them in\r\n\r\n  categoryArr.forEach((entry) => {\r\n    const category = entry.categoryName\r\n    entry.sublinks = categoryMap[category]\r\n  })\r\n\r\n  // the root docs will go first, sorted by an order property,  and then the categories\r\n  // in alphabetical order, and then the sublinks (in a category) are sorted by a frontmatter \"order\" property\r\n  // the anchor links are already determined in the frontmatter defintion\r\n  rootDocArr.sort((a, b) => a.order - b.order)\r\n  categoryArr.sort((a, b) => {\r\n    return a.order - b.order\r\n  })\r\n\r\n  categoryArr.forEach((item) => {\r\n    const { sublinks } = item\r\n\r\n    if (sublinks) {\r\n      sublinks.sort((a, b) => {\r\n        return a.order - b.order\r\n      })\r\n    }\r\n  })\r\n\r\n  const sidebarLinkArr = [...rootDocArr, ...categoryArr]\r\n\r\n  // capitalize category name\r\n  // .. hm.. oh yeah. Fix anchor links\r\n\r\n  return (\r\n    <>\r\n      <div className=\"w-0\">\r\n        <div\r\n          onClick={() => setSidebarOpen(true)}\r\n          className={`${\r\n            sidebarOpen ? \"display-none\" : \"display-flex\"\r\n          } text-xl w-3 h-3 position-relative top-1 left-1 radius-full cursor-pointer shadow-magenta-lg hover:shadow-blue-lg bg-background-ltr items-center justify-center bg-background z-5 text-magenta hover:text-blue`}\r\n        >\r\n          <FontAwesomeIcon icon={faBars} />\r\n        </div>\r\n      </div>\r\n      <div\r\n        id=\"sidebar\"\r\n        className={`${\r\n          layoutStyles.sidebar\r\n        }  max-tab:position-absolute max-tab:h-full min-w-1/4 max-tab:w-20 overflow-y-scroll bg-background z-4  ${\r\n          sidebarOpen ? \"\" : \"display-none\"\r\n        }`}\r\n      >\r\n        <nav className=\"p-md\">\r\n          <span className={`${wideScreen ? \"display-none\" : \"\"} `}>\r\n            <FontAwesomeIcon\r\n              className={`cursor-pointer hover:text-magenta text-magenta hover:text-blue text-lg py-sm`}\r\n              onClick={() => setSidebarOpen(false)}\r\n              icon={faX}\r\n            />\r\n          </span>\r\n          <ul className=\"display-flex flex-col line-height-lg\">\r\n            {sidebarLinkArr.map((entry) => {\r\n              const {\r\n                isCategoryRoot,\r\n                categoryName,\r\n                path,\r\n                title,\r\n                sublinks,\r\n                anchorLinks\r\n              } = entry\r\n\r\n              if (isCategoryRoot) {\r\n                const upperCaseTitle =\r\n                  title.charAt(0).toUpperCase() + title.slice(1)\r\n\r\n                const highlightLink =\r\n                  `${process.env.PATH_PREFIX}${path}/` === pathname\r\n\r\n                return (\r\n                  <li key={`${path} ${title}`}>\r\n                    <span\r\n                      className={`${\r\n                        highlightLink ? \"text-magenta\" : \"\"\r\n                      } font-large hover:text-magenta `}\r\n                    >\r\n                      <Link to={path}>{upperCaseTitle}</Link>\r\n                    </span>\r\n                    {anchorLinks && (\r\n                      <ul className=\"line-height-md \">\r\n                        {anchorLinks.map((anchorLink, i) => {\r\n                          // name of is a bit different, I don't think anchor links are a full \"path\" (might need to refacto later)\r\n                          const { title, link } = anchorLink\r\n\r\n                          return (\r\n                            <li\r\n                              key={`${title} ${link}`}\r\n                              className={`pl-md text-md ${\r\n                                i == anchorLinks.length - 1 ? \"mb-xs\" : \"\"\r\n                              } `}\r\n                            >\r\n                              <CustomAnchor path={path} to={link}>\r\n                                {title}\r\n                              </CustomAnchor>\r\n                            </li>\r\n                          )\r\n                        })}\r\n                      </ul>\r\n                    )}\r\n                    {sublinks && (\r\n                      <ul>\r\n                        {sublinks.map((link, i) => {\r\n                          const { title, path: subLinkPath, anchorLinks } = link\r\n\r\n                          const highlightLink =\r\n                            `${process.env.PATH_PREFIX}${subLinkPath}/` ===\r\n                            pathname\r\n\r\n                          return (\r\n                            <li\r\n                              key={`${title} ${subLinkPath}`}\r\n                              className={`pl-md font-normal   ${\r\n                                i == sublinks.length - 1 ? \"mb-xs\" : \"\"\r\n                              }`}\r\n                            >\r\n                              <span\r\n                                className={`${\r\n                                  highlightLink ? \"text-magenta\" : \"\"\r\n                                } font-bold hover:text-magenta`}\r\n                              >\r\n                                <Link to={subLinkPath}>{title}</Link>\r\n                              </span>\r\n\r\n                              {anchorLinks && (\r\n                                <ul className=\"line-height-md \">\r\n                                  {anchorLinks.map((anchorLink) => {\r\n                                    // name of is a bit different, I don't think anchor links are a full \"path\" (might need to refacto later)\r\n                                    const { title, link } = anchorLink\r\n\r\n                                    return (\r\n                                      <li\r\n                                        key={`${title} ${link}`}\r\n                                        className=\"pl-md text-md hover:text-magenta\"\r\n                                      >\r\n                                        <CustomAnchor\r\n                                          path={subLinkPath}\r\n                                          to={link}\r\n                                        >\r\n                                          {title}\r\n                                        </CustomAnchor>\r\n                                      </li>\r\n                                    )\r\n                                  })}\r\n                                </ul>\r\n                              )}\r\n                            </li>\r\n                          )\r\n                        })}\r\n                      </ul>\r\n                    )}\r\n                  </li>\r\n                )\r\n              }\r\n\r\n              const upperCaseTitle =\r\n                title.charAt(0).toUpperCase() + title.slice(1)\r\n\r\n              const highlightLink =\r\n                `${process.env.PATH_PREFIX}${path}/` === pathname\r\n\r\n              return (\r\n                <li key={`${path} ${title}`}>\r\n                  <span\r\n                    className={`${\r\n                      highlightLink ? \"text-magenta\" : \"\"\r\n                    } font-large hover:text-magenta`}\r\n                  >\r\n                    <Link to={path}>{title}</Link>\r\n                  </span>\r\n                </li>\r\n              )\r\n            })}\r\n          </ul>\r\n        </nav>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SideBar\r\n","import React, { useState, useContext } from \"react\"\r\nimport Footer from \"./Footer\"\r\nimport SideBar from \"./Sidebar\"\r\nimport LayoutContext from \"./LayoutContext\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\nimport * as layoutStyles from \"./layout.module.scss\"\r\nimport SidebarContext from \"./SidebarContext\"\r\n// not sure how best to pass the sidebar and the content\r\n\r\nconst SidebarLayout = ({ pathname, children }) => {\r\n  // context state\r\n  const { sidebarOpen, setSidebarOpen } = useContext(LayoutContext)\r\n\r\n  const [hasScrolled, setHasScrolled] = useState(false)\r\n  const [activeAnchor, setActiveAnchor] = useState(\"\")\r\n\r\n  const { docs, components, customize } = useStaticQuery(graphql`\r\n    query HeaderQuery {\r\n      docs: allMdx(filter: { frontmatter: { type: { eq: \"docs\" } } }) {\r\n        nodes {\r\n          id\r\n          frontmatter {\r\n            title\r\n            slug\r\n            category\r\n            order\r\n            isCategoryRoot\r\n            anchorLinks {\r\n              title\r\n              link\r\n            }\r\n          }\r\n        }\r\n      }\r\n      # components: allMdx(\r\n      #   filter: { frontmatter: { type: { eq: \"components\" } } }\r\n      # ) {\r\n      #   nodes {\r\n      #     id\r\n      #     frontmatter {\r\n      #       title\r\n      #       slug\r\n      #       category\r\n      #       order\r\n      #       isCategoryRoot\r\n      #       anchorLinks {\r\n      #         title\r\n      #         link\r\n      #       }\r\n      #     }\r\n      #   }\r\n      # }\r\n      customize: allMdx(\r\n        filter: { frontmatter: { type: { eq: \"customize\" } } }\r\n      ) {\r\n        nodes {\r\n          id\r\n          frontmatter {\r\n            title\r\n            slug\r\n            category\r\n            order\r\n            isCategoryRoot\r\n            anchorLinks {\r\n              title\r\n              link\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  // const pathParts = pathname.split(\"/\")\r\n  // const section = pathParts.length && pathname.split(\"/\")[1] // this should always be defined in this route but let;s be careful\r\n\r\n  let path_prefix = process.env.PATH_PREFIX\r\n    ? process.env.PATH_PREFIX\r\n    : process.env.GATSBY_PATH_PREFIX // make a .env.development file and put GAtSBY\r\n\r\n  let sidebarData\r\n\r\n  console.log(\"TIME TO DEBUG\")\r\n  console.log(sidebarData)\r\n  console.log(`${path_prefix}docs`)\r\n  console.log(process.env)\r\n  console.log(process.env.GATSBY_PATH_PREFIX)\r\n  console.log(process.env.PATH_PREFIX)\r\n\r\n  // this might be kinda janky code .. but I don't wanna spend forever trying to think about an alternative way\r\n  if (pathname.startsWith(`${path_prefix}docs`)) {\r\n    sidebarData = { path: \"docs\", ...docs }\r\n  } else if (pathname.startsWith(`${path_prefix}customize`)) {\r\n    sidebarData = { path: \"customize\", ...customize }\r\n  }\r\n\r\n  return (\r\n    <div id=\"sidebar-layout\" className=\"display-flex min-w-full grow-1\">\r\n      <SidebarContext.Provider\r\n        value={{\r\n          activeAnchor,\r\n          setActiveAnchor,\r\n          hasScrolled,\r\n          setHasScrolled\r\n        }}\r\n      >\r\n        <SideBar sidebarData={sidebarData} />\r\n        <div\r\n          id=\"docs-section\"\r\n          className={`display-flex flex-col grow-1 overflow-y-scroll position-relative ${layoutStyles.docsSection}`}\r\n          onWheel={() => {\r\n            setHasScrolled(true)\r\n          }}\r\n          // remember to test this on mobile\r\n          onTouchStart={() => {\r\n            setHasScrolled(true)\r\n          }}\r\n        >\r\n          <div\r\n            id=\"small-width-overlay\"\r\n            className={`display-none ${\r\n              sidebarOpen ? \"max-tab:display-block\" : \"\"\r\n            } position-fixed top-0 left-0 w-full h-full z-3 bg-black opacity-10`}\r\n          />\r\n          <div\r\n            id=\"the-document\"\r\n            className={`grow-1 pl-xl p-lg w-19/20 max-w-container lg:mx-auto   ${\r\n              sidebarOpen ? \"max-tab:filter-blur-md\" : \"\"\r\n            }`}\r\n          >\r\n            {children}\r\n          </div>\r\n          <Footer />\r\n        </div>\r\n      </SidebarContext.Provider>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SidebarLayout\r\n","import GATSBY_COMPILED_MDX from \"/mnt/c/Users/bthve/Desktop/2025jobsAndProjs/side-repos/simple-scss-utilities-docs/src/pages/install.mdx\";\nimport React from \"react\";\nimport {useStaticQuery, graphql} from \"gatsby\";\nimport Layout from \"../../components/Layout/Layout\";\nimport SidebarLayout from \"../../components/Layout/SidebarLayout\";\nconst DocumentPage = ({location, data: {mdx}, children}) => {\n  const {pathname} = location;\n  if (pathname.includes(\"/page/\")) {\n    return React.createElement(React.Fragment, null, children);\n  }\n  return React.createElement(Layout, {\n    onSideBarPage: true\n  }, React.createElement(SidebarLayout, {\n    pathname: pathname\n  }, React.createElement(\"main\", null, children)));\n};\nDocumentPage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(DocumentPage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String) {\n    mdx(id: { eq: $id }) {\n      id\n      body\n      frontmatter {\n        description\n        title\n        type\n        image\n      }\n    }\n  }\n`;\n"],"names":["MDXLayout","_ref","children","_components","Object","assign","main","_provideComponents","React","ImportedLayout","className","_createMdxContent","props","h1","h4","p","pre","code","ul","li","components","CodeWrapper","title","addExtraMarginUnderTitle","isFile","createContext","hasScrolled","setHasScrolled","activeAnchor","setActiveAnchor","path","to","location","useLocation","useContext","SidebarContext","active","setActive","useState","pathname","useEffect","process","PATH_PREFIX","onClick","document","getElementById","scrollIntoView","behavior","navigate","sidebarData","sidebarOpen","setSidebarOpen","LayoutContext","anchorsOnPage","setAnchorsOnPage","anchorsLoaded","setAnchorsLoaded","anchorUpdate","setAnchorUpdate","intialAnchorLinkSet","setIntialAnchorLinkSet","wideScreen","setWideScreen","width","useWindowDimensions","els","querySelectorAll","observer","window","IntersectionObserver","observerCallback","entries","header","newAnchorInfo","forEach","entry","i","target","href","split","anchorString","slice","isIntersecting","push","inView","offsetTop","root","threshold","el","observe","length","newAnchorsOnPage","_toConsumableArray","anchorInfo","index","findIndex","anchor","splice","smallestTopOffset","Number","POSITIVE_INFINITY","indexOfSmallestOffset","newActiveAnchorInfo","search","anchorLink","URLSearchParams","get","tag","firstAnchor","console","log","nodes","rootDocArr","categoryArr","categoryMap","node","frontmatter","category","slug","order","isCategoryRoot","anchorLinks","categoryName","sublinks","pathName","sort","a","b","item","sidebarLinkArr","concat","FontAwesomeIcon","icon","faBars","id","faX","map","upperCaseTitle","charAt","toUpperCase","highlightLink","key","Link","link","CustomAnchor","subLinkPath","docs","customize","useStaticQuery","path_prefix","startsWith","Provider","value","SideBar","onWheel","onTouchStart","Footer","DocumentPage","data","mdx","includes","Layout","onSideBarPage","SidebarLayout","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}