{"version":3,"file":"component---src-pages-mdx-frontmatter-type-mdx-frontmatter-slug-js-content-file-path-content-docs-responsive-examples-display-mdx-eb66f5165b1c6de8edba.js","mappings":"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","sources":["webpack://simple-scss-utilities/./content/docs/Responsive Examples/display.mdx","webpack://simple-scss-utilities/./src/pages/{mdx.frontmatter__type}/{mdx.frontmatter__slug}.js","webpack://simple-scss-utilities/./src/components/Mdx/CodeWrapper.js","webpack://simple-scss-utilities/./src/components/Layout/SidebarContext.js","webpack://simple-scss-utilities/./src/components/Layout/CustomAnchor.js","webpack://simple-scss-utilities/./src/components/Layout/Sidebar.js","webpack://simple-scss-utilities/./src/components/Layout/SidebarLayout.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport {Paragraph} from \"../../../src/components/Mdx/textComponents\";\nimport CodeWrapper from \"../../../src/components/Mdx/CodeWrapper\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h4: \"h4\",\n    p: \"p\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    code: \"code\",\n    h3: \"h3\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"Display\"), \"\\n\", React.createElement(_components.h4, null, \"How to use\"), \"\\n\", React.createElement(_components.p, null, \"The utility classes for display are pretty straightforward:\"), \"\\n\", React.createElement(_components.table, null, React.createElement(_components.thead, null, React.createElement(_components.tr, null, React.createElement(_components.th, {\n    align: \"left\"\n  }, \"Class\"), React.createElement(_components.th, {\n    align: \"left\"\n  }, \"CSS rule\"))), React.createElement(_components.tbody, null, React.createElement(_components.tr, null, React.createElement(_components.td, {\n    align: \"left\"\n  }, \"display-none\"), React.createElement(_components.td, {\n    align: \"left\"\n  }, \"display: none;\")), React.createElement(_components.tr, null, React.createElement(_components.td, {\n    align: \"left\"\n  }, \"display-block\"), React.createElement(_components.td, {\n    align: \"left\"\n  }, \"display: block;\")), React.createElement(_components.tr, null, React.createElement(_components.td, {\n    align: \"left\"\n  }, \"display-flex\"), React.createElement(_components.td, {\n    align: \"left\"\n  }, \"display: flex;\")), React.createElement(_components.tr, null, React.createElement(_components.td, {\n    align: \"left\"\n  }, \"display-inline-block\"), React.createElement(_components.td, {\n    align: \"left\"\n  }, \"display: inline-block;\")), React.createElement(_components.tr, null, React.createElement(_components.td, {\n    align: \"left\"\n  }, \"display-inline\"), React.createElement(_components.td, {\n    align: \"left\"\n  }, \"display: inline;\")))), \"\\n\", React.createElement(_components.p, null, \"These can all be prefixed with the default responsive prefixe to change the display. Out of all of these, \", React.createElement(_components.code, null, \"display: flex\"), \" probably deserves it's own section the other four properties are pretty straightforward so I'll just give some quick examples here:\"), \"\\n\", React.createElement(_components.h3, null, \"Display None\"), \"\\n\", React.createElement(_components.p, null, \"Display none of course hides content, and can be used with responsive classes like shown beneath. If you're on a browser you can change the screen width of the window to see the message change (you'll have to close the sidebar for the small widths):\"), \"\\n\", React.createElement(\"div\", {\n    className: \"center m-lg mb-xl\"\n  }, React.createElement(Paragraph, {\n    className: \"text-xl font-bold p-lg border-sm display-none max-mob:display-block\",\n    text: \"Mobile Size\"\n  }), React.createElement(Paragraph, {\n    className: \"text-xl font-bold p-lg border-sm  display-none tab:display-block scr:display-none\",\n    text: \"Tablet Size\"\n  }), React.createElement(Paragraph, {\n    className: \"text-xl font-bold p-lg border-sm  display-none scr:display-block lg:display-none\",\n    text: \"Screen Size\"\n  }), React.createElement(Paragraph, {\n    className: \"text-xl font-bold p-lg border-sm  display-none lg:display-block\",\n    text: \"Large Size\"\n  })), \"\\n\", React.createElement(_components.p, null, \"The default breakpoints are eaxy to edit in \", React.createElement(_components.code, null, \"_variables.scss\"), \" see the (Customize)[/customze/] section for more details. However, this effect is acheived by switching display none with display block with the breakpoint prefixes like so:\"), \"\\n\", React.createElement(CodeWrapper, {\n    title: \"HTML\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-HTML\"\n  }, \"<div class=\\\"center m-lg mb-xl\\\">\\r\\n  <p\\r\\n    class=\\\"text-xl font-bold p-lg border-sm\\r\\n      display-none max-mob:display-block\\\"\\r\\n  >\\r\\n    Mobile Size\\r\\n  </p>\\r\\n  <p\\r\\n    class=\\\"text-xl font-bold p-lg border-sm\\r\\n      display-none tab:display-block scr:display-none\\\"\\r\\n  >\\r\\n    Tablet Size\\r\\n  </p>\\r\\n  <p\\r\\n    class=\\\"text-xl font-bold p-lg border-sm\\r\\n      display-none scr:display-block lg:display-none\\\"\\r\\n  >\\r\\n    Screen Size\\r\\n  </p>\\r\\n  <p\\r\\n    class=\\\"text-xl font-bold p-lg border-sm\\r\\n      display-none lg:display-block\\\"\\r\\n  >\\r\\n    Large Size\\r\\n  </p>\\r\\n</div>\\n\"))), \"\\n\", React.createElement(_components.h3, null, \"Display Block / Display Inline\"), \"\\n\", React.createElement(_components.p, null, \"Display block and display inline basically determine if you want something to be inline, \", React.createElement(_components.code, null, \"like this code-styled text\"), \", or a block like a new paragraph. I can't think of many useful examples of switching these responsively, but for demonstration, here's a series of span elements that are inline up to the max of the \", React.createElement(_components.code, null, \"scr\"), \" breakpoint (1024 px) and display block at widths larger:\"), \"\\n\", React.createElement(\"div\", {\n    className: \"text-lg m-lg\"\n  }, React.createElement(\"p\", {\n    className: \"display-none max-scr:display-block mb-xs\"\n  }, React.createElement(_components.p, null, \"Below 1024px: Display Inline\")), React.createElement(\"p\", {\n    className: \"display-none lg:display-block mb-xs\"\n  }, React.createElement(_components.p, null, \"1024px and above: Display Block\")), React.createElement(\"span\", {\n    className: \"max-scr:display-inline display-block p-md \"\n  }, \"Span 1\"), React.createElement(\"span\", {\n    className: \"max-scr:display-inline display-block p-md \"\n  }, \"Span 2\"), React.createElement(\"span\", {\n    className: \"max-scr:display-inline display-block p-md \"\n  }, \"Span 3\"), React.createElement(\"span\", {\n    className: \"max-scr:display-inline display-block p-md \"\n  }, \"Span 4\")), \"\\n\", React.createElement(_components.p, null, \"The HTML is pretty simple:\"), \"\\n\", React.createElement(CodeWrapper, {\n    title: \"HTML\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-HTML\"\n  }, \"<div class=\\\"text-lg m-lg\\\">\\r\\n  <p class=\\\"display-none max-scr:display-block mb-xs\\\">\\r\\n    Below 1024px: Display Inline\\r\\n  </p>\\r\\n  <p class=\\\"display-none lg:display-block mb-xs\\\">\\r\\n    1024px and above: Display Block\\r\\n  </p>\\r\\n  <span class=\\\"max-scr:display-inline display-block p-md \\\">Span 1</span>\\r\\n  <span class=\\\"max-scr:display-inline display-block p-md \\\">Span 2</span>\\r\\n  <span class=\\\"max-scr:display-inline display-block p-md \\\">Span 3</span>\\r\\n  <span class=\\\"max-scr:display-inline display-block p-md \\\">Span 4</span>\\r\\n</div>\\n\"))), \"\\n\", React.createElement(_components.h3, null, \"Display Inline-Block\"), \"\\n\", React.createElement(_components.p, null, \"Display Block is like Display Inline except it lets you define widths and heights. Here are some spans with widths and heights set, however in the screen size and below they're \", React.createElement(_components.code, null, \"display: inline\"), \" and on large sizes they're \", React.createElement(_components.code, null, \"display: inline-block\"), \":\"), \"\\n\", React.createElement(\"div\", {\n    className: \"text-lg m-lg\"\n  }, React.createElement(\"p\", {\n    className: \"display-none max-scr:display-block mb-xs\"\n  }, React.createElement(_components.p, null, \"Below 1024px: Display Inline\")), React.createElement(\"p\", {\n    className: \"display-none lg:display-block mb-xs\"\n  }, React.createElement(_components.p, null, \"1024px and above: Display Inline Block\")), React.createElement(\"span\", {\n    className: \"max-scr:display-inline \\r\\ndisplay-inline-block w-6 h-6 \\r\\np-md lg:border-sm\"\n  }, React.createElement(Paragraph, {\n    className: \"display-inline\",\n    text: \"Span 1\"\n  })), React.createElement(\"span\", {\n    className: \"max-scr:display-inline display-inline-block w-6 h-6 p-md lg:border-sm\"\n  }, React.createElement(Paragraph, {\n    className: \"display-inline\",\n    text: \"Span 2\"\n  })), React.createElement(\"span\", {\n    className: \"max-scr:display-inline display-inline-block w-6 h-6 p-md lg:border-sm\"\n  }, React.createElement(Paragraph, {\n    className: \"display-inline\",\n    text: \"Span 3\"\n  })), React.createElement(\"span\", {\n    className: \"max-scr:display-inline display-inline-block w-6 h-6 p-md lg:border-sm\"\n  }, React.createElement(Paragraph, {\n    className: \"display-inline\",\n    text: \"Span 4\"\n  }))), \"\\n\", React.createElement(_components.p, null, \"And here's the HTML:\"), \"\\n\", React.createElement(CodeWrapper, {\n    title: \"HTML\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-HTML\"\n  }, \"<div class=\\\"text-lg m-lg\\\">\\r\\n  <p class=\\\"display-none max-scr:display-block mb-xs\\\">\\r\\n    Below 1024px: Display Inline\\r\\n  </p>\\r\\n  <p class=\\\"display-none lg:display-block mb-xs\\\">\\r\\n    1024px and above: Display Inline Block\\r\\n  </p>\\r\\n  <span\\r\\n    class=\\\"max-scr:display-inline\\r\\n      display-inline-block w-6 h-6 p-md lg:border-sm\\\">\\r\\n    Span 1\\r\\n  </span>\\r\\n  <span\\r\\n    class=\\\"max-scr:display-inline\\r\\n      display-inline-block w-6 h-6 p-md lg:border-sm\\\">\\r\\n    Span 2\\r\\n  </span>\\r\\n  <span\\r\\n    class=\\\"max-scr:display-inline\\r\\n      display-inline-block w-6 h-6 p-md lg:border-sm\\\">\\r\\n    Span 3\\r\\n  </span>\\r\\n  <span\\r\\n    class=\\\"max-scr:display-inline\\r\\n      display-inline-block w-6 h-6 p-md lg:border-sm\\\">\\r\\n    Span 4\\r\\n  </span>\\r\\n</div>\\n\"))), \"\\n\", React.createElement(_components.p, null, \"The final display property is the almighty \", React.createElement(_components.code, null, \"display: flex\"), \". For real, I was a self taugh coder, the first website I ever made was based on a completely table-based layout haha. I didn't use display: flex for so long, but when I finally figured it out it was soooo much better. I will be going over this property in the next section. Happy Coding!\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"C:/Users/bthve/Desktop/2025 job search and side projects/side-repos/simple-scss-utilities-docs/content/docs/Responsive Examples/display.mdx\";\nimport React from \"react\";\nimport {useStaticQuery, graphql} from \"gatsby\";\nimport Layout from \"../../components/Layout/Layout\";\nimport SidebarLayout from \"../../components/Layout/SidebarLayout\";\nconst DocumentPage = ({location, data: {mdx}, children}) => {\n  const {pathname} = location;\n  if (pathname.includes(\"/page/\")) {\n    return React.createElement(React.Fragment, null, children);\n  }\n  return React.createElement(Layout, {\n    onSideBarPage: true\n  }, React.createElement(SidebarLayout, {\n    pathname: pathname\n  }, React.createElement(\"main\", null, children)));\n};\nDocumentPage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(DocumentPage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String) {\n    mdx(id: { eq: $id }) {\n      id\n      body\n      frontmatter {\n        description\n        title\n        type\n        image\n      }\n    }\n  }\n`;\n","import React from \"react\"\r\n\r\n// I decided to keep this seperate from CodeBlock.js, which which taken from examples give by how to use prisimjs in MDX around the interent\r\n// This is just a wrapper for code blocks, displays the filename or language, plus whatever else might be necessary in the future\r\n\r\n// a results block might be good too\r\n\r\nconst CodeWrapper = ({ children, title, isFile, addExtraMarginUnderTitle }) => {\r\n  return (\r\n    <div className=\"mt-lg mb-2xl mr-2\">\r\n      <h6\r\n        className={`font-large text-lg position-relative left-1px ${\r\n          addExtraMarginUnderTitle ? \"mb-md\" : \"mb-xs\"\r\n        }`}\r\n      >\r\n        {isFile ? \"File: \" : \"\"}\r\n        {title}\r\n      </h6>\r\n      <div className=\"mr-md\">{children}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CodeWrapper\r\n","import { createContext } from \"react\"\r\n\r\nconst SidebarContext = createContext({\r\n  hasScrolled: false,\r\n  setHasScrolled: () => {}, // keep track if the scrolling was done by the user\r\n\r\n  activeAnchor: \"\", // '${path} ${to} of active anchor link'\r\n  setActiveAnchor: () => {}\r\n})\r\n\r\nexport default SidebarContext\r\n","import React, { useState, useEffect, useContext } from \"react\"\r\nimport SidebarContext from \"./SidebarContext\"\r\nimport { useLocation } from \"@reach/router\"\r\nimport { navigate } from \"gatsby\"\r\n\r\n/*\r\n  Gatsby seemed to have a little trouble with anchor links \r\n  Not only did they not seem to quite work but.. I also wanted to implement smooth scrolling\r\n  if you jump from page to page so I made my own component. \r\n  It's possible to make the URLs just slightly awkared if you\r\n  click directly on the link .. but.. they still work\r\n*/\r\nconst CustomAnchor = ({ children, path, to }) => {\r\n  const location = useLocation()\r\n  const { activeAnchor, setActiveAnchor, hasScrolled, setHasScrolled } =\r\n    useContext(SidebarContext)\r\n  const [active, setActive] = useState(false)\r\n  const { pathname } = location\r\n\r\n  useEffect(() => {\r\n    if (activeAnchor == `${process.env.PATH_PREFIX}${path} ${to}`) {\r\n      setActive(true)\r\n    } else {\r\n      setActive(false)\r\n    }\r\n  }, [activeAnchor])\r\n\r\n  // console.log(\r\n  //   `path: ${path} to: ${to} pathname: ${pathname} prefix with path: ${process.env.PATH_PREFIX}${path}`\r\n  // )\r\n\r\n  return (\r\n    <p\r\n      className={`${active ? \"font-bold\" : \"\"} cursor-pointer`}\r\n      onClick={() => {\r\n        // the pathname from location usually has an added slash\r\n\r\n        if (`${process.env.PATH_PREFIX}${path}/` == pathname) {\r\n          const tag = document.getElementById(to)\r\n          tag.scrollIntoView({ behavior: \"smooth\" })\r\n          // set \"hasScrolled\" to false .. gets set true if the user scrolls the docs area\r\n          setHasScrolled(false)\r\n\r\n          // in the MDX anchor componnnt, the text generates the id \"to\"\r\n          // two anchor links on different documents might have the same text so\r\n          // I have the path be part of the identifying string\r\n          // as long as 2 anchors on the same MDX page don't have the same text we're good\r\n          setActiveAnchor(`${process.env.PATH_PREFIX}${path} ${to}`)\r\n        } else {\r\n          navigate(`${path}?anchor=${to}`)\r\n        }\r\n      }}\r\n    >\r\n      {children}\r\n    </p>\r\n  )\r\n}\r\n\r\nexport default CustomAnchor\r\n","import React, { useState, useEffect, useContext } from \"react\"\r\nimport { Link } from \"gatsby\"\r\nimport { useLocation } from \"@reach/router\"\r\nimport CustomAnchor from \"./CustomAnchor\"\r\nimport SidebarContext from \"./SidebarContext\"\r\nimport LayoutContext from \"./LayoutContext\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faX, faBars } from \"@fortawesome/free-solid-svg-icons\"\r\nimport * as layoutStyles from \"./layout.module.scss\"\r\nimport useWindowDimensions from \"../../hooks/useWindowDimensions\"\r\n// HEADER IS A ReserveD WORD\r\n\r\nconst SideBar = ({ sidebarData }) => {\r\n  const { setActiveAnchor, hasScrolled } = useContext(SidebarContext)\r\n  const { sidebarOpen, setSidebarOpen } = useContext(LayoutContext)\r\n\r\n  const [anchorsOnPage, setAnchorsOnPage] = useState([])\r\n  const [anchorsLoaded, setAnchorsLoaded] = useState(false)\r\n  const [anchorUpdate, setAnchorUpdate] = useState([])\r\n\r\n  const [intialAnchorLinkSet, setIntialAnchorLinkSet] = useState(false)\r\n\r\n  // const [sidebarOpen, setSidebarOpen] = useState(true)\r\n  const [wideScreen, setWideScreen] = useState(false)\r\n  const { width } = useWindowDimensions()\r\n\r\n  const location = useLocation()\r\n  const { pathname } = location\r\n\r\n  // ok every time something enteres or leaves, update\r\n  // the anchors in view\r\n  useEffect(() => {\r\n    const els = document.querySelectorAll(\".anchor-link\")\r\n\r\n    const observerCallback = (entries, observer, header) => {\r\n      const newAnchorInfo = []\r\n      entries.forEach((entry, i) => {\r\n        const to = entry.target.href.split(\"#\")[1]\r\n        const path = pathname.slice(0, -1)\r\n        const anchorString = `${path} ${to}`\r\n\r\n        if (entry.isIntersecting) {\r\n          newAnchorInfo.push({\r\n            anchorString,\r\n            inView: true,\r\n            offsetTop: entry.target.offsetTop\r\n          })\r\n        } else {\r\n          newAnchorInfo.push({\r\n            anchorString,\r\n            inView: false,\r\n            offsetTop: entry.target.offsetTop\r\n          })\r\n        }\r\n      })\r\n\r\n      setAnchorUpdate(newAnchorInfo)\r\n    }\r\n\r\n    const observer = new window.IntersectionObserver(observerCallback, {\r\n      root: null,\r\n      threshold: 0.5 // set offset 0.1 means trigger if atleast 10% of element in viewport\r\n    })\r\n\r\n    els.forEach((el) => {\r\n      observer.observe(el)\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (anchorUpdate.length && !anchorsLoaded) {\r\n      setAnchorsOnPage(anchorUpdate)\r\n      setAnchorsLoaded(true)\r\n    }\r\n  }, [anchorUpdate, anchorsLoaded])\r\n\r\n  // eh, there might be a better way to do this but\r\n  // by the time I got here I was like \"It works, and it's good enough!\"\r\n  useEffect(() => {\r\n    // to prevent infinite reloading, only update if there is a non-empty update, and then set the update to empty if done\r\n    if (anchorsLoaded && anchorUpdate.length) {\r\n      let newAnchorsOnPage = [...anchorsOnPage]\r\n      anchorUpdate.forEach((anchorInfo) => {\r\n        const index = anchorsOnPage.findIndex((anchor) => {\r\n          return anchorInfo.anchorString == anchor.anchorString\r\n        })\r\n\r\n        if (index >= 0) {\r\n          newAnchorsOnPage.splice(index, 1, anchorInfo)\r\n        }\r\n      })\r\n\r\n      setAnchorsOnPage(newAnchorsOnPage)\r\n      setAnchorUpdate([])\r\n\r\n      if (hasScrolled) {\r\n        let smallestTopOffset = Number.POSITIVE_INFINITY\r\n        let indexOfSmallestOffset = -1\r\n        newAnchorsOnPage.forEach((anchor, i) => {\r\n          if (anchor.inView && anchor.offsetTop < smallestTopOffset) {\r\n            smallestTopOffset = anchor.offsetTop\r\n            indexOfSmallestOffset = i\r\n          }\r\n        })\r\n\r\n        if (indexOfSmallestOffset >= 0) {\r\n          const newActiveAnchorInfo = newAnchorsOnPage[indexOfSmallestOffset]\r\n          setActiveAnchor(newActiveAnchorInfo.anchorString)\r\n        } else {\r\n          // if we're here, there's no anchors vidible on screen\r\n          setActiveAnchor(\"\")\r\n        }\r\n      }\r\n    }\r\n  }, [anchorsOnPage, anchorUpdate, anchorsLoaded, hasScrolled])\r\n\r\n  useEffect(() => {\r\n    if (location.search && !intialAnchorLinkSet) {\r\n      const urlParams = new URLSearchParams(location.search)\r\n      const anchorLink = urlParams.get(\"anchor\")\r\n      if (anchorLink) {\r\n        const tag = document.getElementById(anchorLink)\r\n        if (tag) {\r\n          tag.scrollIntoView({ behavior: \"smooth\" })\r\n\r\n          const path = pathname.slice(0, -1)\r\n          setActiveAnchor(`${path} ${anchorLink}`)\r\n        }\r\n      }\r\n      setIntialAnchorLinkSet(true)\r\n    } else if (anchorsLoaded && !intialAnchorLinkSet) {\r\n      // just set the active anchor link to the highest link in view\r\n      // pretty sure it's just gonna be the firs one that's \"in view\"\r\n      // and if the first one is in view, it's gonna be that one so ..\r\n      let firstAnchor = anchorsOnPage[0]\r\n\r\n      if (firstAnchor.inView) {\r\n        setActiveAnchor(firstAnchor.anchorString)\r\n      }\r\n\r\n      setIntialAnchorLinkSet(true)\r\n    }\r\n  }, [anchorsLoaded, anchorsOnPage, intialAnchorLinkSet])\r\n\r\n  useEffect(() => {\r\n    if (width > 768) {\r\n      setWideScreen(true)\r\n    } else {\r\n      setWideScreen(false)\r\n    }\r\n  }, [width])\r\n\r\n  useEffect(() => {\r\n    setSidebarOpen(true)\r\n  }, [wideScreen])\r\n\r\n  // organize alphabetically\r\n  // then loop the map and fill in the links and sublinks\r\n  console.log(\"SIDEBAR DATA IS\")\r\n  console.log(sidebarData)\r\n\r\n  if (!sidebarData) {\r\n    return <>{`No sidebar data for path ${pathname}`}</>\r\n  }\r\n\r\n  const { path, nodes } = sidebarData\r\n  const rootDocArr = []\r\n  const categoryArr = []\r\n  const categoryMap = {}\r\n  nodes.forEach((node) => {\r\n    const {\r\n      frontmatter: { category, title, slug, order, isCategoryRoot, anchorLinks }\r\n    } = node\r\n    if (!category) {\r\n      // don't give a slug of \"index\" part of the path here ..\r\n      // the path will just be /docs/ or /customize/ etc\r\n      // this is different for the categories\r\n      const pathName = slug === \"index\" ? `/${path}` : `/${path}/${slug}`\r\n      rootDocArr.push({\r\n        title,\r\n        path: pathName,\r\n        sublinks: null,\r\n        order,\r\n        anchorLinks\r\n      })\r\n    } else {\r\n      if (!categoryMap[category]) {\r\n        categoryMap[category] = []\r\n      }\r\n\r\n      if (isCategoryRoot) {\r\n        categoryArr.push({\r\n          title, // uppercase the first letter later\r\n          categoryName: category, // in case I change it from the title\r\n          isCategoryRoot: true,\r\n          path: `/${path}/${slug}`,\r\n          sublinks: null, // get changed into an array later\r\n          order,\r\n          anchorLinks\r\n        })\r\n      } else {\r\n        categoryMap[category].push({\r\n          title,\r\n          path: `/${path}/${slug}`,\r\n          order,\r\n          anchorLinks\r\n        })\r\n      }\r\n    }\r\n  })\r\n\r\n  // ok now loop through the sidebarLinkArr. If there's sublinks, fil them in\r\n\r\n  categoryArr.forEach((entry) => {\r\n    const category = entry.categoryName\r\n    entry.sublinks = categoryMap[category]\r\n  })\r\n\r\n  // the root docs will go first, sorted by an order property,  and then the categories\r\n  // in alphabetical order, and then the sublinks (in a category) are sorted by a frontmatter \"order\" property\r\n  // the anchor links are already determined in the frontmatter defintion\r\n  rootDocArr.sort((a, b) => a.order - b.order)\r\n  categoryArr.sort((a, b) => {\r\n    return a.order - b.order\r\n  })\r\n\r\n  categoryArr.forEach((item) => {\r\n    const { sublinks } = item\r\n\r\n    if (sublinks) {\r\n      sublinks.sort((a, b) => {\r\n        return a.order - b.order\r\n      })\r\n    }\r\n  })\r\n\r\n  const sidebarLinkArr = [...rootDocArr, ...categoryArr]\r\n\r\n  // capitalize category name\r\n  // .. hm.. oh yeah. Fix anchor links\r\n\r\n  return (\r\n    <>\r\n      <div className=\"w-0\">\r\n        <div\r\n          onClick={() => setSidebarOpen(true)}\r\n          className={`${\r\n            sidebarOpen ? \"display-none\" : \"display-flex\"\r\n          } text-xl w-3 h-3 position-relative top-1 left-1 radius-full cursor-pointer shadow-magenta-lg hover:shadow-blue-lg bg-background-ltr items-center justify-center bg-background z-5 text-magenta hover:text-blue`}\r\n        >\r\n          <FontAwesomeIcon icon={faBars} />\r\n        </div>\r\n      </div>\r\n      <div\r\n        id=\"sidebar\"\r\n        className={`${\r\n          layoutStyles.sidebar\r\n        }  max-tab:position-absolute max-tab:h-full min-w-1/4 max-tab:w-20 overflow-y-scroll bg-background z-4  ${\r\n          sidebarOpen ? \"\" : \"display-none\"\r\n        }`}\r\n      >\r\n        <nav className=\"p-md\">\r\n          <span className={`${wideScreen ? \"display-none\" : \"\"} `}>\r\n            <FontAwesomeIcon\r\n              className={`cursor-pointer hover:text-magenta text-magenta hover:text-blue text-lg py-sm`}\r\n              onClick={() => setSidebarOpen(false)}\r\n              icon={faX}\r\n            />\r\n          </span>\r\n          <ul className=\"display-flex flex-col line-height-lg\">\r\n            {sidebarLinkArr.map((entry) => {\r\n              const {\r\n                isCategoryRoot,\r\n                categoryName,\r\n                path,\r\n                title,\r\n                sublinks,\r\n                anchorLinks\r\n              } = entry\r\n\r\n              if (isCategoryRoot) {\r\n                const upperCaseTitle =\r\n                  title.charAt(0).toUpperCase() + title.slice(1)\r\n\r\n                const highlightLink =\r\n                  `${process.env.PATH_PREFIX}${path}/` === pathname\r\n\r\n                return (\r\n                  <li key={`${path} ${title}`}>\r\n                    <span\r\n                      className={`${\r\n                        highlightLink ? \"text-magenta\" : \"\"\r\n                      } font-large hover:text-magenta `}\r\n                    >\r\n                      <Link to={path}>{upperCaseTitle}</Link>\r\n                    </span>\r\n                    {anchorLinks && (\r\n                      <ul className=\"line-height-md \">\r\n                        {anchorLinks.map((anchorLink, i) => {\r\n                          // name of is a bit different, I don't think anchor links are a full \"path\" (might need to refacto later)\r\n                          const { title, link } = anchorLink\r\n\r\n                          return (\r\n                            <li\r\n                              key={`${title} ${link}`}\r\n                              className={`pl-md text-md ${\r\n                                i == anchorLinks.length - 1 ? \"mb-xs\" : \"\"\r\n                              } `}\r\n                            >\r\n                              <CustomAnchor path={path} to={link}>\r\n                                {title}\r\n                              </CustomAnchor>\r\n                            </li>\r\n                          )\r\n                        })}\r\n                      </ul>\r\n                    )}\r\n                    {sublinks && (\r\n                      <ul>\r\n                        {sublinks.map((link, i) => {\r\n                          const { title, path: subLinkPath, anchorLinks } = link\r\n\r\n                          const highlightLink =\r\n                            `${process.env.PATH_PREFIX}${subLinkPath}/` ===\r\n                            pathname\r\n\r\n                          return (\r\n                            <li\r\n                              key={`${title} ${subLinkPath}`}\r\n                              className={`pl-md font-normal   ${\r\n                                i == sublinks.length - 1 ? \"mb-xs\" : \"\"\r\n                              }`}\r\n                            >\r\n                              <span\r\n                                className={`${\r\n                                  highlightLink ? \"text-magenta\" : \"\"\r\n                                } font-bold hover:text-magenta`}\r\n                              >\r\n                                <Link to={subLinkPath}>{title}</Link>\r\n                              </span>\r\n\r\n                              {anchorLinks && (\r\n                                <ul className=\"line-height-md \">\r\n                                  {anchorLinks.map((anchorLink) => {\r\n                                    // name of is a bit different, I don't think anchor links are a full \"path\" (might need to refacto later)\r\n                                    const { title, link } = anchorLink\r\n\r\n                                    return (\r\n                                      <li\r\n                                        key={`${title} ${link}`}\r\n                                        className=\"pl-md text-md hover:text-magenta\"\r\n                                      >\r\n                                        <CustomAnchor\r\n                                          path={subLinkPath}\r\n                                          to={link}\r\n                                        >\r\n                                          {title}\r\n                                        </CustomAnchor>\r\n                                      </li>\r\n                                    )\r\n                                  })}\r\n                                </ul>\r\n                              )}\r\n                            </li>\r\n                          )\r\n                        })}\r\n                      </ul>\r\n                    )}\r\n                  </li>\r\n                )\r\n              }\r\n\r\n              const upperCaseTitle =\r\n                title.charAt(0).toUpperCase() + title.slice(1)\r\n\r\n              const highlightLink =\r\n                `${process.env.PATH_PREFIX}${path}/` === pathname\r\n\r\n              return (\r\n                <li key={`${path} ${title}`}>\r\n                  <span\r\n                    className={`${\r\n                      highlightLink ? \"text-magenta\" : \"\"\r\n                    } font-large hover:text-magenta`}\r\n                  >\r\n                    <Link to={path}>{title}</Link>\r\n                  </span>\r\n                </li>\r\n              )\r\n            })}\r\n          </ul>\r\n        </nav>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SideBar\r\n","import React, { useState, useContext } from \"react\"\r\nimport Footer from \"./Footer\"\r\nimport SideBar from \"./Sidebar\"\r\nimport LayoutContext from \"./LayoutContext\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\nimport * as layoutStyles from \"./layout.module.scss\"\r\nimport SidebarContext from \"./SidebarContext\"\r\n// not sure how best to pass the sidebar and the content\r\n\r\nconst SidebarLayout = ({ pathname, children }) => {\r\n  // context state\r\n  const { sidebarOpen, setSidebarOpen } = useContext(LayoutContext)\r\n\r\n  const [hasScrolled, setHasScrolled] = useState(false)\r\n  const [activeAnchor, setActiveAnchor] = useState(\"\")\r\n\r\n  const { docs, components, customize } = useStaticQuery(graphql`\r\n    query HeaderQuery {\r\n      docs: allMdx(filter: { frontmatter: { type: { eq: \"docs\" } } }) {\r\n        nodes {\r\n          id\r\n          frontmatter {\r\n            title\r\n            slug\r\n            category\r\n            order\r\n            isCategoryRoot\r\n            anchorLinks {\r\n              title\r\n              link\r\n            }\r\n          }\r\n        }\r\n      }\r\n      # components: allMdx(\r\n      #   filter: { frontmatter: { type: { eq: \"components\" } } }\r\n      # ) {\r\n      #   nodes {\r\n      #     id\r\n      #     frontmatter {\r\n      #       title\r\n      #       slug\r\n      #       category\r\n      #       order\r\n      #       isCategoryRoot\r\n      #       anchorLinks {\r\n      #         title\r\n      #         link\r\n      #       }\r\n      #     }\r\n      #   }\r\n      # }\r\n      customize: allMdx(\r\n        filter: { frontmatter: { type: { eq: \"customize\" } } }\r\n      ) {\r\n        nodes {\r\n          id\r\n          frontmatter {\r\n            title\r\n            slug\r\n            category\r\n            order\r\n            isCategoryRoot\r\n            anchorLinks {\r\n              title\r\n              link\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  // const pathParts = pathname.split(\"/\")\r\n  // const section = pathParts.length && pathname.split(\"/\")[1] // this should always be defined in this route but let;s be careful\r\n\r\n  let path_prefix = process.env.PATH_PREFIX\r\n    ? process.env.PATH_PREFIX\r\n    : process.env.GATSBY_PATH_PREFIX // make a .env.development file and put GAtSBY\r\n\r\n  let sidebarData\r\n\r\n  console.log(\"lets debug..\")\r\n  console.log(path_prefix)\r\n  console.log(pathname)\r\n  console.log(pathname.startsWith(`${path_prefix}docs`))\r\n\r\n  console.log(\"alright lets check out the prefixes\")\r\n  console.log(PATH_PREFIX)\r\n  console.log(GATSBY_PATH_PREFIX)\r\n\r\n  // this might be kinda janky code .. but I don't wanna spend forever trying to think about an alternative way\r\n  if (pathname.startsWith(`${path_prefix}docs`)) {\r\n    sidebarData = { path: \"docs\", ...docs }\r\n  } else if (pathname.startsWith(`${path_prefix}customize`)) {\r\n    sidebarData = { path: \"customize\", ...customize }\r\n  }\r\n\r\n  return (\r\n    <div id=\"sidebar-layout\" className=\"display-flex min-w-full grow-1\">\r\n      <SidebarContext.Provider\r\n        value={{\r\n          activeAnchor,\r\n          setActiveAnchor,\r\n          hasScrolled,\r\n          setHasScrolled\r\n        }}\r\n      >\r\n        <SideBar sidebarData={sidebarData} />\r\n        <div\r\n          id=\"docs-section\"\r\n          className={`display-flex flex-col grow-1 overflow-y-scroll position-relative ${layoutStyles.docsSection}`}\r\n          onWheel={() => {\r\n            setHasScrolled(true)\r\n          }}\r\n          // remember to test this on mobile\r\n          onTouchStart={() => {\r\n            setHasScrolled(true)\r\n          }}\r\n        >\r\n          <div\r\n            id=\"small-width-overlay\"\r\n            className={`display-none ${\r\n              sidebarOpen ? \"max-tab:display-block\" : \"\"\r\n            } position-fixed top-0 left-0 w-full h-full z-3 bg-black opacity-10`}\r\n          />\r\n          <div\r\n            id=\"the-document\"\r\n            className={`grow-1 pl-xl p-lg w-19/20 max-w-container lg:mx-auto   ${\r\n              sidebarOpen ? \"max-tab:filter-blur-md\" : \"\"\r\n            }`}\r\n          >\r\n            {children}\r\n          </div>\r\n          <Footer />\r\n        </div>\r\n      </SidebarContext.Provider>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SidebarLayout\r\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","h4","p","table","thead","tr","th","tbody","td","code","h3","pre","_provideComponents","components","React","align","className","Paragraph","text","CodeWrapper","title","wrapper","MDXLayout","DocumentPage","_ref","location","data","mdx","children","pathname","includes","Layout","onSideBarPage","SidebarLayout","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","isFile","addExtraMarginUnderTitle","createContext","hasScrolled","setHasScrolled","activeAnchor","setActiveAnchor","path","to","useLocation","useContext","SidebarContext","active","setActive","useState","useEffect","process","PATH_PREFIX","onClick","document","getElementById","scrollIntoView","behavior","navigate","sidebarData","sidebarOpen","setSidebarOpen","LayoutContext","anchorsOnPage","setAnchorsOnPage","anchorsLoaded","setAnchorsLoaded","anchorUpdate","setAnchorUpdate","intialAnchorLinkSet","setIntialAnchorLinkSet","wideScreen","setWideScreen","width","useWindowDimensions","els","querySelectorAll","observer","window","IntersectionObserver","observerCallback","entries","header","newAnchorInfo","forEach","entry","i","target","href","split","anchorString","slice","isIntersecting","push","inView","offsetTop","root","threshold","el","observe","length","newAnchorsOnPage","_toConsumableArray","anchorInfo","index","findIndex","anchor","splice","smallestTopOffset","Number","POSITIVE_INFINITY","indexOfSmallestOffset","newActiveAnchorInfo","search","anchorLink","URLSearchParams","get","tag","firstAnchor","console","log","nodes","rootDocArr","categoryArr","categoryMap","node","frontmatter","category","slug","order","isCategoryRoot","anchorLinks","categoryName","sublinks","pathName","sort","a","b","item","sidebarLinkArr","concat","FontAwesomeIcon","icon","faBars","id","faX","map","upperCaseTitle","charAt","toUpperCase","highlightLink","key","Link","link","CustomAnchor","subLinkPath","docs","customize","useStaticQuery","path_prefix","GATSBY_PATH_PREFIX","startsWith","Provider","value","SideBar","onWheel","onTouchStart","Footer"],"sourceRoot":""}