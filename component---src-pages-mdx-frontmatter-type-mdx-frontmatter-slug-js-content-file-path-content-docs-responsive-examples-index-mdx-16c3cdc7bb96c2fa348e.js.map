{"version":3,"file":"component---src-pages-mdx-frontmatter-type-mdx-frontmatter-slug-js-content-file-path-content-docs-responsive-examples-index-mdx-16c3cdc7bb96c2fa348e.js","mappings":"6NAKA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,GAAI,KACJC,EAAG,IACHC,KAAM,OACNC,EAAG,IACHC,GAAI,KACJC,IAAK,MACLC,GAAI,OACHC,EAAAA,EAAAA,MAAsBZ,EAAMa,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBb,EAAYG,GAAI,KAAM,sBAAuB,KAAMU,EAAAA,cAAoBb,EAAYI,GAAI,KAAM,gBAAiB,KAAMS,EAAAA,cAAoBb,EAAYK,EAAG,KAAM,iHAAkHQ,EAAAA,cAAoBb,EAAYM,KAAM,KAAM,SAAU,4BAA6BO,EAAAA,cAAoBb,EAAYM,KAAM,KAAM,SAAU,6EAA8E,KAAMO,EAAAA,cAAoBb,EAAYK,EAAG,KAAM,oXAAqX,KAAMQ,EAAAA,cAAoBb,EAAYK,EAAG,KAAM,0OAA2OQ,EAAAA,cAAoBb,EAAYM,KAAM,KAAM,mBAAoB,kCAAmCO,EAAAA,cAAoBb,EAAYO,EAAG,CAC72CO,KAAM,0CACL,aAAc,+BAAgC,KAAMD,EAAAA,cAAoBb,EAAYQ,GAAI,KAAM,eAAgB,KAAMK,EAAAA,cAAoBb,EAAYK,EAAG,KAAM,6EAA8E,KAAMQ,EAAAA,cAAoBE,EAAAA,EAAa,CACnRC,MAAO,kBACPC,QAAQ,GACPJ,EAAAA,cAAoBb,EAAYS,IAAK,KAAMI,EAAAA,cAAoBb,EAAYM,KAAM,CAClFY,UAAW,iBACV,iNAAoO,KAAML,EAAAA,cAAoBb,EAAYK,EAAG,KAAM,8GAA+GQ,EAAAA,cAAoBb,EAAYM,KAAM,KAAM,OAAQ,OAAQO,EAAAA,cAAoBb,EAAYM,KAAM,KAAM,OAAQ,+LAAgMO,EAAAA,cAAoBb,EAAYM,KAAM,KAAM,KAAM,4FAA6F,KAAMO,EAAAA,cAAoBb,EAAYK,EAAG,KAAM,kEAAmEQ,EAAAA,cAAoBb,EAAYM,KAAM,KAAM,QAAS,sGAAuGO,EAAAA,cAAoBb,EAAYM,KAAM,KAAM,QAAS,uFAAwF,KAAMO,EAAAA,cAAoBb,EAAYK,EAAG,KAAM,wPAAyP,KAAMQ,EAAAA,cAAoBb,EAAYQ,GAAI,KAAM,mBAAoB,KAAMK,EAAAA,cAAoBb,EAAYK,EAAG,KAAM,gCAAiCQ,EAAAA,cAAoBb,EAAYM,KAAM,KAAM,YAAa,+DAAgEO,EAAAA,cAAoBb,EAAYM,KAAM,KAAM,YAAa,6CAA8CO,EAAAA,cAAoBb,EAAYM,KAAM,KAAM,OAAQ,8CAA+CO,EAAAA,cAAoBb,EAAYM,KAAM,KAAM,SAAU,KAAM,KAAMO,EAAAA,cAAoBb,EAAYK,EAAG,KAAM,6SAA8S,KAAMQ,EAAAA,cAAoBb,EAAYQ,GAAI,KAAM,YAAa,KAAMK,EAAAA,cAAoBb,EAAYK,EAAG,KAAM,0KAA2K,KAAMQ,EAAAA,cAAoBb,EAAYU,GAAI,KAAM,mBAAoB,KAAMG,EAAAA,cAAoBb,EAAYK,EAAG,KAAM,oOAAqO,KAAMQ,EAAAA,cAAoB,MAAO,CACrgGK,UAAW,wBACVL,EAAAA,cAAoB,MAAO,CAC5BK,UAAW,iEACVL,EAAAA,cAAoB,MAAO,CAC5BK,UAAW,kCACRL,EAAAA,cAAoBM,EAAAA,GAAW,CAClCD,UAAW,qCACXE,KAAM,0BACJP,EAAAA,cAAoBM,EAAAA,GAAW,CACjCD,UAAW,kDACXE,KAAM,wBACJP,EAAAA,cAAoBM,EAAAA,GAAW,CACjCD,UAAW,iDACXE,KAAM,0BACJP,EAAAA,cAAoBM,EAAAA,GAAW,CACjCD,UAAW,gCACXE,KAAM,kCACH,KAAMP,EAAAA,cAAoBb,EAAYK,EAAG,KAAM,oDAAqD,KAAMQ,EAAAA,cAAoBE,EAAAA,EAAa,CAC9IC,MAAO,QACNH,EAAAA,cAAoBb,EAAYS,IAAK,KAAMI,EAAAA,cAAoBb,EAAYM,KAAM,CAClFY,UAAW,iBACV,qQAA4Q,KAAML,EAAAA,cAAoBb,EAAYK,EAAG,KAAM,wBAAyBQ,EAAAA,cAAoBb,EAAYM,KAAM,KAAM,YAAa,KAAMO,EAAAA,cAAoBb,EAAYM,KAAM,KAAM,YAAa,SAAUO,EAAAA,cAAoBb,EAAYM,KAAM,KAAM,WAAY,uKAAwK,KAAMO,EAAAA,cAAoBE,EAAAA,EAAa,CAC9tBC,MAAO,QACNH,EAAAA,cAAoBb,EAAYS,IAAK,KAAMI,EAAAA,cAAoBb,EAAYM,KAAM,CAClFY,UAAW,iBACV,6WAAsX,KAAML,EAAAA,cAAoBb,EAAYK,EAAG,KAAM,qIAAsIQ,EAAAA,cAAoBb,EAAYM,KAAM,KAAM,OAAQ,gKAAiKO,EAAAA,cAAoBb,EAAYM,KAAM,KAAM,QAAS,oWAAqW,KAAMO,EAAAA,cAAoBb,EAAYK,EAAG,KAAM,gBAAiBQ,EAAAA,cAAoBb,EAAYM,KAAM,KAAM,OAAQ,wEAAyEO,EAAAA,cAAoBb,EAAYM,KAAM,KAAM,WAAY,uGAAwGO,EAAAA,cAAoBb,EAAYM,KAAM,KAAM,OAAQ,iIAAkI,KAAMO,EAAAA,cAAoBb,EAAYU,GAAI,KAAM,sBAAuB,KAAMG,EAAAA,cAAoBb,EAAYK,EAAG,KAAM,oEAAqEQ,EAAAA,cAAoBb,EAAYM,KAAM,KAAM,OAAQ,wFAAyF,KAAMO,EAAAA,cAAoB,MAAO,CACvhEK,UAAW,8BACVL,EAAAA,cAAoB,MAAO,CAC5BK,UAAW,6DACVL,EAAAA,cAAoBM,EAAAA,GAAW,CAChCD,UAAW,qCACXE,KAAM,mCACJP,EAAAA,cAAoBM,EAAAA,GAAW,CACjCD,UAAW,gCACXE,KAAM,qCACF,KAAMP,EAAAA,cAAoBb,EAAYK,EAAG,KAAM,0BAA2BQ,EAAAA,cAAoBb,EAAYM,KAAM,KAAM,QAAS,4JAA6JO,EAAAA,cAAoBb,EAAYM,KAAM,KAAM,YAAa,mBAAoBO,EAAAA,cAAoBb,EAAYM,KAAM,KAAM,QAAS,gBAAiBO,EAAAA,cAAoBb,EAAYM,KAAM,KAAM,YAAa,mBAAoBO,EAAAA,cAAoBb,EAAYM,KAAM,KAAM,MAAO,oBAAqBO,EAAAA,cAAoBb,EAAYM,KAAM,KAAM,UAAW,uEAAwE,KAAMO,EAAAA,cAAoBb,EAAYK,EAAG,KAAM,mHAAoH,KAAMQ,EAAAA,cAAoBE,EAAAA,EAAa,CACj5BC,MAAO,QACNH,EAAAA,cAAoBb,EAAYS,IAAK,KAAMI,EAAAA,cAAoBb,EAAYM,KAAM,CAClFY,UAAW,iBACV,kXAA2X,KAAML,EAAAA,cAAoBb,EAAYK,EAAG,KAAM,4GAA6GQ,EAAAA,cAAoBb,EAAYM,KAAM,KAAM,SAAU,gDAAiDO,EAAAA,cAAoBb,EAAYM,KAAM,KAAM,WAAY,0BAA2BO,EAAAA,cAAoBb,EAAYM,KAAM,KAAM,WAAY,6GAA8GO,EAAAA,cAAoBb,EAAYM,KAAM,KAAM,QAAS,gEAAiE,KAAMO,EAAAA,cAAoBb,EAAYK,EAAG,KAAM,yHACjiC,CAKA,MAJA,SAAoBN,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOsB,QAASC,GAAarB,OAAOC,OAAO,CAAC,GAAGS,EAAAA,EAAAA,MAAsBZ,EAAMa,YAC3E,OAAOU,EAAYT,EAAAA,cAAoBS,EAAWvB,EAAOc,EAAAA,cAAoBf,EAAmBC,IAAUD,EAAkBC,EAC9H,E,8BC/DA,MAAMwB,EAAeC,IAAuC,IAAtC,SAACC,EAAUC,MAAM,IAACC,GAAI,SAAEC,GAASJ,EACrD,MAAM,SAACK,GAAYJ,EACnB,OAAII,EAASC,SAAS,UACbjB,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMe,GAE5Cf,EAAAA,cAAoBkB,EAAAA,EAAQ,CACjCC,eAAe,GACdnB,EAAAA,cAAoBoB,EAAAA,EAAe,CACpCJ,SAAUA,GACThB,EAAAA,cAAoB,OAAQ,KAAMe,MAGxB,SAASM,EAAiBnC,GACvC,OAAOc,EAAAA,cAAoBU,EAAcxB,EAAOc,EAAAA,cAAoBsB,EAAqBpC,GAC3F,C,qCCIA,IAhBoByB,IAA4D,IAA3D,SAAEI,EAAQ,MAAEZ,EAAK,OAAEC,EAAM,yBAAEmB,GAA0BZ,EACxE,OACEX,EAAAA,cAAA,OAAKK,UAAU,qBACbL,EAAAA,cAAA,MACEK,UAAW,kDACTkB,EAA2B,QAAU,UAGtCnB,EAAS,SAAW,GACpBD,GAEHH,EAAAA,cAAA,OAAKK,UAAU,SAASU,I,4GCR9B,OARuBS,EAAAA,EAAAA,eAAc,CACnCC,aAAa,EACbC,eAAgBA,OAEhBC,aAAc,GACdC,gBAAiBA,SCmDnB,MA9CqBjB,IAA6B,IAA5B,SAAEI,EAAQ,KAAEc,EAAI,GAAEC,GAAInB,EAC1C,MAAMC,GAAWmB,EAAAA,EAAAA,gBACX,aAAEJ,EAAY,gBAAEC,EAAe,YAAEH,EAAW,eAAEC,IAClDM,EAAAA,EAAAA,YAAWC,IACP,EAACC,EAAO,EAACC,IAAaC,EAAAA,EAAAA,WAAS,IAC/B,SAAEpB,GAAaJ,EAcrB,OAZAyB,EAAAA,EAAAA,WAAU,KAENF,EADER,GAAgB,GAAGW,CAAAA,EAAYC,cAAcV,KAAQC,MAKxD,CAACH,IAOF3B,EAAAA,cAAA,KACEK,WAAc6B,EAAS,YAAc,IAA1B,kBACXM,QAASA,KAGP,GAAI,GAAGF,CAAAA,EAAYC,cAAcV,MAAWb,EAAU,CACxCyB,SAASC,eAAeZ,GAChCa,eAAe,CAAEC,SAAU,WAE/BlB,GAAe,GAMfE,EAAgB,GAAGU,CAAAA,EAAYC,cAAcV,KAAQC,IACvD,MACEe,EAAAA,EAAAA,UAAS,GAAGhB,YAAeC,OAI9Bf,I,uCCwVP,MAjYgBJ,IAAsB,IAArB,YAAEmC,GAAanC,EAC9B,MAAM,gBAAEiB,EAAe,YAAEH,IAAgBO,EAAAA,EAAAA,YAAWC,IAC9C,YAAEc,EAAW,eAAEC,IAAmBhB,EAAAA,EAAAA,YAAWiB,EAAAA,IAE7C,EAACC,EAAc,EAACC,IAAoBf,EAAAA,EAAAA,UAAS,KAC7C,EAACgB,EAAc,EAACC,IAAoBjB,EAAAA,EAAAA,WAAS,IAC7C,EAACkB,EAAa,EAACC,IAAmBnB,EAAAA,EAAAA,UAAS,KAE3C,EAACoB,EAAoB,EAACC,IAA0BrB,EAAAA,EAAAA,WAAS,IAGzD,EAACsB,EAAW,EAACC,IAAiBvB,EAAAA,EAAAA,WAAS,IACvC,MAAEwB,IAAUC,EAAAA,EAAAA,KAEZjD,GAAWmB,EAAAA,EAAAA,gBACX,SAAEf,GAAaJ,EAsIrB,IAlIAyB,EAAAA,EAAAA,WAAU,KACR,MAAMyB,EAAMrB,SAASsB,iBAAiB,gBA2BhCC,EAAW,IAAIC,OAAOC,qBAzBHC,CAACC,EAASJ,EAAUK,KAC3C,MAAMC,EAAgB,GACtBF,EAAQG,QAAQ,CAACC,EAAOC,KACtB,MAAM3C,EAAK0C,EAAME,OAAOzE,KAAK0E,MAAM,KAAK,GAElCC,EAAe,GADR5D,EAAS6D,MAAM,GAAI,MACA/C,IAE5B0C,EAAMM,eACRR,EAAcS,KAAK,CACjBH,eACAI,QAAQ,EACRC,UAAWT,EAAME,OAAOO,YAG1BX,EAAcS,KAAK,CACjBH,eACAI,QAAQ,EACRC,UAAWT,EAAME,OAAOO,cAK9B1B,EAAgBe,IAGiD,CACjEY,KAAM,KACNC,UAAW,KAGbrB,EAAIS,QAASa,IACXpB,EAASqB,QAAQD,MAElB,KAEH/C,EAAAA,EAAAA,WAAU,KACJiB,EAAagC,SAAWlC,IAC1BD,EAAiBG,GACjBD,GAAiB,KAElB,CAACC,EAAcF,KAIlBf,EAAAA,EAAAA,WAAU,KAER,GAAIe,GAAiBE,EAAagC,OAAQ,CACxC,IAAIC,GAAgBC,EAAAA,EAAAA,GAAOtC,GAc3B,GAbAI,EAAaiB,QAASkB,IACpB,MAAMC,EAAQxC,EAAcyC,UAAWC,GAC9BH,EAAWb,cAAgBgB,EAAOhB,cAGvCc,GAAS,GACXH,EAAiBM,OAAOH,EAAO,EAAGD,KAItCtC,EAAiBoC,GACjBhC,EAAgB,IAEZ9B,EAAa,CACf,IAAIqE,EAAoBC,OAAOC,kBAC3BC,GAAyB,EAQ7B,GAPAV,EAAiBhB,QAAQ,CAACqB,EAAQnB,KAC5BmB,EAAOZ,QAAUY,EAAOX,UAAYa,IACtCA,EAAoBF,EAAOX,UAC3BgB,EAAwBxB,KAIxBwB,GAAyB,EAAG,CAC9B,MAAMC,EAAsBX,EAAiBU,GAC7CrE,EAAgBsE,EAAoBtB,aACtC,MAEEhD,EAAgB,GAEpB,CACF,GACC,CAACsB,EAAeI,EAAcF,EAAe3B,KAEhDY,EAAAA,EAAAA,WAAU,KACR,GAAIzB,EAASuF,SAAW3C,EAAqB,CAC3C,MACM4C,EADY,IAAIC,gBAAgBzF,EAASuF,QAClBG,IAAI,UACjC,GAAIF,EAAY,CACd,MAAMG,EAAM9D,SAASC,eAAe0D,GACpC,GAAIG,EAAK,CACPA,EAAI5D,eAAe,CAAEC,SAAU,WAE/B,MAAMf,EAAOb,EAAS6D,MAAM,GAAI,GAChCjD,EAAgB,GAAGC,KAAQuE,IAC7B,CACF,CACA3C,GAAuB,EACzB,MAAO,GAAIL,IAAkBI,EAAqB,CAIhD,IAAIgD,EAActD,EAAc,GAE5BsD,EAAYxB,QACdpD,EAAgB4E,EAAY5B,cAG9BnB,GAAuB,EACzB,GACC,CAACL,EAAeF,EAAeM,KAElCnB,EAAAA,EAAAA,WAAU,KAENsB,EADEC,EAAQ,MAKX,CAACA,KAEJvB,EAAAA,EAAAA,WAAU,KACRW,GAAe,IACd,CAACU,IAIJ+C,QAAQC,IAAI,mBACZD,QAAQC,IAAI5D,IAEPA,EACH,OAAO9C,EAAAA,cAAAA,EAAAA,SAAA,KAAG,4BAA4BgB,KAGxC,MAAM,KAAEa,EAAI,MAAE8E,GAAU7D,EAClB8D,EAAa,GACbC,EAAc,GACdC,EAAc,CAAC,EACrBH,EAAMpC,QAASwC,IACb,MACEC,aAAa,SAAEC,EAAQ,MAAE9G,EAAK,KAAE+G,EAAI,MAAEC,EAAK,eAAEC,EAAc,YAAEC,IAC3DN,EACJ,GAAKE,EAaEH,EAAYG,KACfH,EAAYG,GAAY,IAGtBG,EACFP,EAAY9B,KAAK,CACf5E,QACAmH,aAAcL,EACdG,gBAAgB,EAChBvF,KAAM,IAAIA,KAAQqF,IAClBK,SAAU,KACVJ,QACAE,gBAGFP,EAAYG,GAAUlC,KAAK,CACzB5E,QACA0B,KAAM,IAAIA,KAAQqF,IAClBC,QACAE,oBAhCS,CAIb,MAAMG,EAAoB,UAATN,EAAmB,IAAIrF,IAAS,IAAIA,KAAQqF,IAC7DN,EAAW7B,KAAK,CACd5E,QACA0B,KAAM2F,EACND,SAAU,KACVJ,QACAE,eAEJ,IA4BFR,EAAYtC,QAASC,IACnB,MAAMyC,EAAWzC,EAAM8C,aACvB9C,EAAM+C,SAAWT,EAAYG,KAM/BL,EAAWa,KAAK,CAAC/H,EAAGgI,IAAMhI,EAAEyH,MAAQO,EAAEP,OACtCN,EAAYY,KAAK,CAAC/H,EAAGgI,IACZhI,EAAEyH,MAAQO,EAAEP,OAGrBN,EAAYtC,QAASoD,IACnB,MAAM,SAAEJ,GAAaI,EAEjBJ,GACFA,EAASE,KAAK,CAAC/H,EAAGgI,IACThI,EAAEyH,MAAQO,EAAEP,SAKzB,MAAMS,EAAc,GAAAC,OAAOjB,EAAeC,GAK1C,OACE7G,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,OAAKK,UAAU,OACbL,EAAAA,cAAA,OACEwC,QAASA,IAAMQ,GAAe,GAC9B3C,WACE0C,EAAc,eAAiB,gBADtB,kNAIX/C,EAAAA,cAAC8H,EAAAA,EAAe,CAACC,KAAMC,EAAAA,QAG3BhI,EAAAA,cAAA,OACEiI,GAAG,UACH5H,UAAW,wIAGT0C,EAAc,GAAK,iBAGrB/C,EAAAA,cAAA,OAAKK,UAAU,QACbL,EAAAA,cAAA,QAAMK,WAAcqD,EAAa,eAAiB,IAAjC,KACf1D,EAAAA,cAAC8H,EAAAA,EAAe,CACdzH,UAAW,+EACXmC,QAASA,IAAMQ,GAAe,GAC9B+E,KAAMG,EAAAA,OAGVlI,EAAAA,cAAA,MAAIK,UAAU,wCACXuH,EAAeO,IAAK3D,IACnB,MAAM,eACJ4C,EAAc,aACdE,EAAY,KACZzF,EAAI,MACJ1B,EAAK,SACLoH,EAAQ,YACRF,GACE7C,EAEJ,GAAI4C,EAAgB,CAClB,MAAMgB,EACJjI,EAAMkI,OAAO,GAAGC,cAAgBnI,EAAM0E,MAAM,GAExC0D,EACJ,GAAGjG,CAAAA,EAAYC,cAAcV,OAAYb,EAE3C,OACEhB,EAAAA,cAAA,MAAIwI,IAAK,GAAG3G,KAAQ1B,KAClBH,EAAAA,cAAA,QACEK,WACEkI,EAAgB,eAAiB,IADxB,mCAIXvI,EAAAA,cAACyI,EAAAA,KAAI,CAAC3G,GAAID,GAAOuG,IAElBf,GACCrH,EAAAA,cAAA,MAAIK,UAAU,mBACXgH,EAAYc,IAAI,CAAC/B,EAAY3B,KAE5B,MAAM,MAAEtE,EAAK,KAAEuI,GAAStC,EAExB,OACEpG,EAAAA,cAAA,MACEwI,IAAK,GAAGrI,KAASuI,IACjBrI,UAAW,iBACToE,GAAK4C,EAAY/B,OAAS,EAAI,QAAU,OAG1CtF,EAAAA,cAAC2I,EAAY,CAAC9G,KAAMA,EAAMC,GAAI4G,GAC3BvI,OAOZoH,GACCvH,EAAAA,cAAA,UACGuH,EAASY,IAAI,CAACO,EAAMjE,KACnB,MAAM,MAAEtE,EAAO0B,KAAM+G,EAAW,YAAEvB,GAAgBqB,EAE5CH,EACJ,GAAGjG,CAAAA,EAAYC,cAAcqG,OAC7B5H,EAEF,OACEhB,EAAAA,cAAA,MACEwI,IAAK,GAAGrI,KAASyI,IACjBvI,UAAW,wBACToE,GAAK8C,EAASjC,OAAS,EAAI,QAAU,KAGvCtF,EAAAA,cAAA,QACEK,WACEkI,EAAgB,eAAiB,IADxB,iCAIXvI,EAAAA,cAACyI,EAAAA,KAAI,CAAC3G,GAAI8G,GAAczI,IAGzBkH,GACCrH,EAAAA,cAAA,MAAIK,UAAU,mBACXgH,EAAYc,IAAK/B,IAEhB,MAAM,MAAEjG,EAAK,KAAEuI,GAAStC,EAExB,OACEpG,EAAAA,cAAA,MACEwI,IAAK,GAAGrI,KAASuI,IACjBrI,UAAU,oCAEVL,EAAAA,cAAC2I,EAAY,CACX9G,KAAM+G,EACN9G,GAAI4G,GAEHvI,WAc7B,CAGEA,EAAMkI,OAAO,GAAGC,cAAgBnI,EAAM0E,MAAM,GAD9C,MAGM0D,EACJ,GAAGjG,CAAAA,EAAYC,cAAcV,OAAYb,EAE3C,OACEhB,EAAAA,cAAA,MAAIwI,IAAK,GAAG3G,KAAQ1B,KAClBH,EAAAA,cAAA,QACEK,WACEkI,EAAgB,eAAiB,IADxB,kCAIXvI,EAAAA,cAACyI,EAAAA,KAAI,CAAC3G,GAAID,GAAO1B,YCtPrC,MAlIsBQ,IAA6B,IAA5B,SAAEK,EAAQ,SAAED,GAAUJ,EAE3C,MAAM,YAAEoC,EAAW,eAAEC,IAAmBhB,EAAAA,EAAAA,YAAWiB,EAAAA,IAE7C,EAACxB,EAAY,EAACC,IAAkBU,EAAAA,EAAAA,WAAS,IACzC,EAACT,EAAa,EAACC,IAAmBQ,EAAAA,EAAAA,UAAS,KAE3C,KAAEyG,EAAI,WAAE9I,EAAU,UAAE+I,IAAcC,EAAAA,EAAAA,gBAAe,cA4DvD,IAIIjG,EAJAkG,EAAc1G,CAAAA,EAAYC,YAC1BD,CAAAA,EAAYC,YACZD,+BAkBJ,OAdAmE,QAAQC,IAAI,iBACZD,QAAQC,IAAI5D,GACZ2D,QAAQC,IAAI,GAAGsC,SACfvC,QAAQC,IAAIpE,CAAAA,GACZmE,QAAQC,IAAIpE,gCACZmE,QAAQC,IAAIpE,CAAAA,EAAYC,aAGpBvB,EAASiI,WAAW,GAAGD,SACzBlG,EAAc,CAAEjB,KAAM,UAAWgH,GACxB7H,EAASiI,WAAW,GAAGD,gBAChClG,EAAc,CAAEjB,KAAM,eAAgBiH,IAItC9I,EAAAA,cAAA,OAAKiI,GAAG,iBAAiB5H,UAAU,kCACjCL,EAAAA,cAACiC,EAAeiH,SAAQ,CACtBC,MAAO,CACLxH,eACAC,kBACAH,cACAC,mBAGF1B,EAAAA,cAACoJ,EAAO,CAACtG,YAAaA,IACtB9C,EAAAA,cAAA,OACEiI,GAAG,eACH5H,UAAW,sGACXgJ,QAASA,KACP3H,GAAe,IAGjB4H,aAAcA,KACZ5H,GAAe,KAGjB1B,EAAAA,cAAA,OACEiI,GAAG,sBACH5H,UAAW,gBACT0C,EAAc,wBAA0B,yEAG5C/C,EAAAA,cAAA,OACEiI,GAAG,eACH5H,UAAW,2DACT0C,EAAc,yBAA2B,KAG1ChC,GAEHf,EAAAA,cAACuJ,EAAAA,EAAM,S","sources":["webpack://simple-scss-utilities/./content/docs/Responsive Examples/index.mdx","webpack://simple-scss-utilities/./src/pages/{mdx.frontmatter__type}/{mdx.frontmatter__slug}.js","webpack://simple-scss-utilities/./src/components/Mdx/CodeWrapper.js","webpack://simple-scss-utilities/./src/components/Layout/SidebarContext.js","webpack://simple-scss-utilities/./src/components/Layout/CustomAnchor.js","webpack://simple-scss-utilities/./src/components/Layout/Sidebar.js","webpack://simple-scss-utilities/./src/components/Layout/SidebarLayout.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport {Paragraph} from \"../../../src/components/Mdx/textComponents\";\nimport CodeWrapper from \"../../../src/components/Mdx/CodeWrapper\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h4: \"h4\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    h2: \"h2\",\n    pre: \"pre\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"Responsive Classes\"), \"\\n\", React.createElement(_components.h4, null, \"The Overview\"), \"\\n\", React.createElement(_components.p, null, \"Responsive classes work by prefixing it with the breakpoint. So for example, if you have a padding class like \", React.createElement(_components.code, null, \".p-lg\"), \" for example, and want a \", React.createElement(_components.code, null, \".p-sm\"), \" class for mobile sizes, prefix it with a mob: prefix like this: mob:p-sm\"), \"\\n\", React.createElement(_components.p, null, \"And that's it! I can't include prefixes and pseudo classes for everything because that would generate megabytes of CSS. PostCSS can, but for me SCSS for me is better to write so why not write your own styles? Why does a framework have to handle literally everything? Juet give me enough framework to be useful, we should be able have SOME fun web developing after all.\"), \"\\n\", React.createElement(_components.p, null, \"So that's the idea. Just enough to be useful. Most of the common classes that have to do with the size of things come with these prefixes, and if that's not enough, it's not THAT difficult to add more. It goes a bit beyond editing \", React.createElement(_components.code, null, \"_variables.scss\"), \" but it's not too bad. See the \", React.createElement(_components.a, {\n    href: \"/simple-scss-utilities-docs/customize/\"\n  }, \"Customize\"), \" section on how that works.\"), \"\\n\", React.createElement(_components.h2, null, \"Breakpoints\"), \"\\n\", React.createElement(_components.p, null, \"So let's take a look at these prefixes. Let's start with the breakpoints:\"), \"\\n\", React.createElement(CodeWrapper, {\n    title: \"_variables.scss\",\n    isFile: true\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-scss\"\n  }, \"$breakpoints: (\\r\\n  \\\"_\\\": none,\\r\\n  \\\"mob\\\": 0,\\r\\n  // \\\"mob\\\" for mobile\\r\\n  \\\"tab\\\": 640px,\\r\\n  // \\\"tab\\\" for tablet\\r\\n  \\\"scr\\\": 768px,\\r\\n  // \\\"scr\\\" for screen\\r\\n  \\\"lg\\\": 1024px // \\\"lg\\\" for large\\r\\n);\\n\"))), \"\\n\", React.createElement(_components.p, null, \"Different designers might like different breakpoints. So change 'em to your design! Changing the keys like \", React.createElement(_components.code, null, \"mob\"), \" or \", React.createElement(_components.code, null, \"tab\"), \" changes the prefix names. Changing the values changes where the breakpoints happen. Adding adding/subtracting the keys and values changes the number of breakpoints. Just don't change the \", React.createElement(_components.code, null, \"_\"), \" breakpoint because the class generation logic needs that one but go wild with the rest!\"), \"\\n\", React.createElement(_components.p, null, \"So how do they work? I modeled these after how my brain works. \", React.createElement(_components.code, null, \"tab:\"), \"-prefixed classes are applied when the breapoint is OVER 640 px. In other words, for Tablet sizes. \", React.createElement(_components.code, null, \"scr:\"), \" prefixed classes are applied whne the breakpoint is OVER 768px, for screeen sizes.\"), \"\\n\", React.createElement(_components.p, null, \"A desiner might not like their brekpoints there. Maybe they want their breakpoints in the middle. In my opinion, that's perfectly legit! One advantage to this framework is how straight-forward changing anything is. It's just changing variables!\"), \"\\n\", React.createElement(_components.h2, null, \"Max Breakpoints\"), \"\\n\", React.createElement(_components.p, null, \"I also included prefixes for \", React.createElement(_components.code, null, \"max-tab:\"), \" which applies the classes up UNTIL the NEXT breakpoint, so \", React.createElement(_components.code, null, \"max-tab:\"), \" will be applied vor all values UNDER the \", React.createElement(_components.code, null, \"scr\"), \" breakpoint, that is, for everything under \", React.createElement(_components.code, null, \"768px\"), \".\"), \"\\n\", React.createElement(_components.p, null, \"I don't know your thoughts, but I personally mix the regular and \\\"max\\\" breakpoint classes at will instead of just sticking to one or the other. It's just how my brain works, and sure I've met developers who would be annoyed by that, but as far as I'm concerned it's just like, their opinion man.\"), \"\\n\", React.createElement(_components.h2, null, \"Examples\"), \"\\n\", React.createElement(_components.p, null, \"Ok enough dicussion, let's take a look at some Examples. I'll just stick to a few simple ones here, for the basics, see the sidebar for refrences to other properties.\"), \"\\n\", React.createElement(_components.h3, null, \"Padding example\"), \"\\n\", React.createElement(_components.p, null, \"If you're on a browser try resizing the screen to see the padding change! On tablet widths or smaller, you will have to deal with closing the sidbar I'm sry (click the magenta 'x' on the top left that appears on those sizes)\"), \"\\n\", React.createElement(\"div\", {\n    className: \"center m-lg flex-col\"\n  }, React.createElement(\"div\", {\n    className: \"center bg-blue p-sm tab:p-md scr:p-lg lg:p-xl radius-md mb-md\"\n  }, React.createElement(\"div\", {\n    className: \"w-5 h-5 bg-magenta radius-md\"\n  })), React.createElement(Paragraph, {\n    className: \"display-none max-mob:display-block\",\n    text: \"Mobile: Small Padding\"\n  }), React.createElement(Paragraph, {\n    className: \"display-none tab:display-block scr:display-none\",\n    text: \"Tablet: Med Padding\"\n  }), React.createElement(Paragraph, {\n    className: \"display-none scr:display-block lg:display-none\",\n    text: \"Screen: Large Padding\"\n  }), React.createElement(Paragraph, {\n    className: \"display-none lg:display-block\",\n    text: \"Large Breakpoint: XL Padding\"\n  })), \"\\n\", React.createElement(_components.p, null, \"So the code for the padding is straight forward:\"), \"\\n\", React.createElement(CodeWrapper, {\n    title: \"HTML\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-html\"\n  }, \"<div className=\\\"center m-lg flex-col\\\">\\r\\n  <div\\r\\n    className=\\\"center bg-blue radius-md mb-md\\r\\n      p-sm \\r\\n      tab:p-md \\r\\n      scr:p-lg \\r\\n      lg:p-xl\\\"\\r\\n  >\\r\\n    <div className=\\\"w-5 h-5 bg-magenta radius-md\\\" />\\r\\n  </div>\\r\\n</div>\\n\"))), \"\\n\", React.createElement(_components.p, null, \"Here you can see the \", React.createElement(_components.code, null, \"tab:p-md\"), \", \", React.createElement(_components.code, null, \"scr:p-lg\"), \", and \", React.createElement(_components.code, null, \"lg:p-xl\"), \" classes applying different paddings to the blue wrapper-div for different screen widths. If you're wondering how the text changes, here is the html for that part:\"), \"\\n\", React.createElement(CodeWrapper, {\n    title: \"HTML\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-html\"\n  }, \"<p className=\\\"display-none max-mob:display-block\\\">Mobile: Small Padding</p>\\r\\n<p className=\\\"display-none tab:display-block scr:display-none\\\">\\r\\n  Tablet: Med Padding\\r\\n</p>\\r\\n<p className=\\\"display-none scr:display-block lg:display-none\\\">\\r\\n  Screen: Large Padding\\r\\n</p>\\r\\n<p className=\\\"display-none lg:display-block\\\">Large Breakpoint: XL Padding</p>\\n\"))), \"\\n\", React.createElement(_components.p, null, \"Remember that if you use these responsive classes this way I made the class names to apply classes to the PREVIOUS breakpoing, so \", React.createElement(_components.code, null, \"tab\"), \" applies to everything over the MOBILE breakpoint, ie. everything over 640px or whatever you set it to be. It's just what made sense to me. Hence there's no \", React.createElement(_components.code, null, \"mob:\"), \" class if you use them this way becuase it would apply to everything over ZREO pixels (there's no breakpoint smaller than mobile after all) so it wouldn't make much sense, so for those widths you can just use a regular class. In a way, you can say that this framework is \\\"mobile first!\\\" (that was a big buzzword in a particuar era of web development)\"), \"\\n\", React.createElement(_components.p, null, \"However, the \", React.createElement(_components.code, null, \"mob\"), \" breapoint DOES have meaning when it comes to max-widths, that is, a \", React.createElement(_components.code, null, \"max-mob\"), \" class applies to everything UNDER the mobile breapoint, that is, only up to a maximum width of the \", React.createElement(_components.code, null, \"mob\"), \" breakpoint. I don't think it's too weird. Makes sense to me at least haha. You can see this class applied in the paragraphs.\"), \"\\n\", React.createElement(_components.h3, null, \"Font Size Example:\"), \"\\n\", React.createElement(_components.p, null, \"Let's wrap up with one example, this time making more use of the \", React.createElement(_components.code, null, \"max\"), \" breakpoints. Resize the window if you're on browser between above and below 1024px:\"), \"\\n\", React.createElement(\"div\", {\n    className: \"center m-lg mb-xl flex-col\"\n  }, React.createElement(\"div\", {\n    className: \"bg-blue text-white p-md radius-md max-scr:text-md text-xl\"\n  }, React.createElement(Paragraph, {\n    className: \"display-none max-scr:display-block\",\n    text: \"Screen and below: md font size\"\n  }), React.createElement(Paragraph, {\n    className: \"display-none lg:display-block\",\n    text: \"Large Breakpoint: xl font size\"\n  }))), \"\\n\", React.createElement(_components.p, null, \"Just like with the non \", React.createElement(_components.code, null, \"max-\"), \" prefix breakpoint classes, which have no meaning below the smallest non-zero breapoint, these classes have no meaning for the largest break poitn. i.e. \", React.createElement(_components.code, null, \"max-tab:\"), \" goes up to the \", React.createElement(_components.code, null, \"scr:\"), \" breakpoint, \", React.createElement(_components.code, null, \"max-scr:\"), \" goes up to the \", React.createElement(_components.code, null, \"lg\"), \" breakpoint, but \", React.createElement(_components.code, null, \"max-lg\"), \" would have no meaning because there are no brealpoints ABOVE that.\"), \"\\n\", React.createElement(_components.p, null, \"Again, it makes sense to me, haha. It's not so bad. I kind of like it. Anyway here's the HTML for this example:\"), \"\\n\", React.createElement(CodeWrapper, {\n    title: \"HTML\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-html\"\n  }, \"<div className=\\\"center m-lg mb-xl flex-col\\\">\\r\\n  <div className=\\\"bg-blue text-white p-md radius-md max-scr:text-md text-xl\\\">\\r\\n    <p className=\\\"display-none max-scr:display-block\\\">\\r\\n      Screen and below: md font size\\r\\n    </p>\\r\\n    <p className=\\\"display-none lg:display-block\\\">\\r\\n      Large Breakpoint: xl font size\\r\\n    </p>\\r\\n  </div>\\r\\n</div>\\n\"))), \"\\n\", React.createElement(_components.p, null, \"Like before, I use breakpoints to switch out the text, and I apply a font size to the wrapper div. Since \", React.createElement(_components.code, null, \"max-x\"), \" will be overridden by any size bigger, i.e. \", React.createElement(_components.code, null, \"max-tab\"), \" will be overridden by \", React.createElement(_components.code, null, \"max-scr\"), \" etc, it was tricky to explicitly have more than a couple breakpoints for this font-size example with the \", React.createElement(_components.code, null, \"max:\"), \" classes, however, I still think these classes are useful :)\"), \"\\n\", React.createElement(_components.p, null, \"Anyway, see the entries in the sidebar for the classes that are able to have responsive prefixes as well as examples!\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/mnt/c/Users/bthve/Desktop/2025 job search and side projects/side-repos/simple-scss-utilities-docs/content/docs/Responsive Examples/index.mdx\";\nimport React from \"react\";\nimport {useStaticQuery, graphql} from \"gatsby\";\nimport Layout from \"../../components/Layout/Layout\";\nimport SidebarLayout from \"../../components/Layout/SidebarLayout\";\nconst DocumentPage = ({location, data: {mdx}, children}) => {\n  const {pathname} = location;\n  if (pathname.includes(\"/page/\")) {\n    return React.createElement(React.Fragment, null, children);\n  }\n  return React.createElement(Layout, {\n    onSideBarPage: true\n  }, React.createElement(SidebarLayout, {\n    pathname: pathname\n  }, React.createElement(\"main\", null, children)));\n};\nDocumentPage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(DocumentPage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String) {\n    mdx(id: { eq: $id }) {\n      id\n      body\n      frontmatter {\n        description\n        title\n        type\n        image\n      }\n    }\n  }\n`;\n","import React from \"react\"\r\n\r\n// I decided to keep this seperate from CodeBlock.js, which which taken from examples give by how to use prisimjs in MDX around the interent\r\n// This is just a wrapper for code blocks, displays the filename or language, plus whatever else might be necessary in the future\r\n\r\n// a results block might be good too\r\n\r\nconst CodeWrapper = ({ children, title, isFile, addExtraMarginUnderTitle }) => {\r\n  return (\r\n    <div className=\"mt-lg mb-2xl mr-2\">\r\n      <h6\r\n        className={`font-large text-lg position-relative left-1px ${\r\n          addExtraMarginUnderTitle ? \"mb-md\" : \"mb-xs\"\r\n        }`}\r\n      >\r\n        {isFile ? \"File: \" : \"\"}\r\n        {title}\r\n      </h6>\r\n      <div className=\"mr-md\">{children}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CodeWrapper\r\n","import { createContext } from \"react\"\r\n\r\nconst SidebarContext = createContext({\r\n  hasScrolled: false,\r\n  setHasScrolled: () => {}, // keep track if the scrolling was done by the user\r\n\r\n  activeAnchor: \"\", // '${path} ${to} of active anchor link'\r\n  setActiveAnchor: () => {}\r\n})\r\n\r\nexport default SidebarContext\r\n","import React, { useState, useEffect, useContext } from \"react\"\r\nimport SidebarContext from \"./SidebarContext\"\r\nimport { useLocation } from \"@reach/router\"\r\nimport { navigate } from \"gatsby\"\r\n\r\n/*\r\n  Gatsby seemed to have a little trouble with anchor links \r\n  Not only did they not seem to quite work but.. I also wanted to implement smooth scrolling\r\n  if you jump from page to page so I made my own component. \r\n  It's possible to make the URLs just slightly awkared if you\r\n  click directly on the link .. but.. they still work\r\n*/\r\nconst CustomAnchor = ({ children, path, to }) => {\r\n  const location = useLocation()\r\n  const { activeAnchor, setActiveAnchor, hasScrolled, setHasScrolled } =\r\n    useContext(SidebarContext)\r\n  const [active, setActive] = useState(false)\r\n  const { pathname } = location\r\n\r\n  useEffect(() => {\r\n    if (activeAnchor == `${process.env.PATH_PREFIX}${path} ${to}`) {\r\n      setActive(true)\r\n    } else {\r\n      setActive(false)\r\n    }\r\n  }, [activeAnchor])\r\n\r\n  // console.log(\r\n  //   `path: ${path} to: ${to} pathname: ${pathname} prefix with path: ${process.env.PATH_PREFIX}${path}`\r\n  // )\r\n\r\n  return (\r\n    <p\r\n      className={`${active ? \"font-bold\" : \"\"} cursor-pointer`}\r\n      onClick={() => {\r\n        // the pathname from location usually has an added slash\r\n\r\n        if (`${process.env.PATH_PREFIX}${path}/` == pathname) {\r\n          const tag = document.getElementById(to)\r\n          tag.scrollIntoView({ behavior: \"smooth\" })\r\n          // set \"hasScrolled\" to false .. gets set true if the user scrolls the docs area\r\n          setHasScrolled(false)\r\n\r\n          // in the MDX anchor componnnt, the text generates the id \"to\"\r\n          // two anchor links on different documents might have the same text so\r\n          // I have the path be part of the identifying string\r\n          // as long as 2 anchors on the same MDX page don't have the same text we're good\r\n          setActiveAnchor(`${process.env.PATH_PREFIX}${path} ${to}`)\r\n        } else {\r\n          navigate(`${path}?anchor=${to}`)\r\n        }\r\n      }}\r\n    >\r\n      {children}\r\n    </p>\r\n  )\r\n}\r\n\r\nexport default CustomAnchor\r\n","import React, { useState, useEffect, useContext } from \"react\"\r\nimport { Link } from \"gatsby\"\r\nimport { useLocation } from \"@reach/router\"\r\nimport CustomAnchor from \"./CustomAnchor\"\r\nimport SidebarContext from \"./SidebarContext\"\r\nimport LayoutContext from \"./LayoutContext\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faX, faBars } from \"@fortawesome/free-solid-svg-icons\"\r\nimport * as layoutStyles from \"./layout.module.scss\"\r\nimport useWindowDimensions from \"../../hooks/useWindowDimensions\"\r\n// HEADER IS A ReserveD WORD\r\n\r\nconst SideBar = ({ sidebarData }) => {\r\n  const { setActiveAnchor, hasScrolled } = useContext(SidebarContext)\r\n  const { sidebarOpen, setSidebarOpen } = useContext(LayoutContext)\r\n\r\n  const [anchorsOnPage, setAnchorsOnPage] = useState([])\r\n  const [anchorsLoaded, setAnchorsLoaded] = useState(false)\r\n  const [anchorUpdate, setAnchorUpdate] = useState([])\r\n\r\n  const [intialAnchorLinkSet, setIntialAnchorLinkSet] = useState(false)\r\n\r\n  // const [sidebarOpen, setSidebarOpen] = useState(true)\r\n  const [wideScreen, setWideScreen] = useState(false)\r\n  const { width } = useWindowDimensions()\r\n\r\n  const location = useLocation()\r\n  const { pathname } = location\r\n\r\n  // ok every time something enteres or leaves, update\r\n  // the anchors in view\r\n  useEffect(() => {\r\n    const els = document.querySelectorAll(\".anchor-link\")\r\n\r\n    const observerCallback = (entries, observer, header) => {\r\n      const newAnchorInfo = []\r\n      entries.forEach((entry, i) => {\r\n        const to = entry.target.href.split(\"#\")[1]\r\n        const path = pathname.slice(0, -1)\r\n        const anchorString = `${path} ${to}`\r\n\r\n        if (entry.isIntersecting) {\r\n          newAnchorInfo.push({\r\n            anchorString,\r\n            inView: true,\r\n            offsetTop: entry.target.offsetTop\r\n          })\r\n        } else {\r\n          newAnchorInfo.push({\r\n            anchorString,\r\n            inView: false,\r\n            offsetTop: entry.target.offsetTop\r\n          })\r\n        }\r\n      })\r\n\r\n      setAnchorUpdate(newAnchorInfo)\r\n    }\r\n\r\n    const observer = new window.IntersectionObserver(observerCallback, {\r\n      root: null,\r\n      threshold: 0.5 // set offset 0.1 means trigger if atleast 10% of element in viewport\r\n    })\r\n\r\n    els.forEach((el) => {\r\n      observer.observe(el)\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (anchorUpdate.length && !anchorsLoaded) {\r\n      setAnchorsOnPage(anchorUpdate)\r\n      setAnchorsLoaded(true)\r\n    }\r\n  }, [anchorUpdate, anchorsLoaded])\r\n\r\n  // eh, there might be a better way to do this but\r\n  // by the time I got here I was like \"It works, and it's good enough!\"\r\n  useEffect(() => {\r\n    // to prevent infinite reloading, only update if there is a non-empty update, and then set the update to empty if done\r\n    if (anchorsLoaded && anchorUpdate.length) {\r\n      let newAnchorsOnPage = [...anchorsOnPage]\r\n      anchorUpdate.forEach((anchorInfo) => {\r\n        const index = anchorsOnPage.findIndex((anchor) => {\r\n          return anchorInfo.anchorString == anchor.anchorString\r\n        })\r\n\r\n        if (index >= 0) {\r\n          newAnchorsOnPage.splice(index, 1, anchorInfo)\r\n        }\r\n      })\r\n\r\n      setAnchorsOnPage(newAnchorsOnPage)\r\n      setAnchorUpdate([])\r\n\r\n      if (hasScrolled) {\r\n        let smallestTopOffset = Number.POSITIVE_INFINITY\r\n        let indexOfSmallestOffset = -1\r\n        newAnchorsOnPage.forEach((anchor, i) => {\r\n          if (anchor.inView && anchor.offsetTop < smallestTopOffset) {\r\n            smallestTopOffset = anchor.offsetTop\r\n            indexOfSmallestOffset = i\r\n          }\r\n        })\r\n\r\n        if (indexOfSmallestOffset >= 0) {\r\n          const newActiveAnchorInfo = newAnchorsOnPage[indexOfSmallestOffset]\r\n          setActiveAnchor(newActiveAnchorInfo.anchorString)\r\n        } else {\r\n          // if we're here, there's no anchors vidible on screen\r\n          setActiveAnchor(\"\")\r\n        }\r\n      }\r\n    }\r\n  }, [anchorsOnPage, anchorUpdate, anchorsLoaded, hasScrolled])\r\n\r\n  useEffect(() => {\r\n    if (location.search && !intialAnchorLinkSet) {\r\n      const urlParams = new URLSearchParams(location.search)\r\n      const anchorLink = urlParams.get(\"anchor\")\r\n      if (anchorLink) {\r\n        const tag = document.getElementById(anchorLink)\r\n        if (tag) {\r\n          tag.scrollIntoView({ behavior: \"smooth\" })\r\n\r\n          const path = pathname.slice(0, -1)\r\n          setActiveAnchor(`${path} ${anchorLink}`)\r\n        }\r\n      }\r\n      setIntialAnchorLinkSet(true)\r\n    } else if (anchorsLoaded && !intialAnchorLinkSet) {\r\n      // just set the active anchor link to the highest link in view\r\n      // pretty sure it's just gonna be the firs one that's \"in view\"\r\n      // and if the first one is in view, it's gonna be that one so ..\r\n      let firstAnchor = anchorsOnPage[0]\r\n\r\n      if (firstAnchor.inView) {\r\n        setActiveAnchor(firstAnchor.anchorString)\r\n      }\r\n\r\n      setIntialAnchorLinkSet(true)\r\n    }\r\n  }, [anchorsLoaded, anchorsOnPage, intialAnchorLinkSet])\r\n\r\n  useEffect(() => {\r\n    if (width > 768) {\r\n      setWideScreen(true)\r\n    } else {\r\n      setWideScreen(false)\r\n    }\r\n  }, [width])\r\n\r\n  useEffect(() => {\r\n    setSidebarOpen(true)\r\n  }, [wideScreen])\r\n\r\n  // organize alphabetically\r\n  // then loop the map and fill in the links and sublinks\r\n  console.log(\"SIDEBAR DATA IS\")\r\n  console.log(sidebarData)\r\n\r\n  if (!sidebarData) {\r\n    return <>{`No sidebar data for path ${pathname}`}</>\r\n  }\r\n\r\n  const { path, nodes } = sidebarData\r\n  const rootDocArr = []\r\n  const categoryArr = []\r\n  const categoryMap = {}\r\n  nodes.forEach((node) => {\r\n    const {\r\n      frontmatter: { category, title, slug, order, isCategoryRoot, anchorLinks }\r\n    } = node\r\n    if (!category) {\r\n      // don't give a slug of \"index\" part of the path here ..\r\n      // the path will just be /docs/ or /customize/ etc\r\n      // this is different for the categories\r\n      const pathName = slug === \"index\" ? `/${path}` : `/${path}/${slug}`\r\n      rootDocArr.push({\r\n        title,\r\n        path: pathName,\r\n        sublinks: null,\r\n        order,\r\n        anchorLinks\r\n      })\r\n    } else {\r\n      if (!categoryMap[category]) {\r\n        categoryMap[category] = []\r\n      }\r\n\r\n      if (isCategoryRoot) {\r\n        categoryArr.push({\r\n          title, // uppercase the first letter later\r\n          categoryName: category, // in case I change it from the title\r\n          isCategoryRoot: true,\r\n          path: `/${path}/${slug}`,\r\n          sublinks: null, // get changed into an array later\r\n          order,\r\n          anchorLinks\r\n        })\r\n      } else {\r\n        categoryMap[category].push({\r\n          title,\r\n          path: `/${path}/${slug}`,\r\n          order,\r\n          anchorLinks\r\n        })\r\n      }\r\n    }\r\n  })\r\n\r\n  // ok now loop through the sidebarLinkArr. If there's sublinks, fil them in\r\n\r\n  categoryArr.forEach((entry) => {\r\n    const category = entry.categoryName\r\n    entry.sublinks = categoryMap[category]\r\n  })\r\n\r\n  // the root docs will go first, sorted by an order property,  and then the categories\r\n  // in alphabetical order, and then the sublinks (in a category) are sorted by a frontmatter \"order\" property\r\n  // the anchor links are already determined in the frontmatter defintion\r\n  rootDocArr.sort((a, b) => a.order - b.order)\r\n  categoryArr.sort((a, b) => {\r\n    return a.order - b.order\r\n  })\r\n\r\n  categoryArr.forEach((item) => {\r\n    const { sublinks } = item\r\n\r\n    if (sublinks) {\r\n      sublinks.sort((a, b) => {\r\n        return a.order - b.order\r\n      })\r\n    }\r\n  })\r\n\r\n  const sidebarLinkArr = [...rootDocArr, ...categoryArr]\r\n\r\n  // capitalize category name\r\n  // .. hm.. oh yeah. Fix anchor links\r\n\r\n  return (\r\n    <>\r\n      <div className=\"w-0\">\r\n        <div\r\n          onClick={() => setSidebarOpen(true)}\r\n          className={`${\r\n            sidebarOpen ? \"display-none\" : \"display-flex\"\r\n          } text-xl w-3 h-3 position-relative top-1 left-1 radius-full cursor-pointer shadow-magenta-lg hover:shadow-blue-lg bg-background-ltr items-center justify-center bg-background z-5 text-magenta hover:text-blue`}\r\n        >\r\n          <FontAwesomeIcon icon={faBars} />\r\n        </div>\r\n      </div>\r\n      <div\r\n        id=\"sidebar\"\r\n        className={`${\r\n          layoutStyles.sidebar\r\n        }  max-tab:position-absolute max-tab:h-full min-w-1/4 max-tab:w-20 overflow-y-scroll bg-background z-4  ${\r\n          sidebarOpen ? \"\" : \"display-none\"\r\n        }`}\r\n      >\r\n        <nav className=\"p-md\">\r\n          <span className={`${wideScreen ? \"display-none\" : \"\"} `}>\r\n            <FontAwesomeIcon\r\n              className={`cursor-pointer hover:text-magenta text-magenta hover:text-blue text-lg py-sm`}\r\n              onClick={() => setSidebarOpen(false)}\r\n              icon={faX}\r\n            />\r\n          </span>\r\n          <ul className=\"display-flex flex-col line-height-lg\">\r\n            {sidebarLinkArr.map((entry) => {\r\n              const {\r\n                isCategoryRoot,\r\n                categoryName,\r\n                path,\r\n                title,\r\n                sublinks,\r\n                anchorLinks\r\n              } = entry\r\n\r\n              if (isCategoryRoot) {\r\n                const upperCaseTitle =\r\n                  title.charAt(0).toUpperCase() + title.slice(1)\r\n\r\n                const highlightLink =\r\n                  `${process.env.PATH_PREFIX}${path}/` === pathname\r\n\r\n                return (\r\n                  <li key={`${path} ${title}`}>\r\n                    <span\r\n                      className={`${\r\n                        highlightLink ? \"text-magenta\" : \"\"\r\n                      } font-large hover:text-magenta `}\r\n                    >\r\n                      <Link to={path}>{upperCaseTitle}</Link>\r\n                    </span>\r\n                    {anchorLinks && (\r\n                      <ul className=\"line-height-md \">\r\n                        {anchorLinks.map((anchorLink, i) => {\r\n                          // name of is a bit different, I don't think anchor links are a full \"path\" (might need to refacto later)\r\n                          const { title, link } = anchorLink\r\n\r\n                          return (\r\n                            <li\r\n                              key={`${title} ${link}`}\r\n                              className={`pl-md text-md ${\r\n                                i == anchorLinks.length - 1 ? \"mb-xs\" : \"\"\r\n                              } `}\r\n                            >\r\n                              <CustomAnchor path={path} to={link}>\r\n                                {title}\r\n                              </CustomAnchor>\r\n                            </li>\r\n                          )\r\n                        })}\r\n                      </ul>\r\n                    )}\r\n                    {sublinks && (\r\n                      <ul>\r\n                        {sublinks.map((link, i) => {\r\n                          const { title, path: subLinkPath, anchorLinks } = link\r\n\r\n                          const highlightLink =\r\n                            `${process.env.PATH_PREFIX}${subLinkPath}/` ===\r\n                            pathname\r\n\r\n                          return (\r\n                            <li\r\n                              key={`${title} ${subLinkPath}`}\r\n                              className={`pl-md font-normal   ${\r\n                                i == sublinks.length - 1 ? \"mb-xs\" : \"\"\r\n                              }`}\r\n                            >\r\n                              <span\r\n                                className={`${\r\n                                  highlightLink ? \"text-magenta\" : \"\"\r\n                                } font-bold hover:text-magenta`}\r\n                              >\r\n                                <Link to={subLinkPath}>{title}</Link>\r\n                              </span>\r\n\r\n                              {anchorLinks && (\r\n                                <ul className=\"line-height-md \">\r\n                                  {anchorLinks.map((anchorLink) => {\r\n                                    // name of is a bit different, I don't think anchor links are a full \"path\" (might need to refacto later)\r\n                                    const { title, link } = anchorLink\r\n\r\n                                    return (\r\n                                      <li\r\n                                        key={`${title} ${link}`}\r\n                                        className=\"pl-md text-md hover:text-magenta\"\r\n                                      >\r\n                                        <CustomAnchor\r\n                                          path={subLinkPath}\r\n                                          to={link}\r\n                                        >\r\n                                          {title}\r\n                                        </CustomAnchor>\r\n                                      </li>\r\n                                    )\r\n                                  })}\r\n                                </ul>\r\n                              )}\r\n                            </li>\r\n                          )\r\n                        })}\r\n                      </ul>\r\n                    )}\r\n                  </li>\r\n                )\r\n              }\r\n\r\n              const upperCaseTitle =\r\n                title.charAt(0).toUpperCase() + title.slice(1)\r\n\r\n              const highlightLink =\r\n                `${process.env.PATH_PREFIX}${path}/` === pathname\r\n\r\n              return (\r\n                <li key={`${path} ${title}`}>\r\n                  <span\r\n                    className={`${\r\n                      highlightLink ? \"text-magenta\" : \"\"\r\n                    } font-large hover:text-magenta`}\r\n                  >\r\n                    <Link to={path}>{title}</Link>\r\n                  </span>\r\n                </li>\r\n              )\r\n            })}\r\n          </ul>\r\n        </nav>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SideBar\r\n","import React, { useState, useContext } from \"react\"\r\nimport Footer from \"./Footer\"\r\nimport SideBar from \"./Sidebar\"\r\nimport LayoutContext from \"./LayoutContext\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\nimport * as layoutStyles from \"./layout.module.scss\"\r\nimport SidebarContext from \"./SidebarContext\"\r\n// not sure how best to pass the sidebar and the content\r\n\r\nconst SidebarLayout = ({ pathname, children }) => {\r\n  // context state\r\n  const { sidebarOpen, setSidebarOpen } = useContext(LayoutContext)\r\n\r\n  const [hasScrolled, setHasScrolled] = useState(false)\r\n  const [activeAnchor, setActiveAnchor] = useState(\"\")\r\n\r\n  const { docs, components, customize } = useStaticQuery(graphql`\r\n    query HeaderQuery {\r\n      docs: allMdx(filter: { frontmatter: { type: { eq: \"docs\" } } }) {\r\n        nodes {\r\n          id\r\n          frontmatter {\r\n            title\r\n            slug\r\n            category\r\n            order\r\n            isCategoryRoot\r\n            anchorLinks {\r\n              title\r\n              link\r\n            }\r\n          }\r\n        }\r\n      }\r\n      # components: allMdx(\r\n      #   filter: { frontmatter: { type: { eq: \"components\" } } }\r\n      # ) {\r\n      #   nodes {\r\n      #     id\r\n      #     frontmatter {\r\n      #       title\r\n      #       slug\r\n      #       category\r\n      #       order\r\n      #       isCategoryRoot\r\n      #       anchorLinks {\r\n      #         title\r\n      #         link\r\n      #       }\r\n      #     }\r\n      #   }\r\n      # }\r\n      customize: allMdx(\r\n        filter: { frontmatter: { type: { eq: \"customize\" } } }\r\n      ) {\r\n        nodes {\r\n          id\r\n          frontmatter {\r\n            title\r\n            slug\r\n            category\r\n            order\r\n            isCategoryRoot\r\n            anchorLinks {\r\n              title\r\n              link\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  // const pathParts = pathname.split(\"/\")\r\n  // const section = pathParts.length && pathname.split(\"/\")[1] // this should always be defined in this route but let;s be careful\r\n\r\n  let path_prefix = process.env.PATH_PREFIX\r\n    ? process.env.PATH_PREFIX\r\n    : process.env.GATSBY_PATH_PREFIX // make a .env.development file and put GAtSBY\r\n\r\n  let sidebarData\r\n\r\n  console.log(\"TIME TO DEBUG\")\r\n  console.log(sidebarData)\r\n  console.log(`${path_prefix}docs`)\r\n  console.log(process.env)\r\n  console.log(process.env.GATSBY_PATH_PREFIX)\r\n  console.log(process.env.PATH_PREFIX)\r\n\r\n  // this might be kinda janky code .. but I don't wanna spend forever trying to think about an alternative way\r\n  if (pathname.startsWith(`${path_prefix}docs`)) {\r\n    sidebarData = { path: \"docs\", ...docs }\r\n  } else if (pathname.startsWith(`${path_prefix}customize`)) {\r\n    sidebarData = { path: \"customize\", ...customize }\r\n  }\r\n\r\n  return (\r\n    <div id=\"sidebar-layout\" className=\"display-flex min-w-full grow-1\">\r\n      <SidebarContext.Provider\r\n        value={{\r\n          activeAnchor,\r\n          setActiveAnchor,\r\n          hasScrolled,\r\n          setHasScrolled\r\n        }}\r\n      >\r\n        <SideBar sidebarData={sidebarData} />\r\n        <div\r\n          id=\"docs-section\"\r\n          className={`display-flex flex-col grow-1 overflow-y-scroll position-relative ${layoutStyles.docsSection}`}\r\n          onWheel={() => {\r\n            setHasScrolled(true)\r\n          }}\r\n          // remember to test this on mobile\r\n          onTouchStart={() => {\r\n            setHasScrolled(true)\r\n          }}\r\n        >\r\n          <div\r\n            id=\"small-width-overlay\"\r\n            className={`display-none ${\r\n              sidebarOpen ? \"max-tab:display-block\" : \"\"\r\n            } position-fixed top-0 left-0 w-full h-full z-3 bg-black opacity-10`}\r\n          />\r\n          <div\r\n            id=\"the-document\"\r\n            className={`grow-1 pl-xl p-lg w-19/20 max-w-container lg:mx-auto   ${\r\n              sidebarOpen ? \"max-tab:filter-blur-md\" : \"\"\r\n            }`}\r\n          >\r\n            {children}\r\n          </div>\r\n          <Footer />\r\n        </div>\r\n      </SidebarContext.Provider>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SidebarLayout\r\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","h4","p","code","a","h2","pre","h3","_provideComponents","components","React","href","CodeWrapper","title","isFile","className","Paragraph","text","wrapper","MDXLayout","DocumentPage","_ref","location","data","mdx","children","pathname","includes","Layout","onSideBarPage","SidebarLayout","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","addExtraMarginUnderTitle","createContext","hasScrolled","setHasScrolled","activeAnchor","setActiveAnchor","path","to","useLocation","useContext","SidebarContext","active","setActive","useState","useEffect","process","PATH_PREFIX","onClick","document","getElementById","scrollIntoView","behavior","navigate","sidebarData","sidebarOpen","setSidebarOpen","LayoutContext","anchorsOnPage","setAnchorsOnPage","anchorsLoaded","setAnchorsLoaded","anchorUpdate","setAnchorUpdate","intialAnchorLinkSet","setIntialAnchorLinkSet","wideScreen","setWideScreen","width","useWindowDimensions","els","querySelectorAll","observer","window","IntersectionObserver","observerCallback","entries","header","newAnchorInfo","forEach","entry","i","target","split","anchorString","slice","isIntersecting","push","inView","offsetTop","root","threshold","el","observe","length","newAnchorsOnPage","_toConsumableArray","anchorInfo","index","findIndex","anchor","splice","smallestTopOffset","Number","POSITIVE_INFINITY","indexOfSmallestOffset","newActiveAnchorInfo","search","anchorLink","URLSearchParams","get","tag","firstAnchor","console","log","nodes","rootDocArr","categoryArr","categoryMap","node","frontmatter","category","slug","order","isCategoryRoot","anchorLinks","categoryName","sublinks","pathName","sort","b","item","sidebarLinkArr","concat","FontAwesomeIcon","icon","faBars","id","faX","map","upperCaseTitle","charAt","toUpperCase","highlightLink","key","Link","link","CustomAnchor","subLinkPath","docs","customize","useStaticQuery","path_prefix","startsWith","Provider","value","SideBar","onWheel","onTouchStart","Footer"],"sourceRoot":""}